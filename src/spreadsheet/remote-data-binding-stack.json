{"index.css":".control-section.spreadsheet-control {\r\n    height: 550px;\r\n}\r\n\r\n#sb-content .e-spreadsheet .e-tab .e-tab-text {\r\n    display: inherit;\r\n}","CustomAdaptor.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ej2_data_1 = require(\"@syncfusion/ej2-data\");\nvar CustomAdaptor = /** @class */ (function (_super) {\n    __extends(CustomAdaptor, _super);\n    function CustomAdaptor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CustomAdaptor.prototype.processResponse = function () {\n        var result = [];\n        var original = _super.prototype.processResponse.apply(this, arguments);\n        original.result.forEach(function (item, idx) {\n            result[idx] = {};\n            Object.keys(item).forEach(function (key) {\n                if (['OrderID', 'CustomerID', 'ShipName', 'ShipCity', 'ShipCountry'].indexOf(key) > -1) {\n                    result[idx][key] = item[key];\n                }\n            });\n        });\n        return { result: result, count: original.count };\n    };\n    return CustomAdaptor;\n}(ej2_data_1.ODataAdaptor));\nexports.CustomAdaptor = CustomAdaptor;\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { SpreadsheetComponent, SheetsDirective, SheetDirective, ColumnsDirective, RangeSettingsDirective, RangeSettingDirective, RowsDirective, RowDirective, CellsDirective, CellDirective, ColumnDirective } from '@syncfusion/ej2-react-spreadsheet';\r\nimport { DataManager } from '@syncfusion/ej2-data';\r\nimport { SampleBase } from './sample-base';\r\n\r\nimport { CustomAdaptor } from './CustomAdaptor';\r\nexport class RemoteDataBinding extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        //Initialize DataManager.\r\n        this.data = new DataManager({\r\n            // Remote service url\r\n            url: 'https://ej2services.syncfusion.com/production/web-services/api/Orders',\r\n            adaptor: new CustomAdaptor,\r\n            crossDomain: true\r\n        });\r\n    }\r\n    onDataBound() {\r\n        if (this.spreadsheet.sheets[this.spreadsheet.activeSheetTab - 1].name === 'Shipment Details' && !this.spreadsheet.isOpen) {\r\n            this.spreadsheet.cellFormat({ fontWeight: 'bold', textAlign: 'center' }, 'A1:G1');\r\n        }\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className='control-section spreadsheet-control'>\r\n                    <SpreadsheetComponent openUrl='https://ej2services.syncfusion.com/production/web-services/api/spreadsheet/open' saveUrl='https://ej2services.syncfusion.com/production/web-services/api/spreadsheet/save' ref={(ssObj) => { this.spreadsheet = ssObj; }} dataBound={this.onDataBound.bind(this)}>\r\n                            <SheetsDirective>\r\n                            <SheetDirective name='Shipment Details'>\r\n                                <RangeSettingsDirective>\r\n                                    <RangeSettingDirective dataSource={this.data} showFieldAsHeader={false} startCell='A2'></RangeSettingDirective>\r\n                                </RangeSettingsDirective>\r\n                                <RowsDirective>\r\n                                    <RowDirective>\r\n                                        <CellsDirective>\r\n                                            <CellDirective value='Order ID'></CellDirective>\r\n                                            <CellDirective value='Customer Name'></CellDirective>\r\n                                            <CellDirective value='Ship Name'></CellDirective>\r\n                                            <CellDirective value='Ship City'></CellDirective>\r\n                                            <CellDirective value='Ship Country'></CellDirective>\r\n                                        </CellsDirective>\r\n                                    </RowDirective>\r\n                                </RowsDirective>\r\n                                <ColumnsDirective>\r\n                                    <ColumnDirective width={100}></ColumnDirective>\r\n                                    <ColumnDirective width={130}></ColumnDirective>\r\n                                    <ColumnDirective width={150}></ColumnDirective>\r\n                                    <ColumnDirective width={200}></ColumnDirective>\r\n                                    <ColumnDirective width={180}></ColumnDirective>\r\n                                </ColumnsDirective>\r\n                            </SheetDirective>\r\n                        </SheetsDirective>\r\n                    </SpreadsheetComponent>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<RemoteDataBinding />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}