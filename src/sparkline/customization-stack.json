{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Customization samples for sparkline\r\n */\r\nimport * as React from \"react\";\r\nimport { PropertyPane } from './property-pane';\r\nimport { SliderComponent } from \"@syncfusion/ej2-react-inputs\";\r\nimport { CheckBoxComponent } from \"@syncfusion/ej2-react-buttons\";\r\nimport { SparklineComponent, SparklineTooltip, Inject } from '@syncfusion/ej2-react-charts';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { SampleBase } from './sample-base';\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }\r\n    #axis > * {\r\n        padding: 0px !important;\r\n    }`;\r\nconst slidercss = `  \r\n    .content-wrapper {\r\n        width: 40%;\r\n        margin: 0 auto;\r\n        min-width: 170px;\r\n    }`;\r\nexport class Customization extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        // Code for Property Panel\r\n        this.droplist = [\r\n            { value: 'Sales Percentage' },\r\n            { value: 'Sales Count' },\r\n        ];\r\n    }\r\n    sparklineChange() {\r\n        let element1 = document.getElementById('spark');\r\n        if (element1.value === 'Sales Percentage') {\r\n            this.axisElement.value = this.percentage.axisSettings.value;\r\n            this.axisElement.min = 0;\r\n            this.axisElement.max = 10;\r\n        }\r\n        else {\r\n            this.axisElement.value = this.sales.axisSettings.value;\r\n            this.axisElement.min = 0;\r\n            this.axisElement.max = 5000000;\r\n        }\r\n        if ((element1.value === 'Sales Percentage' && this.percentage.markerSettings.visible.length) ||\r\n            (element1.value === 'Sales Count' && this.sales.markerSettings.visible.length)) {\r\n            this.markerElement.checked = true;\r\n        }\r\n        else {\r\n            this.markerElement.checked = false;\r\n        }\r\n        this.markerChange();\r\n        if ((element1.value === 'Sales Percentage' && this.percentage.dataLabelSettings.visible.length) ||\r\n            (element1.value === 'Sales Count' && this.sales.dataLabelSettings.visible.length)) {\r\n            this.datalabelElement.checked = true;\r\n        }\r\n        else {\r\n            this.datalabelElement.checked = false;\r\n        }\r\n        let all = this.allElement;\r\n        let negative = this.negativeElement;\r\n        let first = this.firstElement;\r\n        let last = this.lastElement;\r\n        let high = this.highElement;\r\n        let low = this.lowElement;\r\n        let label = this.datalabelElement;\r\n        let marker = this.markerElement;\r\n        let rtl = this.rtlElement;\r\n        let spark = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\r\n        if (!marker.checked && !label.checked) {\r\n            all.checked = false;\r\n            negative.checked = false;\r\n            first.checked = false;\r\n            last.checked = false;\r\n            high.checked = false;\r\n            low.checked = false;\r\n        }\r\n        if (marker.checked) {\r\n            let spark = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\r\n            all.checked = spark.markerSettings.visible.indexOf('All') > -1;\r\n            negative.checked = spark.markerSettings.visible.indexOf('Negative') > -1;\r\n            first.checked = spark.markerSettings.visible.indexOf('Start') > -1;\r\n            last.checked = spark.markerSettings.visible.indexOf('End') > -1;\r\n            high.checked = spark.markerSettings.visible.indexOf('High') > -1;\r\n            low.checked = spark.markerSettings.visible.indexOf('Low') > -1;\r\n        }\r\n        if (label.checked) {\r\n            let spark = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\r\n            all.checked = spark.dataLabelSettings.visible.indexOf('All') > -1;\r\n            negative.checked = spark.dataLabelSettings.visible.indexOf('Negative') > -1;\r\n            first.checked = spark.dataLabelSettings.visible.indexOf('Start') > -1;\r\n            last.checked = spark.dataLabelSettings.visible.indexOf('End') > -1;\r\n            high.checked = spark.dataLabelSettings.visible.indexOf('High') > -1;\r\n            low.checked = spark.dataLabelSettings.visible.indexOf('Low') > -1;\r\n        }\r\n        this.datalabelChange();\r\n        if ((element1.value === 'Sales Percentage' && this.percentage.tooltipSettings.visible === true) ||\r\n            (element1.value === 'Sales Count' && this.sales.tooltipSettings.visible === true)) {\r\n            this.tooltipElement.checked = true;\r\n        }\r\n        else {\r\n            this.tooltipElement.checked = false;\r\n        }\r\n        this.tooltipChange();\r\n        if ((element1.value === 'Sales Percentage' && this.percentage.tooltipSettings.trackLineSettings.visible === true) ||\r\n            (element1.value === 'Sales Count' && this.sales.tooltipSettings.trackLineSettings.visible === true)) {\r\n            this.tracklineElement.checked = true;\r\n        }\r\n        else {\r\n            this.tracklineElement.checked = false;\r\n        }\r\n        this.tracklineChange();\r\n        if ((element1.value === 'Sales Percentage' && this.percentage.axisSettings.lineSettings.visible === true) ||\r\n            (element1.value === 'Sales Count' && this.sales.axisSettings.lineSettings.visible === true)) {\r\n            this.axislineElement.checked = true;\r\n        }\r\n        else {\r\n            this.axislineElement.checked = false;\r\n        }\r\n        this.axislineChange();\r\n        this.rtlChange();\r\n        if ((element1.value === 'Sales Percentage' && this.percentage.enableRtl === true) ||\r\n            (element1.value === 'Sales Count' && this.sales.enableRtl === true)) {\r\n            this.rtlElement.checked = true;\r\n        }\r\n        else {\r\n            this.rtlElement.checked = false;\r\n        }\r\n        if (element1.value === 'Sales Percentage' && this.percentage.axisSettings.value !== 0) {\r\n            this.axisElement.value = this.percentage.axisSettings.value;\r\n            this.axisElement.min = 0;\r\n            this.axisElement.max = 10;\r\n            document.getElementById('axisval').innerHTML = 'Axis value: <span> ' + this.percentage.axisSettings.value;\r\n        }\r\n        if (element1.value === 'Sales Count' && this.sales.axisSettings.value !== 0) {\r\n            this.axisElement.value = this.sales.axisSettings.value;\r\n            this.axisElement.min = 0;\r\n            this.axisElement.max = 5000000;\r\n            document.getElementById('axisval').innerHTML = 'Axis value: <span> ' + this.sales.axisSettings.value;\r\n        }\r\n        this.axisChange();\r\n        all.checked = !(negative.checked || high.checked || low.checked || first.checked || last.checked);\r\n        negative.disabled = high.disabled = low.disabled = first.disabled = last.disabled = all.checked;\r\n    }\r\n    allColorChange() {\r\n        let negative = this.negativeElement;\r\n        let first = this.firstElement;\r\n        let last = this.lastElement;\r\n        let high = this.highElement;\r\n        let low = this.lowElement;\r\n        if (this.allElement.checked == true) {\r\n            this.negativeElement.disabled = true;\r\n            this.firstElement.disabled = true;\r\n            this.lastElement.disabled = true;\r\n            this.highElement.disabled = true;\r\n            this.lowElement.disabled = true;\r\n        }\r\n        else {\r\n            this.negativeElement.disabled = false;\r\n            this.firstElement.disabled = false;\r\n            this.lastElement.disabled = false;\r\n            this.highElement.disabled = false;\r\n            this.lowElement.disabled = false;\r\n        }\r\n        let marker = this.markerElement;\r\n        let label = this.datalabelElement;\r\n        let element1 = document.getElementById('spark');\r\n        let spark = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\r\n        spark.markerSettings.visible = (true && marker.checked) ? ['All'] : (marker.checked) ? this.getVisible() : [];\r\n        spark.dataLabelSettings.visible = (true && label.checked) ? ['All'] : (label.checked) ? this.getVisible() : [];\r\n        spark.refresh();\r\n    }\r\n    colorChange() {\r\n        this.processMarkerLabel();\r\n    }\r\n    processMarkerLabel() {\r\n        let marker = this.markerElement;\r\n        let label = this.datalabelElement;\r\n        let element1 = document.getElementById('spark');\r\n        let spark = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\r\n        if (marker.checked) {\r\n            spark.markerSettings.visible = this.getVisible();\r\n            spark.refresh();\r\n        }\r\n        if (label.checked) {\r\n            spark.dataLabelSettings.visible = this.getVisible();\r\n            spark.refresh();\r\n        }\r\n    }\r\n    getVisible() {\r\n        let visible = [];\r\n        if (this.allElement.checked)\r\n            return ['All'];\r\n        else {\r\n            if (this.negativeElement.checked)\r\n                visible.push(\"Negative\");\r\n            if (this.firstElement.checked)\r\n                visible.push(\"Start\");\r\n            if (this.lastElement.checked)\r\n                visible.push(\"End\");\r\n            if (this.firstElement.checked)\r\n                visible.push(\"High\");\r\n            if (this.lowElement.checked)\r\n                visible.push(\"Low\");\r\n        }\r\n        return visible;\r\n    }\r\n    markerChange() {\r\n        let element1 = document.getElementById('spark');\r\n        let spark = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\r\n        spark.markerSettings.visible = this.markerElement.checked ? this.getVisible() : [];\r\n        spark.refresh();\r\n    }\r\n    datalabelChange() {\r\n        let element1 = document.getElementById('spark');\r\n        let spark = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\r\n        spark.dataLabelSettings.visible = this.datalabelElement.checked ? this.getVisible() : [];\r\n        spark.refresh();\r\n    }\r\n    rtlChange() {\r\n        let element1 = document.getElementById('spark');\r\n        let spark = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\r\n        spark.enableRtl = this.rtlElement.checked ? true : false;\r\n        spark.refresh();\r\n    }\r\n    tooltipChange() {\r\n        let element1 = document.getElementById('spark');\r\n        let spark = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\r\n        spark.tooltipSettings.visible = this.tooltipElement.checked;\r\n        spark.tooltipSettings.format = '${xval}: ${yval}';\r\n        spark.refresh();\r\n    }\r\n    tracklineChange() {\r\n        let element1 = document.getElementById('spark');\r\n        let spark = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\r\n        spark.tooltipSettings.trackLineSettings.visible = this.tracklineElement.checked;\r\n        spark.tooltipSettings.trackLineSettings.color = 'red';\r\n        spark.tooltipSettings.trackLineSettings.width = 1;\r\n        spark.refresh();\r\n    }\r\n    axislineChange() {\r\n        let element1 = document.getElementById('spark');\r\n        let spark = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\r\n        spark.axisSettings.lineSettings.visible = this.axislineElement.checked;\r\n        spark.axisSettings.lineSettings.color = 'red';\r\n        spark.axisSettings.lineSettings.width = 2;\r\n        spark.refresh();\r\n    }\r\n    axisChange() {\r\n        let value = parseInt(this.axisElement.value.toString(), 10);\r\n        let element1 = document.getElementById('spark');\r\n        let spark = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\r\n        spark.axisSettings.value = value;\r\n        document.getElementById('axisval').innerHTML = \"Axis Value <span>\" + value;\r\n        spark.refresh();\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className=\"col-lg-8 control-section\">\r\n                    <div id=\"spark-container\" className=\"row\">\r\n                        <div className=\"cols-sample-area\" style={{ \"margin\": \"auto\", \"textAlign\": \"center\" }}>\r\n                            <p style={{ \"font-size\": \"18px\" }}> Worldwide car sales by brand - 2017</p>\r\n                            <table style={{ \"width\": \"100%\", \"margin\": \"auto\" }}>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td style={{ \"margin\": \"auto\" }}>Sales Percentage</td>\r\n                                        <td>\r\n                                            <SparklineComponent load={this.load.bind(this)} ref={m => this.percentage = m} id='spark1-container' height='200px' width='200px' lineWidth={1} type='Column' valueType='Category' tooltipSettings={{\r\n            format: '${xval} : ${yval}',\r\n            trackLineSettings: {\r\n                color: 'red',\r\n                width: 1\r\n            }\r\n        }} markerSettings={{\r\n            fill: 'red',\r\n            size: 5\r\n        }} axisSettings={{\r\n            lineSettings: {\r\n                color: 'red',\r\n                width: 2\r\n            }\r\n        }} dataSource={[\r\n            { x: 0, xval: 'AUDI', yval: 1 },\r\n            { x: 1, xval: 'BMW', yval: 5 },\r\n            { x: 2, xval: 'BUICK', yval: -1 },\r\n            { x: 3, xval: 'CETROEN', yval: -6 },\r\n            { x: 4, xval: 'CHEVROLET', yval: 0 },\r\n            { x: 5, xval: 'FIAT', yval: 1 },\r\n            { x: 6, xval: 'FORD', yval: -2 },\r\n            { x: 7, xval: 'HONDA', yval: 7 },\r\n            { x: 8, xval: 'HYUNDAI', yval: -9 },\r\n            { x: 9, xval: 'JEEP', yval: 0 },\r\n            { x: 10, xval: 'KIA', yval: -10 },\r\n            { x: 11, xval: 'MAZDA', yval: 3 },\r\n            { x: 12, xval: 'MERCEDES', yval: 13 },\r\n            { x: 13, xval: 'NISSAN', yval: 5 },\r\n            { x: 14, xval: 'OPEL/VHALL', yval: -6 },\r\n            { x: 15, xval: 'PEUGEOT', yval: 0 },\r\n            { x: 16, xval: 'RENAULT', yval: 7 },\r\n            { x: 17, xval: 'SKODA', yval: 5 },\r\n            { x: 18, xval: 'SUBARU', yval: 5 },\r\n            { x: 19, xval: 'SUZUKI', yval: 11 },\r\n            { x: 20, xval: 'TOYOTA', yval: 5 },\r\n            { x: 21, xval: 'VOLKSWAGEN', yval: 3 },\r\n        ]} xName='xval' yName='yval'>\r\n                                                <Inject services={[SparklineTooltip]}/>\r\n                                            </SparklineComponent>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td style={{ \"margin\": \"auto\" }}>Sales Count</td>\r\n                                        <td>\r\n                                            <SparklineComponent load={this.load.bind(this)} ref={m => this.sales = m} id='spark2-container' height='200px' width='200px' lineWidth={1} type='Column' valueType='Category' tooltipSettings={{\r\n            format: '${xval} : ${yval}',\r\n            trackLineSettings: {\r\n                color: 'red',\r\n                width: 1\r\n            }\r\n        }} markerSettings={{\r\n            fill: 'red',\r\n            size: 5\r\n        }} axisSettings={{\r\n            lineSettings: {\r\n                color: 'red',\r\n                width: 2\r\n            }\r\n        }} dataSource={[\r\n            { x: 0, xval: 'AUDI', yval: 1847613 },\r\n            { x: 1, xval: 'BMW', yval: 2030331 },\r\n            { x: 2, xval: 'BUICK', yval: 1465823 },\r\n            { x: 3, xval: 'CETROEN', yval: 999888 },\r\n            { x: 4, xval: 'CHEVROLET', yval: 3857388 },\r\n            { x: 5, xval: 'FIAT', yval: 1503806 },\r\n            { x: 6, xval: 'FORD', yval: 5953122 },\r\n            { x: 7, xval: 'HONDA', yval: 4967689 },\r\n            { x: 8, xval: 'HYUNDAI', yval: 3951176 },\r\n            { x: 9, xval: 'JEEP', yval: 1390130 },\r\n            { x: 10, xval: 'KIA', yval: 2511293 },\r\n            { x: 11, xval: 'MAZDA', yval: 1495557 },\r\n            { x: 12, xval: 'MERCEDES', yval: 2834181 },\r\n            { x: 13, xval: 'NISSAN', yval: 4834694 },\r\n            { x: 14, xval: 'OPEL/VHALL', yval: 996559 },\r\n            { x: 15, xval: 'PEUGEOT', yval: 1590300 },\r\n            { x: 16, xval: 'RENAULT', yval: 2275227 },\r\n            { x: 17, xval: 'SKODA', yval: 1180672 },\r\n            { x: 18, xval: 'SUBARU', yval: 1050390 },\r\n            { x: 19, xval: 'SUZUKI', yval: 2891415 },\r\n            { x: 20, xval: 'TOYOTA', yval: 7843423 },\r\n            { x: 21, xval: 'VOLKSWAGEN', yval: 6639250 },\r\n        ]} xName='xval' yName='yval'>\r\n                                                <Inject services={[SparklineTooltip]}/>\r\n                                            </SparklineComponent>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div style={{ \"float\": \"right\", \"margin-right\": \"10px\" }}>Source: <a href=\" http://carsalesbase.com/global-car-sales-2017\" target=\"_blank\">carsalesbase.com</a>\r\n                    </div>\r\n                </div>\r\n\r\n                \r\n                <div className='col-lg-4 property-section'>\r\n                    <PropertyPane title='Properties'>\r\n                        <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                            <tbody>\r\n                                <tr style={{ \"height\": \"30px\" }}>\r\n                                    <td>\r\n                                        <div> Sparkline </div>\r\n                                    </td>\r\n                                    <td style={{ \"width\": \"50%\" }}>\r\n                                        <div>\r\n                                            <DropDownListComponent id=\"spark\" width=\"100%\" index={0} change={this.sparklineChange.bind(this)} ref={d => this.sparklineElement = d} dataSource={this.droplist} fields={{ text: 'value', value: 'value' }}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ \"height\": \"30px\" }}>\r\n                                    <td style={{ \"width\": \"50%\" }}>\r\n                                        <div> Special Points </div>\r\n                                    </td>\r\n                                    <td style={{ \"width\": \"50%\" }}>\r\n                                        <table>\r\n                                            <tr>\r\n                                                <td style={{ \"padding\": \"5px\" }}>All</td>\r\n                                                <td>\r\n                                                    <CheckBoxComponent change={this.allColorChange.bind(this)} ref={d => this.allElement = d} id='all' checked={true}/>\r\n                                                </td>\r\n                                                <td style={{ \"padding\": \"5px\" }}>Negative</td>\r\n                                                <td>\r\n                                                    <CheckBoxComponent change={this.colorChange.bind(this)} ref={d => this.negativeElement = d} id='negative' disabled={true}/>\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td style={{ \"padding\": \"5px\" }}>First</td>\r\n                                                <td>\r\n                                                    <CheckBoxComponent change={this.colorChange.bind(this)} ref={d => this.firstElement = d} id='first' disabled={true}/>\r\n                                                </td>\r\n                                                <td style={{ \"padding\": \"5px\" }}>Last</td>\r\n                                                <td>\r\n                                                    <CheckBoxComponent change={this.colorChange.bind(this)} ref={d => this.lastElement = d} id='last' disabled={true}/>\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td style={{ \"padding\": \"5px\" }}>High</td>\r\n                                                <td>\r\n                                                    <CheckBoxComponent change={this.colorChange.bind(this)} ref={d => this.highElement = d} id='high' disabled={true}/>\r\n                                                </td>\r\n                                                <td style={{ \"padding\": \"5px\" }}>Low</td>\r\n                                                <td>\r\n                                                    <CheckBoxComponent change={this.colorChange.bind(this)} ref={d => this.lowElement = d} id='low' disabled={true}/>\r\n                                                </td>\r\n                                            </tr>\r\n                                        </table>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ \"height\": \"30px\" }}>\r\n                                    <td style={{ \"width\": \"50%\" }}>\r\n                                        <div> Marker </div>\r\n                                    </td>\r\n                                    <td style={{ \"width\": \"50%\" }}>\r\n                                        <div>\r\n                                            <CheckBoxComponent change={this.markerChange.bind(this)} ref={d => this.markerElement = d} id='marker' disabled={false}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ \"height\": \"30px\" }}>\r\n                                    <td style={{ \"width\": \"50%\" }}>\r\n                                        <div> Data Label </div>\r\n                                    </td>\r\n                                    <td style={{ \"width\": \"50%\" }}>\r\n                                        <div>\r\n                                            <CheckBoxComponent change={this.datalabelChange.bind(this)} ref={d => this.datalabelElement = d} id='datalabel' disabled={false}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ \"height\": \"30px\" }}>\r\n                                    <td style={{ \"width\": \"50%\" }}>\r\n                                        <div> EnableRTL </div>\r\n                                    </td>\r\n                                    <td style={{ \"width\": \"50%\" }}>\r\n                                        <div>\r\n                                            <CheckBoxComponent change={this.rtlChange.bind(this)} ref={d => this.rtlElement = d} id='rtl' disabled={false}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ \"height\": \"30px\" }}>\r\n                                    <td style={{ \"width\": \"50%\" }}>\r\n                                        <div> Tooltip </div>\r\n                                    </td>\r\n                                    <td style={{ \"width\": \"50%\" }}>\r\n                                        <div>\r\n                                            <CheckBoxComponent change={this.tooltipChange.bind(this)} ref={d => this.tooltipElement = d} id='tooltip' disabled={false}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ \"height\": \"30px\" }}>\r\n                                    <td style={{ \"width\": \"50%\" }}>\r\n                                        <div> Track Line </div>\r\n                                    </td>\r\n                                    <td style={{ \"width\": \"50%\" }}>\r\n                                        <div>\r\n                                            <CheckBoxComponent change={this.tracklineChange.bind(this)} ref={d => this.tracklineElement = d} id='trackline' disabled={false}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ \"height\": \"30px\" }}>\r\n                                    <td style={{ \"width\": \"50%\" }}>\r\n                                        <div> Axis Line </div>\r\n                                    </td>\r\n                                    <td style={{ \"width\": \"50%\" }}>\r\n                                        <div>\r\n                                            <CheckBoxComponent change={this.axislineChange.bind(this)} ref={d => this.axislineElement = d} id='axis1' disabled={false}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div id='axisval'>Axis Value <span>&nbsp;&nbsp;&nbsp;0</span> </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div className=\"content-wrapper\">\r\n                                            <style> {slidercss} </style>\r\n                                            <SliderComponent change={this.axisChange.bind(this)} ref={(slider) => this.axisElement = slider} type='MinRange' step={1} id=\"axis\" value={0} min={0} max={10} style={{ width: '100px' }} disabled={false}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </PropertyPane>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<Customization />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}