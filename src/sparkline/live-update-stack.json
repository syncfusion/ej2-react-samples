{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Liveupdate sample for sparkline\r\n */\r\nimport * as React from \"react\";\r\nimport { SparklineComponent } from '@syncfusion/ej2-react-charts';\r\nimport { SampleBase } from './sample-base';\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }\r\n    .spark {\r\n        float: left;\r\n        width: 95%;\r\n        margin-left: 3%;\r\n    }\r\n    .index {\r\n        z-index: 1000;\r\n    }`;\r\nexport class LiveUpdate extends SampleBase {\r\n    updateSparkline1(args) {\r\n        setTimeout(() => {\r\n            if (this.sparkInstance == null)\r\n                this.sparkInstance = args.sparkline;\r\n            if (this.temp1 == null)\r\n                this.temp1 = this.sparkInstance.dataSource.length - 1;\r\n            if (this.timer1 != null)\r\n                clearInterval(this.timer1);\r\n            this.timer1 = setInterval(this.update(), 500);\r\n        }, 500);\r\n    }\r\n    updateSparkline2(args) {\r\n        setTimeout(() => {\r\n            if (this.sparkInstance1 == null)\r\n                this.sparkInstance1 = args.sparkline;\r\n            if (this.temp3 == null)\r\n                this.temp3 = this.sparkInstance1.dataSource.length - 1;\r\n            if (this.timer2 != null)\r\n                clearInterval(this.timer2);\r\n            this.timer2 = setInterval(this.update2(), 500);\r\n        }, 500);\r\n    }\r\n    updateSparkline3(args) {\r\n        setTimeout(() => {\r\n            if (this.sparkInstance2 == null)\r\n                this.sparkInstance2 = args.sparkline;\r\n            if (this.temp2 == null)\r\n                this.temp2 = this.sparkInstance2.dataSource.length - 1;\r\n            if (this.timer3 != null)\r\n                clearInterval(this.timer3);\r\n            this.timer3 = setInterval(this.update1(), 500);\r\n        }, 500);\r\n    }\r\n    updateSparkline4(args) {\r\n        setTimeout(() => {\r\n            if (this.sparkInstance3 == null)\r\n                this.sparkInstance3 = args.sparkline;\r\n            if (this.temp4 == null)\r\n                this.temp4 = this.sparkInstance3.dataSource.length - 1;\r\n            if (this.timer4 != null)\r\n                clearInterval(this.timer4);\r\n            this.timer4 = setInterval(this.update4(), 500);\r\n        }, 500);\r\n    }\r\n    update() {\r\n        if (this.sparkInstance.element.className.indexOf('e-sparkline') > -1) {\r\n            let value = ((Math.random() * 100) + 5) % 50;\r\n            this.sparkInstance.dataSource.push({ x: ++this.temp1, yval: value });\r\n            this.sparkInstance.dataSource.shift();\r\n            this.sparkInstance.refresh();\r\n            let cpu = document.getElementById('cpu');\r\n            cpu.innerHTML = ((value / 150) * 100).toFixed(0) + '% ' + ((value * 3) / 100).toFixed(2) + 'GHz';\r\n        }\r\n    }\r\n    update2() {\r\n        if (this.sparkInstance1.element.className.indexOf('e-sparkline') > -1) {\r\n            let value = ((Math.random() * 100) + 5) % 80;\r\n            this.sparkInstance1.dataSource.push({ x: ++this.temp3, yval: value });\r\n            this.sparkInstance1.dataSource.shift();\r\n            this.sparkInstance1.refresh();\r\n            let disk = document.getElementById('disk');\r\n            disk.innerHTML = value.toFixed(0) + '%';\r\n        }\r\n    }\r\n    update1() {\r\n        if (this.sparkInstance2.element.className.indexOf('e-sparkline') > -1) {\r\n            let value = Math.random();\r\n            if (value > 0.6) {\r\n                value = 6 + (value / 10);\r\n            }\r\n            else {\r\n                value = 6 - (value / 10);\r\n            }\r\n            this.sparkInstance2.dataSource.push({ x: ++this.temp2, yval: value });\r\n            this.sparkInstance2.dataSource.shift();\r\n            this.sparkInstance2.refresh();\r\n            let memory = document.getElementById('memory');\r\n            let gb = parseFloat(value.toString().replace('0', '')).toFixed(1);\r\n            memory.innerHTML = gb + '/15.8 GB (' + ((value / 15.8) * 100).toFixed(0) + '%)';\r\n        }\r\n    }\r\n    update4() {\r\n        if (this.sparkInstance3.element.className.indexOf('e-sparkline') > -1) {\r\n            let value = ((Math.random() * 100) + 5) % 80;\r\n            this.sparkInstance3.dataSource.push({ x: ++this.temp3, yval: value });\r\n            this.sparkInstance3.dataSource.shift();\r\n            this.sparkInstance3.refresh();\r\n            let net = document.getElementById('net');\r\n            net.innerHTML = 'R: ' + value.toFixed(0) + 'Kbps';\r\n        }\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section' style={{ \"align\": \"center\" }}>\r\n                    <div id='spark-container' className=\"row\">\r\n                        <div className=\"cols-sample-area\" style={{ \"align\": \"center\", \"margin-top\": \"8%\" }}>\r\n                            <div style={{ \"align\": \"center\" }} className=\"col-lg-3 col-m-3 col-sm-6\">\r\n                                <div style={{ \"align\": \"center\" }} className=\"spark\" id=\"spark-container1\">\r\n                                    <div className=\"index\" style={{ \"color\": \"#000000\", \"font-size\": \"12px\", \"position\": \"absolute\", \"margin-top\": \"10px\", \"margin-left\": \"8%\" }}>\r\n                                        <b>CPU</b>\r\n                                    </div>\r\n                                    <div id=\"cpu\" className=\"index\" style={{ \"color\": \"#0877d6\", \"position\": \"absolute\", \"margin-top\": \"25px\", \"margin-left\": \"8%\" }}>26% 1.2GHz</div>\r\n                                    <SparklineComponent loaded={this.updateSparkline1.bind(this)} load={this.load.bind(this)} ref={m => this.sparkInstance = m} id='spark1-container' height='130px' width='90%' lineWidth={1} type='Area' valueType='Numeric' fill='#e8f2fc' axisSettings={{\r\n            minY: 0,\r\n            maxY: 150\r\n        }} containerArea={{\r\n            background: 'white',\r\n            border: {\r\n                color: '#dcdfe0',\r\n                width: 2\r\n            }\r\n        }} border={{\r\n            color: '#0358a0',\r\n            width: 1\r\n        }} dataSource={[\r\n            { x: 0, yval: 50 },\r\n            { x: 1, yval: 30 },\r\n            { x: 2, yval: 20 },\r\n            { x: 3, yval: 30 },\r\n            { x: 4, yval: 50 },\r\n            { x: 5, yval: 40 },\r\n            { x: 6, yval: 20 },\r\n            { x: 7, yval: 10 },\r\n            { x: 8, yval: 30 },\r\n            { x: 9, yval: 10 },\r\n            { x: 10, yval: 40 },\r\n            { x: 11, yval: 50 },\r\n            { x: 12, yval: 10 },\r\n            { x: 13, yval: 30 },\r\n            { x: 14, yval: 50 },\r\n            { x: 15, yval: 20 },\r\n            { x: 16, yval: 10 },\r\n            { x: 17, yval: 40 },\r\n            { x: 18, yval: 30 },\r\n            { x: 19, yval: 40 }\r\n        ]} xName='x' yName='yval'>\r\n                                    </SparklineComponent>\r\n                                </div>\r\n                            </div>\r\n                            <div style={{ \"align\": \"center\" }} className=\"col-lg-3 col-m-3 col-sm-6\">\r\n                                <div style={{ \"align\": \"center\" }} className=\"spark\" id=\"spark-container2\">\r\n                                    <div className='index' style={{ \"color\": \"#000000\", \"font-size\": \"12px\", \"position\": \"absolute\", \"margin-top\": \"10px\", \"margin-left\": \"8%\" }}>\r\n                                        <b>Disk</b>\r\n                                    </div>\r\n                                    <div id=\"disk\" className=\"index\" style={{ \"color\": \"#b247c6\", \"position\": \"absolute\", \"margin-top\": \"25px\", \"margin-left\": \"8%\" }}>50%</div>\r\n                                    <SparklineComponent loaded={this.updateSparkline2.bind(this)} load={this.load.bind(this)} ref={m => this.sparkInstance2 = m} id='spark2-container' height='130px' width='90%' lineWidth={1} type='Area' valueType='Numeric' fill='#f5e8fc' axisSettings={{\r\n            minY: 4,\r\n            maxY: 8\r\n        }} containerArea={{\r\n            background: 'white',\r\n            border: {\r\n                color: '#dcdfe0',\r\n                width: 2\r\n            }\r\n        }} border={{\r\n            color: '#b247c6',\r\n            width: 1\r\n        }} dataSource={[\r\n            { x: 0, yval: 6.05 },\r\n            { x: 1, yval: 6.03 },\r\n            { x: 2, yval: 6.02 },\r\n            { x: 3, yval: 6.07 },\r\n            { x: 4, yval: 6.05 },\r\n            { x: 5, yval: 6.09 },\r\n            { x: 6, yval: 6.08 },\r\n            { x: 7, yval: 6.01 },\r\n            { x: 8, yval: 6.03 },\r\n            { x: 9, yval: 6.01 },\r\n            { x: 10, yval: 6.07 },\r\n            { x: 11, yval: 6.05 },\r\n            { x: 12, yval: 6.01 },\r\n            { x: 13, yval: 6.06 },\r\n            { x: 14, yval: 6.05 },\r\n            { x: 15, yval: 6.03 },\r\n            { x: 16, yval: 6.01 },\r\n            { x: 17, yval: 6.09 },\r\n            { x: 18, yval: 6.06 },\r\n            { x: 19, yval: 6.05 }\r\n        ]} xName='x' yName='yval'>\r\n                                    </SparklineComponent>\r\n                                </div>\r\n                            </div>\r\n                            <div style={{ \"align\": \"center\" }} className=\"col-lg-3 col-m-3 col-sm-6\">\r\n                                <div style={{ \"align\": \"center\" }} className=\"spark\" id=\"spark-container3\">\r\n                                    <div className=\"index\" style={{ \"color\": \"#000000\", \"font-size\": \"12px\", \"position\": \"absolute\", \"margin-top\": \"10px\", \"margin-left\": \"8%\" }}>\r\n                                        <b>Memory</b>\r\n                                    </div>\r\n                                    <div id=\"memory\" className=\"index\" style={{ \"color\": \"#5bcc8f\", \"position\": \"absolute\", \"margin-top\": \"25px\", \"margin-left\": \"8%\" }}>6.5/15.8 GB (41%)</div>\r\n                                    <SparklineComponent loaded={this.updateSparkline3.bind(this)} load={this.load.bind(this)} ref={m => this.sparkInstance1 = m} id='spark3-container' height='130px' width='90%' lineWidth={1} type='Area' valueType='Numeric' fill='#e0f9d1' axisSettings={{\r\n            minY: 0,\r\n            maxY: 130\r\n        }} containerArea={{\r\n            background: 'white',\r\n            border: {\r\n                color: '#dcdfe0',\r\n                width: 2\r\n            }\r\n        }} border={{\r\n            color: '#27ad66',\r\n            width: 1\r\n        }} dataSource={[\r\n            { x: 0, yval: 50 },\r\n            { x: 1, yval: 30 },\r\n            { x: 2, yval: 20 },\r\n            { x: 3, yval: 70 },\r\n            { x: 4, yval: 50 },\r\n            { x: 5, yval: 20 },\r\n            { x: 6, yval: 80 },\r\n            { x: 7, yval: 10 },\r\n            { x: 8, yval: 30 },\r\n            { x: 9, yval: 10 },\r\n            { x: 10, yval: 70 },\r\n            { x: 11, yval: 50 },\r\n            { x: 12, yval: 10 },\r\n            { x: 13, yval: 60 },\r\n            { x: 14, yval: 50 },\r\n            { x: 15, yval: 30 },\r\n            { x: 16, yval: 10 },\r\n            { x: 17, yval: 20 },\r\n            { x: 18, yval: 60 },\r\n            { x: 19, yval: 50 }\r\n        ]} xName='x' yName='yval'>\r\n                                    </SparklineComponent>\r\n                                </div>\r\n                            </div>\r\n                            <div style={{ \"align\": \"center\" }} className=\"col-lg-3 col-m-3 col-sm-6\">\r\n                                <div style={{ \"align\": \"center\" }} className=\"spark\" id=\"spark-container4\">\r\n                                    <div className=\"index\" style={{ \"color\": \"#000000\", \"font-size\": \"12px\", \"position\": \"absolute\", \"margin-top\": \"10px\", \"margin-left\": \"8%\" }}>\r\n                                        <b>Ethernet</b>\r\n                                    </div>\r\n                                    <div id=\"net\" className=\"index\" style={{ \"color\": \"#d1a990\", \"position\": \"absolute\", \"margin-top\": \"25px\", \"margin-left\": \"8%\" }}>6.5/15.8 GB (41%)</div>\r\n                                    <SparklineComponent loaded={this.updateSparkline4.bind(this)} load={this.load.bind(this)} ref={m => this.sparkInstance3 = m} id='spark4-container' height='130px' width='90%' lineWidth={1} type='Area' valueType='Numeric' fill='#F2D8C7' axisSettings={{\r\n            minY: 0,\r\n            maxY: 120\r\n        }} containerArea={{\r\n            background: 'white',\r\n            border: {\r\n                color: '#dcdfe0',\r\n                width: 2\r\n            }\r\n        }} border={{\r\n            color: '#AA907A',\r\n            width: 1\r\n        }} dataSource={[\r\n            { x: 0, yval: 50 },\r\n            { x: 1, yval: 30 },\r\n            { x: 2, yval: 20 },\r\n            { x: 3, yval: 70 },\r\n            { x: 4, yval: 50 },\r\n            { x: 5, yval: 20 },\r\n            { x: 6, yval: 80 },\r\n            { x: 7, yval: 10 },\r\n            { x: 8, yval: 30 },\r\n            { x: 9, yval: 10 },\r\n            { x: 10, yval: 70 },\r\n            { x: 11, yval: 50 },\r\n            { x: 12, yval: 10 },\r\n            { x: 13, yval: 60 },\r\n            { x: 14, yval: 50 },\r\n            { x: 15, yval: 30 },\r\n            { x: 16, yval: 10 },\r\n            { x: 17, yval: 20 },\r\n            { x: 18, yval: 60 },\r\n            { x: 19, yval: 50 }\r\n        ]} xName='x' yName='yval'>\r\n                                    </SparklineComponent>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<LiveUpdate />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}