{"index.css":".inplace-editor-control-section.form-layout #confirmation {\r\n    max-width: 500px;\r\n    margin: auto;\r\n}\r\n\r\n.inplace-editor-control-section.form-layout #formId {\r\n    padding-top: 20px;\r\n    margin-bottom: 45px;\r\n    border: 1px solid #ccc;\r\n    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.36);\r\n    border-radius: 5px;\r\n}\r\n\r\n.inplace-editor-control-section.form-layout .form-horizontal .form-group {\r\n    margin: 0 20px;\r\n}\r\n\r\n.inplace-editor-control-section.form-layout .form-horizontal .form-group:last-child {\r\n    padding-bottom: 40px;\r\n}\r\n\r\n.inplace-editor-control-section.form-layout .form-title {\r\n    width: 100%;\r\n    text-align: center;\r\n    padding: 10px;\r\n    font-size: 16px;\r\n    font-weight: 500;\r\n    color: rgba(0, 0, 0, 0.70);\r\n}\r\n\r\n.inplace-editor-control-section.form-layout .submit {\r\n    margin: auto;\r\n    width: 50%;\r\n    text-align: center;\r\n}\r\n\r\n.inplace-editor-control-section.form-layout .form-horizontal .control-label {\r\n    padding: 15px 15px 15px 0;\r\n    font-weight: 600;\r\n    font-size: 14px;\r\n}\r\n\r\n.inplace-editor-control-section.form-layout .form-horizontal .form-group > * {\r\n    width: 100%;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n    .inplace-editor-control-section.form-layout .form-horizontal .control-label {\r\n        padding-top: 7px;\r\n        margin-bottom: 0;\r\n    }\r\n}\r\n\r\n#editorProperty table td {\r\n    width: 50%;\r\n}\r\n\r\n#editorProperty .property-panel-table div {\r\n    padding-left: 10px;\r\n    padding-top: 10px;\r\n}\r\n\r\n.inplace-editor-control-section.form-layout .e-inplaceeditor .e-editable-component .e-clear-icon-hide,\r\n.e-inplaceeditor-tip .e-editable-component .e-input-group .e-clear-icon.e-clear-icon-hide {\r\n    display: block;\r\n    visibility: hidden;\r\n}","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { Inject, InPlaceEditorComponent, MultiSelect, Rte } from '@syncfusion/ej2-react-inplace-editor';\r\nimport * as React from 'react';\r\nimport { PropertyPane } from './property-pane';\r\nimport { SampleBase } from './sample-base';\r\n\r\n// tslint:disable:max-line-length\r\nexport class UseCase extends SampleBase {\r\n    constructor(props) {\r\n        super(props);\r\n        this.popupSettings = { model: { width: 300 } };\r\n        this.multiValue = ['TypeScript', 'JavaScript'];\r\n        // define the array of string\r\n        this.multiData = ['Android', 'JavaScript', 'jQuery', 'TypeScript', 'Angular', 'React', 'Vue', 'Ionic'];\r\n        this.textValidationRules = { Title: { required: [true, 'Enter valid title'] } };\r\n        this.textModel = { placeholder: 'Enter your question title' };\r\n        this.rteValidationRules = { rte: { required: [true, 'Enter valid comments'] } };\r\n        this.rteModel = {\r\n            toolbarSettings: {\r\n                enableFloating: false,\r\n                items: ['Bold', 'Italic', 'Underline', 'FontColor', 'BackgroundColor',\r\n                    'LowerCase', 'UpperCase', '|', 'OrderedList', 'UnorderedList']\r\n            }\r\n        };\r\n        this.selectValidationRules = { Tag: { required: [true, 'Enter valid tags'] } };\r\n        this.selectModel = { dataSource: this.multiData, placeholder: 'Enter your tags', mode: 'Box', };\r\n        // Mapping DropDownList dataSource property\r\n        this.editorData = [\r\n            { 'value': 'inline', 'text': 'Inline' }, { 'value': 'popup', 'text': 'Popup' }\r\n        ];\r\n        // Mapping DropDownList fields property\r\n        this.dropDownFields = { text: 'text', value: 'value' };\r\n        // Mapping DropDownList value property\r\n        this.dropDownVal = 'inline';\r\n        this.scrollRightPane = () => {\r\n            let mode = document.getElementById('editorMode').value;\r\n            if (mode === 'Inline') {\r\n                return;\r\n            }\r\n            if (this.titleObj && this.titleObj.element.querySelectorAll('.e-editable-open')) {\r\n                this.titleObj.enableEditMode = false;\r\n            }\r\n            if (this.tagObj && this.tagObj.element.querySelectorAll('.e-editable-open')) {\r\n                this.tagObj.enableEditMode = false;\r\n            }\r\n            if (this.rteObj && this.rteObj.element.querySelectorAll('.e-editable-open')) {\r\n                this.rteObj.enableEditMode = false;\r\n            }\r\n        };\r\n        this.inplaceEditorControlEle = null;\r\n        this.inplaceEditorControlRef = element => {\r\n            this.inplaceEditorControlEle = element;\r\n        };\r\n    }\r\n    // Change event funtion for DropDownList component   \r\n    changeEditorMode(e) {\r\n        let mode = this.editorMode.value;\r\n        this.titleObj.mode = mode;\r\n        this.tagObj.mode = mode;\r\n        this.rteObj.mode = mode;\r\n        this.titleObj.dataBind();\r\n        this.tagObj.dataBind();\r\n        this.rteObj.dataBind();\r\n    }\r\n    selectionActionSuccess(e) {\r\n        e.value = this.chipCreation(e.value.split(','));\r\n    }\r\n    create() {\r\n        this.rteObj.popupSettings.model.width = this.inplaceEditorControlEle.offsetWidth;\r\n        this.chipOnCreate();\r\n    }\r\n    chipOnCreate() {\r\n        this.tagObj.element.querySelector('.e-editable-value').innerHTML = this.chipCreation(this.tagObj.value);\r\n    }\r\n    chipCreation(data) {\r\n        let value = '<div class=\"e-chip-list\">';\r\n        [].slice.call(data).forEach((val) => {\r\n            value += '<div class=\"e-chip\"> <span class=\"e-chip-text\"> ' + val + '</span></div>';\r\n        });\r\n        value += '</div>';\r\n        return value;\r\n    }\r\n    rendereComplete() {\r\n        let rightPane = document.getElementById('right-pane');\r\n        if (rightPane) {\r\n            rightPane.addEventListener('scroll', () => {\r\n                this.scrollRightPane();\r\n            });\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        let rightPane = document.getElementById('right-pane');\r\n        if (rightPane) {\r\n            rightPane.removeEventListener('scroll', () => {\r\n                this.scrollRightPane();\r\n            });\r\n        }\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className=\"col-lg-8 control-section inplace-editor-control-section form-layout\" ref={this.inplaceEditorControlRef} id='inplace-editor-control'>\r\n                    <div className=\"content-wrapper\" style={{ marginBottom: \"25px\" }}>\r\n                        <div id=\"confirmation\">\r\n                            <div id=\"submitDialog\"></div>\r\n                            <form id=\"formId\" className=\"form-horizontal\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"col-sm-6 control-label\" style={{ textAlign: \"left\", fontSize: \"14px\", fontWeight: 400 }}>\r\n                                        Title</label>\r\n                                    <InPlaceEditorComponent ref={(title) => { this.titleObj = title; }} id='inplace_title_editor' data-underline='false' mode='Inline' emptyText='Enter your question title' name='Title' value='Succinctly E-Book about TypeScript' validationRules={this.textValidationRules} model={this.textModel}>\r\n                                    </InPlaceEditorComponent>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"col-sm-6 control-label\" style={{ textAlign: \"left\", fontSize: \"14px\", fontWeight: 400 }}>\r\n                                        Comments</label>\r\n                                    <InPlaceEditorComponent ref={(rte) => { this.rteObj = rte; }} id='inplace_comment_editor' data-underline='false' mode='Inline' type='RTE' editableOn='EditIconClick' submitOnEnter={false} value='The extensive adoption of JavaScript for application development, and the ability to use HTML and JavaScript to create Windows Store apps, has made JavaScript a vital part of the Windows development ecosystem. Microsoft has done extensive work to make JavaScript easier to use.' emptyText='Enter your comment' name='rte' validationRules={this.rteValidationRules} model={this.rteModel} popupSettings={this.popupSettings}>\r\n                                        <Inject services={[Rte]}/>\r\n                                    </InPlaceEditorComponent>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"col-sm-6 control-label\" style={{ textAlign: \"left\", fontSize: \"14px\", fontWeight: 400 }}>\r\n                                        Tags</label>\r\n                                    <InPlaceEditorComponent ref={(tag) => { this.tagObj = tag; }} id='inplace_tag_editor' data-underline='false' mode='Inline' type='MultiSelect' created={this.create.bind(this)} value={this.multiValue} emptyText='Enter your tags' name='Tag' actionSuccess={this.selectionActionSuccess.bind(this)} validationRules={this.selectValidationRules} model={this.selectModel}>\r\n                                        <Inject services={[MultiSelect]}/>\r\n                                    </InPlaceEditorComponent>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='col-lg-4 property-section' id=\"editorProperty\">\r\n                    <PropertyPane title='Properties'>\r\n                        <table id=\"property\" title=\"Properties\" className=\"property-panel-table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div>Mode</div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            \r\n                                            <DropDownListComponent ref={(drop) => { this.editorMode = drop; }} id='editorMode' className='form-control' dataSource={this.editorData} fields={this.dropDownFields} value={this.dropDownVal} width={'90%'} change={this.changeEditorMode.bind(this)}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </PropertyPane>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<UseCase />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}