{"index.css":".inplace-control-section.drop-down-layout .control_wrapper  label {\r\n    padding: 15px;\r\n    text-align: left;\r\n    font-weight: 400;\r\n    font-size: 14px;\r\n    margin-bottom: 0px;\r\n}\r\n\r\n.inplace-control-section.drop-down-layout .control_wrapper {\r\n    margin: auto;\r\n    max-width: 400px;\r\n}\r\n\r\n.inplace-control-section.drop-down-layout .control_wrapper table {\r\n    margin: auto;\r\n}\r\n\r\n.inplace-control-section.drop-down-layout .control_wrapper table td {\r\n    width: 200px;\r\n    height: 100px;\r\n}\r\n\r\n#dropdownProperty table td {\r\n    width: 50%;\r\n}\r\n\r\n#dropdownProperty .property-panel-table div {\r\n    padding-left: 10px;\r\n    padding-top: 10px;\r\n}\r\n\r\n.inplace-control-section.drop-down-layout .e-inplaceeditor .e-editable-component .e-clear-icon-hide,\r\n.e-inplaceeditor-tip .e-editable-component  .e-input-group .e-clear-icon.e-clear-icon-hide {\r\n    display: block;\r\n    visibility: hidden;\r\n}","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { PropertyPane } from './property-pane';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { InPlaceEditorComponent, Inject, AutoComplete, MultiSelect, ComboBox } from '@syncfusion/ej2-react-inplace-editor';\r\nimport { SampleBase } from './sample-base';\r\n\r\n// tslint:disable:max-line-length\r\nexport class DropDowns extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.popupSettings = { model: { width: 'auto' } };\r\n        this.multiValue = ['Canada', 'Bermuda'];\r\n        // define the array of string\r\n        this.dropDownData = ['Australia', 'Bermuda', 'Canada', 'Cameroon', 'Denmark', 'Finland', 'Greenland', 'Poland'];\r\n        this.dropDownModel = { dataSource: this.dropDownData, placeholder: 'Find a country' };\r\n        this.autoCompleteModel = { dataSource: this.dropDownData, placeholder: ' Type to search country' };\r\n        this.comboBoxModel = { dataSource: this.dropDownData, placeholder: 'Find a country' };\r\n        this.multiSelectModel = { dataSource: this.dropDownData, placeholder: 'Choose the countries', mode: 'Box', width: 150 };\r\n        // Mapping DropDownList dataSource property\r\n        this.editorData = [\r\n            { 'value': 'inline', 'text': 'Inline' }, { 'value': 'popup', 'text': 'Popup' }\r\n        ];\r\n        // Mapping DropDownList fields property\r\n        this.dropDownFields = { text: 'text', value: 'value' };\r\n        // Mapping DropDownList value property\r\n        this.dropDownVal = 'inline';\r\n        this.scrollRightPane = () => {\r\n            let mode = document.getElementById('editorMode').value;\r\n            if (mode === 'Inline') {\r\n                return;\r\n            }\r\n            if (this.editObj && (this.editObj.element.querySelectorAll('.e-editable-open').length > 0)) {\r\n                this.editObj.enableEditMode = false;\r\n            }\r\n            if (this.multiObj && (this.multiObj.element.querySelectorAll('.e-editable-open').length > 0)) {\r\n                this.multiObj.enableEditMode = false;\r\n            }\r\n            if (this.dropObj && (this.dropObj.element.querySelectorAll('.e-editable-open').length > 0)) {\r\n                this.dropObj.enableEditMode = false;\r\n            }\r\n            if (this.comboObbj && (this.comboObbj.element.querySelectorAll('.e-editable-open').length > 0)) {\r\n                this.comboObbj.enableEditMode = false;\r\n            }\r\n        };\r\n    }\r\n    // Change event funtion for DropDownList component   \r\n    changeEditorMode(e) {\r\n        let mode = this.editorMode.value;\r\n        this.editObj.mode = mode;\r\n        this.multiObj.mode = mode;\r\n        this.comboObbj.mode = mode;\r\n        this.dropObj.mode = mode;\r\n        this.editObj.dataBind();\r\n        this.multiObj.dataBind();\r\n        this.comboObbj.dataBind();\r\n        this.dropObj.dataBind();\r\n    }\r\n    rendereComplete() {\r\n        let rightPane = document.getElementById('right-pane');\r\n        if (rightPane) {\r\n            rightPane.addEventListener('scroll', () => {\r\n                this.scrollRightPane();\r\n            });\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        let rightPane = document.getElementById('right-pane');\r\n        if (rightPane) {\r\n            rightPane.removeEventListener('scroll', () => {\r\n                this.scrollRightPane();\r\n            });\r\n        }\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className=\"col-lg-8 control-section inplace-control-section drop-down-layout\">\r\n                    <div className=\"control_wrapper\">\r\n                        <table>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <label className=\"control-label\">\r\n                                            DropDownList </label>\r\n                                    </td>\r\n                                    <td>\r\n                                        <InPlaceEditorComponent ref={(drop) => { this.dropObj = drop; }} id='dropdownEle' mode='Inline' type='DropDownList' value='Canada' model={this.dropDownModel}>\r\n                                        </InPlaceEditorComponent>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <label className=\"control-label\">\r\n                                            AutoComplete </label>\r\n                                    </td>\r\n                                    <td>\r\n                                        <InPlaceEditorComponent ref={(edit) => { this.editObj = edit; }} id='autoCompleteEle' mode='Inline' type='AutoComplete' value='Australia' model={this.autoCompleteModel}>\r\n                                            <Inject services={[AutoComplete]}/>\r\n                                        </InPlaceEditorComponent>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <label className=\"control-label\">\r\n                                            ComboBox </label>\r\n                                    </td>\r\n                                    <td>\r\n                                        <InPlaceEditorComponent ref={(combo) => { this.comboObbj = combo; }} id='comboBoxEle' mode='Inline' type='ComboBox' value='Finland' model={this.comboBoxModel}>\r\n                                            <Inject services={[ComboBox]}/>\r\n                                        </InPlaceEditorComponent>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <label className=\"control-label\">\r\n                                            MultiSelect </label>\r\n                                    </td>\r\n                                    <td>\r\n                                        <InPlaceEditorComponent ref={(multi) => { this.multiObj = multi; }} id='multiSelectEle' mode='Inline' type='MultiSelect' value={this.multiValue} model={this.multiSelectModel} popupSettings={this.popupSettings}>\r\n                                            <Inject services={[MultiSelect]}/>\r\n                                        </InPlaceEditorComponent>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                <div className='col-lg-4 property-section' id=\"dropdownProperty\">\r\n                    <PropertyPane title='Properties'>\r\n                        <table id=\"property\" title=\"Properties\" className=\"property-panel-table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div>Mode</div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            \r\n                                            <DropDownListComponent ref={(drop) => { this.editorMode = drop; }} id='editorMode' className='form-control' dataSource={this.editorData} fields={this.dropDownFields} value={this.dropDownVal} width={'90%'} change={this.changeEditorMode.bind(this)}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </PropertyPane>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<DropDowns />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}