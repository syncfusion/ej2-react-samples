{"index.css":".inplace-control-section.default_layout .control_wrapper {\r\n    width: 100%;\r\n    max-width: 400px;\r\n    margin: auto;\r\n}\r\n\r\n.inplace-control-section.default_layout .control-wrapper {\r\n    width: 100%;\r\n}\r\n\r\n.inplace-control-section.default_layout .control_wrapper .control-center {\r\n    text-align: center;\r\n}\r\n\r\n.inplace-control-section.default_layout .e-inplaceeditor {\r\n    height: auto;\r\n}\r\n\r\n.inplace-control-section.default_layout .control_wrapper table td {\r\n    width: 200px;\r\n    height: 100px;\r\n}\r\n\r\n.inplace-control-section.default_layout .control_wrapper table td .control-label {\r\n    margin-bottom: 0px;\r\n}\r\n\r\n#defaultProperty table td {\r\n    width: 50%;\r\n}\r\n\r\n@media (max-width: 1200px) {\r\n    .inplace-control-section.default_layout  {\r\n        width: 100%;\r\n    }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n    .inplace-control-section.default_layout .control_wrapper table tr td:nth-child(1) {\r\n        width: 130px;\r\n    }\r\n\r\n    .inplace-control-section.default_layout .control_wrapper table tr td:nth-child(2) {\r\n        width: 200px;\r\n    }\r\n}\r\n\r\n#defaultProperty .property-panel-table div {\r\n    padding-left: 10px;\r\n    padding-top: 10px;\r\n}\r\n\r\n.inplace-control-section.default_layout .e-inplaceeditor .e-editable-component .e-clear-icon-hide,\r\n.e-inplaceeditor-tip .e-editable-component .e-input-group .e-clear-icon.e-clear-icon-hide {\r\n    display: block;\r\n    visibility: hidden;\r\n}","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { PropertyPane } from './property-pane';\r\nimport { InPlaceEditorComponent } from '@syncfusion/ej2-react-inplace-editor';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { CheckBoxComponent } from '@syncfusion/ej2-react-buttons';\r\nimport { SampleBase } from './sample-base';\r\n\r\n// tslint:disable:max-line-length\r\nexport class Default extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.textModel = { placeholder: 'Enter employee name' };\r\n        this.popupSettings = { title: 'Enter Employee Name' };\r\n        this.numericModel = { format: 'c2', value: 100, placeholder: 'Currency format' };\r\n        this.maskModel = { mask: '000-000-0000' };\r\n        // Mapping DropDownList dataSource property\r\n        this.dropDownData = [\r\n            { 'value': 'Inline', 'text': 'Inline' }, { 'value': 'popup', 'text': 'Popup' }\r\n        ];\r\n        // Mapping DropDownList fields property\r\n        this.dropDownFields = { text: 'text', value: 'value' };\r\n        // Mapping DropDownList value property\r\n        this.dropDownVal = 'Inline';\r\n        // Mapping DropDownList dataSource property\r\n        this.editableData = [\r\n            { 'value': 'Click', 'text': 'Click' }, { 'value': 'DblClick', 'text': 'Double Click' }, { 'value': 'EditIconClick', 'text': 'Edit Icon Click' }\r\n        ];\r\n        // Mapping DropDownList fields property\r\n        this.editableFields = { text: 'text', value: 'value' };\r\n        // Mapping DropDownList value property\r\n        this.editableVal = 'Click';\r\n        this.scrollRightPane = () => {\r\n            let mode = document.getElementById('editorMode').value;\r\n            if (mode === 'Inline') {\r\n                return;\r\n            }\r\n            if (this.textObj && (this.textObj.element.querySelectorAll('.e-editable-open').length > 0)) {\r\n                this.textObj.enableEditMode = false;\r\n            }\r\n            if (this.numericObj && (this.numericObj.element.querySelectorAll('.e-editable-open').length > 0)) {\r\n                this.numericObj.enableEditMode = false;\r\n            }\r\n            if (this.maskObj && (this.maskObj.element.querySelectorAll('.e-editable-open').length > 0)) {\r\n                this.maskObj.enableEditMode = false;\r\n            }\r\n        };\r\n    }\r\n    // Change event funtion for DropDownList component   \r\n    changeEditorMode(e) {\r\n        let mode = this.editorMode.value;\r\n        this.textObj.mode = this.numericObj.mode = this.maskObj.mode = mode;\r\n        this.textObj.dataBind();\r\n        this.numericObj.dataBind();\r\n        this.maskObj.dataBind();\r\n    }\r\n    rendereComplete() {\r\n        let rightPane = document.getElementById('right-pane');\r\n        if (rightPane) {\r\n            rightPane.addEventListener('scroll', () => {\r\n                this.scrollRightPane();\r\n            });\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        let rightPane = document.getElementById('right-pane');\r\n        if (rightPane) {\r\n            rightPane.removeEventListener('scroll', () => {\r\n                this.scrollRightPane();\r\n            });\r\n        }\r\n    }\r\n    // Change event funtion for DropDownList component   \r\n    onEditableOn(e) {\r\n        let editableValue = this.editableon.value;\r\n        this.textObj.editableOn = this.numericObj.editableOn = this.maskObj.editableOn = editableValue;\r\n        this.textObj.dataBind();\r\n        this.numericObj.dataBind();\r\n        this.maskObj.dataBind();\r\n    }\r\n    // Change event funtion for CheckBox component\r\n    onChange(e) {\r\n        e.checked ? this.textObj.showButtons = this.numericObj.showButtons = this.maskObj.showButtons = true : this.textObj.showButtons = this.numericObj.showButtons = this.maskObj.showButtons = false;\r\n    }\r\n    // Change event funtion for CheckBox component\r\n    onChangeEnable(e) {\r\n        e.checked ? this.textObj.disabled = this.numericObj.disabled = this.maskObj.disabled = true : this.textObj.disabled = this.numericObj.disabled = this.maskObj.disabled = false;\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className=\"col-lg-8 control-section inplace-control-section default_layout\">\r\n                    <div className=\"control_wrapper\">\r\n                        <table>\r\n                            <tr>\r\n                                <td>\r\n                                    <label className=\"control-label\" style={{ textAlign: 'left', fontSize: '14px', fontWeight: 400 }}>\r\n                                        TextBox </label>\r\n                                </td>\r\n                                <td>\r\n                                    <InPlaceEditorComponent ref={(text) => { this.textObj = text; }} id='textboxEle' mode='Inline' type='Text' value='Andrew' model={this.textModel} popupSettings={this.popupSettings}>\r\n                                    </InPlaceEditorComponent>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <label className=\"control-label\" style={{ textAlign: 'left', fontSize: '14px', fontWeight: 400 }}>\r\n                                        NumericTextBox </label>\r\n                                </td>\r\n                                <td>\r\n                                    <InPlaceEditorComponent ref={(numeric) => { this.numericObj = numeric; }} id='numericTextBoxEle' mode='Inline' type='Numeric' value='$100.00' model={this.numericModel}>\r\n                                    </InPlaceEditorComponent>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <label className=\"control-label\" style={{ textAlign: 'left', fontSize: '14px', fontWeight: 400 }}>\r\n                                        MaskedTextBox </label>\r\n                                </td>\r\n                                <td>\r\n                                    <InPlaceEditorComponent ref={(mask) => { this.maskObj = mask; }} id='maskedTextBoxEle' mode='Inline' type='Mask' value='012-345-6789' model={this.maskModel}>\r\n                                    </InPlaceEditorComponent>\r\n                                </td>\r\n                            </tr>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                <div className='col-lg-4 property-section' id=\"defaultProperty\">\r\n                    <PropertyPane title='Properties'>\r\n                        <table id=\"property\" title=\"Properties\" className=\"property-panel-table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div>Mode</div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            \r\n                                            <DropDownListComponent ref={(edit) => { this.editorMode = edit; }} id='editorMode' className='form-control' dataSource={this.dropDownData} fields={this.dropDownFields} value={this.dropDownVal} width={'90%'} change={this.changeEditorMode.bind(this)}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div>Editable On</div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            \r\n                                            <DropDownListComponent ref={(edit) => { this.editableon = edit; }} id='editableon' className='form-control' dataSource={this.editableData} fields={this.editableFields} value={this.editableVal} width={'90%'} change={this.onEditableOn.bind(this)}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div>Show Buttons</div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            \r\n                                            <CheckBoxComponent id='showbuttons' checked={true} labelPosition='Before' change={this.onChange.bind(this)}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div>Disable</div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            \r\n                                            <CheckBoxComponent id='editorEnable' checked={false} labelPosition='Before' change={this.onChangeEnable.bind(this)}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </PropertyPane>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<Default />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}