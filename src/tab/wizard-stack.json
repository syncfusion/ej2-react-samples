{"index.css":".tab-control-section  .e-content .e-item {\r\n    font-size: 12px;\r\n    padding: 10px;\r\n    text-align: justify;\r\n}\r\n.tab-control-section  .e-headertext {\r\n    font-weight: 500;\r\n}\r\n.e-bigger .tab-control-section .e-tab .e-list-item {\r\n    border-bottom: 1px solid gainsboro;\r\n}\r\n.tab-control-section  .e-tab .e-list-item {\r\n    height: 63px;\r\n    border-bottom: 1px solid gainsboro;\r\n}\r\n.tab-control-section  .e-tab .e-list-item:last-child {\r\n    border-bottom: 1px solid gainsboro;\r\n}\r\n.e-bigger .tab-control-section  .e-tab .e-list-item {\r\n    height: 63px;\r\n}\r\n.tab-control-section .template-container {\r\n    height: 100%;\r\n    padding-top: 7px;\r\n}\r\n.tab-control-section .left {\r\n    display: inline-block;\r\n    vertical-align: top;\r\n}\r\n.tab-control-section .empImg {\r\n    height: 48px;\r\n    width: 48px;\r\n}\r\n.tab-control-section .name, .role {\r\n    line-height: normal;\r\n}\r\n.tab-control-section .name {\r\n    font-weight: 500;\r\n}\r\n.tab-control-section .role {\r\n    color: grey;\r\n    font-weight: 100;\r\n}\r\n.tab-control-section .info-div {\r\n    padding: 7px 0 0 15px;\r\n}\r\n.tab-control-section .content-title {\r\n    height: 50px;\r\n    display: table;\r\n    margin: 0 auto;\r\n}\r\n.tab-control-section .cnt-text {\r\n    vertical-align: middle;\r\n    display: table-cell;\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n}\r\n.tab-control-section .e-tab .e-listview .e-text {\r\n    display: block;\r\n    text-align: center;\r\n}\r\n\r\n/* custom code start*/\r\n.tab-control-section .property-panel-content {\r\n    padding: 10px;\r\n}\r\n@media only screen and (min-width: 1824px) {\r\n    .tab-control-section .col-lg-8.adaptive {\r\n        width: 40%;\r\n    }\r\n    .e-bigger .tab-control-section .col-lg-8.adaptive {\r\n        width: 45%;\r\n    }\r\n}\r\n\r\n/* custom code end*/\r\n\r\n#amount {\r\n    text-align: right;\r\n    font-size: 15px;\r\n    padding: 15px 0px;\r\n}\r\n\r\n#passenger-table th {\r\n    text-align: center;\r\n    font-size: 14px;\r\n    font-weight: 400;\r\n    border: 1px solid gainsboro;\r\n}\r\n\r\n#passenger-table td,\r\n#passenger-table th {\r\n    padding: 10px;\r\n}\r\n\r\n#passenger-table td {\r\n    border: 1px solid gainsboro;\r\n}\r\n\r\n.name-header {\r\n    width: 200px;\r\n}\r\n\r\n.age-header {\r\n    width: 80px;\r\n}\r\n\r\n.gender-header {\r\n    width: 120px;\r\n}\r\n\r\n.type-header {\r\n    width: 150px;\r\n}\r\n\r\n.btn-container {\r\n    text-align: center;\r\n}\r\n\r\n.search-item {\r\n    padding-right: 50px;\r\n    padding-bottom: 20px;\r\n}\r\n\r\n.item-title {\r\n    font-weight: 500;\r\n    padding-top: 10px;\r\n}\r\n\r\n@media (max-width: 450px) {\r\n    .e-sample-resize-container {\r\n        height: 450px;\r\n    }\r\n    .responsive-align {\r\n        width: 75%;\r\n        margin: 0 auto;\r\n    }\r\n    .search-item {\r\n        padding: 0 0 20px 0;\r\n        width: 100%;\r\n    }\r\n}\r\n\r\n#err1,\r\n#err2,\r\n#err3 {\r\n    font-weight: bold;\r\n    color: red;\r\n    display: block;\r\n    margin-top: 15px;\r\n}\r\n\r\n.wizard-title {\r\n    font-size: 15px;\r\n}\r\n\r\n#PassengersList {\r\n    overflow: auto;\r\n}\r\n#passenger-table {\r\n    min-width: 500px;\r\n    width: 100%;\r\n}\r\n.tab-control-section .e-listview:not(.e-list-template) .e-list-item {\r\n    height: 63px;\r\n}","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { DialogComponent } from '@syncfusion/ej2-react-popups';\r\nimport { DatePickerComponent } from '@syncfusion/ej2-react-calendars';\r\nimport { NumericTextBoxComponent } from '@syncfusion/ej2-react-inputs';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { TabComponent, TabItemDirective, TabItemsDirective } from '@syncfusion/ej2-react-navigations';\r\nimport { GridComponent, ColumnsDirective, ColumnDirective } from '@syncfusion/ej2-react-grids';\r\nimport { SampleBase } from './sample-base';\r\n\r\n/**\r\n *  Tab Wizard sample\r\n */\r\n// tslint:disable:max-line-length\r\nexport class Wizard extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.today = new Date();\r\n        this.dlgTarget = document.querySelector('.sb-content-tab.e-tab .e-content.sb-sample-content-area');\r\n        this.dateMin = new Date(this.today.getTime());\r\n        this.dateMax = new Date(this.today.getTime() + 60 * 24 * 60 * 60 * 1000);\r\n        this.fields = { id: \"id\", text: \"text\", value: \"text\" };\r\n        this.autoCompleteFields = { text: 'name', value: 'name' };\r\n        this.dateValue = new Date();\r\n        this.result = [];\r\n        this.reserved = [];\r\n        this.headerText = [\r\n            { \"text\": \"New Booking\" },\r\n            { \"text\": \"Train List\" },\r\n            { \"text\": \"Add Passenger\" },\r\n            { \"text\": \"Make Payment\" }\r\n        ];\r\n        this.quotas = [\r\n            { id: \"1\", text: \"Business Class\" },\r\n            { id: \"2\", text: \"Economy Class\" },\r\n            { id: \"4\", text: \"Common Class\" }\r\n        ];\r\n        this.gender = [\r\n            { id: \"1\", text: \"Male\" },\r\n            { id: \"2\", text: \"Female\" }\r\n        ];\r\n        this.berths = [\r\n            { id: \"1\", text: \"Upper\" },\r\n            { id: \"2\", text: \"Lower\" },\r\n            { id: \"3\", text: \"Middle\" },\r\n            { id: \"4\", text: \"Window\" },\r\n            { id: \"5\", text: \"Aisle\" }\r\n        ];\r\n        this.cities = [\r\n            { name: 'Chicago', fare: 300 },\r\n            { name: 'San Francisco', fare: 125 },\r\n            { name: 'Los Angeles', fare: 175 },\r\n            { name: 'Seattle', fare: 250 },\r\n            { name: 'Florida', fare: 150 }\r\n        ];\r\n        this.dlgButtons = [{\r\n                buttonModel: { content: \"OK\", isPrimary: true },\r\n                click: (() => {\r\n                    this.alertDlg.hide();\r\n                    this.tab.enableTab(0, true);\r\n                    this.tab.enableTab(1, false);\r\n                    this.tab.enableTab(2, false);\r\n                    this.tab.enableTab(3, false);\r\n                    this.tab.select(0);\r\n                })\r\n            }];\r\n    }\r\n    dlgCreated() {\r\n        let proxy = this.alertDlg;\r\n        proxy.hide();\r\n    }\r\n    focusIn() {\r\n        const proxy = this.journeyDate;\r\n        proxy.show();\r\n    }\r\n    tabSelecting(e) {\r\n        if (e.isSwiped) {\r\n            e.cancel = true;\r\n        }\r\n    }\r\n    trainSelected(args) {\r\n        this.selectedTrain = args.data;\r\n    }\r\n    btnClicked(e) {\r\n        switch (e.target.id) {\r\n            case \"searchNext\":\r\n                /* Validate the Source, Destination, Date and Class chosen and proceed only if all the fields are selected */\r\n                if (this.startPoint.value != null && this.endPoint.value != null &&\r\n                    this.ticketType.value != null && this.journeyDate.value != null) {\r\n                    if (this.startPoint.value && this.startPoint.value === this.endPoint.value) {\r\n                        document.getElementById(\"err1\").innerText = \"* Arrival point can't be same as Departure\";\r\n                    }\r\n                    else {\r\n                        this.tab.enableTab(1, true);\r\n                        this.tab.enableTab(0, false);\r\n                        this.filterTrains(e);\r\n                        document.getElementById(\"err1\").innerText = \"\";\r\n                        document.getElementById(\"err2\").innerText = \"\";\r\n                    }\r\n                }\r\n                else {\r\n                    document.getElementById(\"err1\").innerText = \"* Please fill all the details before proceeding\";\r\n                }\r\n                break;\r\n            case \"bookTickets\":\r\n                /* Based on the selected station generate Grid content to display trains available */\r\n                if (this.availTrainGrid.getSelectedRecords() === undefined || this.availTrainGrid.getSelectedRecords().length === 0) {\r\n                    document.getElementById(\"err2\").innerText = \"* Select your convenient train\";\r\n                }\r\n                else {\r\n                    this.tab.enableTab(2, true);\r\n                    this.tab.enableTab(1, false);\r\n                    document.getElementById(\"err2\").innerText = \"\";\r\n                }\r\n                break;\r\n            case \"confirmTickets\":\r\n                /* Get the Passenger details and validate the fields must not be left empty */\r\n                let name = document.getElementById(\"pass_name1\");\r\n                let age = this.pass_age1.value;\r\n                let gender = this.pass_gender1.value;\r\n                if (name.value === \"\" || age === \"\" || gender === \"\") {\r\n                    document.getElementById(\"err3\").innerText = \"* Please enter passenger details\";\r\n                }\r\n                else {\r\n                    this.tab.enableTab(3, true);\r\n                    this.tab.enableTab(2, false);\r\n                    document.getElementById(\"err3\").innerText = \"\";\r\n                    this.finalizeDetails(e);\r\n                }\r\n                break;\r\n            case \"makePayment\":\r\n                this.alertDlg.show();\r\n                break;\r\n            case \"goToSearch\":\r\n                /* Go back to change class, date or boarding places */\r\n                this.selectedTrain = [];\r\n                this.tab.enableTab(0, true);\r\n                this.tab.select(0);\r\n                this.tab.enableTab(1, false);\r\n                break;\r\n            case \"goBackToBook\":\r\n                /* Change the preferred train chosen already */\r\n                this.tab.enableTab(1, true);\r\n                this.tab.select(1);\r\n                this.tab.enableTab(2, false);\r\n                break;\r\n            case \"goBackDetails\":\r\n                /* Update passenger detail before confirming the payment */\r\n                this.tab.enableTab(2, true);\r\n                this.tab.select(2);\r\n                this.tab.enableTab(3, false);\r\n                break;\r\n        }\r\n    }\r\n    filterTrains(args) {\r\n        /* Generating trains based on source and destination chosen */\r\n        let fromCity = this.startPoint.value;\r\n        let toCity = this.endPoint.value;\r\n        let count = Math.floor((Math.random() * 3) + 2);\r\n        for (let i = 0; i < count; i++) {\r\n            let details = {};\r\n            details[\"TrainNo\"] = Math.floor((Math.random() * 20) + 19000);\r\n            details[\"Name\"] = \"Train \" + i;\r\n            details[\"Departure\"] = fromCity;\r\n            details[\"Arrival\"] = toCity;\r\n            details[\"Availability\"] = Math.floor((Math.random() * 20) + 20);\r\n            this.result.push(details);\r\n        }\r\n    }\r\n    availableTrainGridcreated() {\r\n        this.availTrainGrid.dataSource = this.result;\r\n    }\r\n    finalizeDetails(args) {\r\n        /* Get the passenger details and update table with name and other details for confirmation */\r\n        let passCount = 0;\r\n        let name1 = document.getElementById(\"pass_name1\");\r\n        let name2 = document.getElementById(\"pass_name2\");\r\n        let name3 = document.getElementById(\"pass_name3\");\r\n        for (let i = 1; i <= 3; i++) {\r\n            if (name1.value !== \"\") {\r\n                let details = {};\r\n                let gender = ((i === 1) ? this.pass_gender1.value : (i === 2) ? this.pass_gender2.value : this.pass_gender3.value);\r\n                let berth = ((i === 1) ? this.pass_berth1.value : (i === 2) ? this.pass_berth2.value : this.pass_berth3.value);\r\n                details[\"TrainNo\"] = this.selectedTrain.TrainNo.toString();\r\n                details[\"PassName\"] = (i === 1) ? name1.value : (i === 2) ? name2.value : name3.value;\r\n                details[\"Gender\"] = (gender === \"\") ? \"Male\" : gender;\r\n                details[\"Berth\"] = berth;\r\n                if (details[\"PassName\"] !== \"\") {\r\n                    this.reserved.push(details);\r\n                }\r\n                passCount++;\r\n            }\r\n            let calcFare = 0;\r\n            for (let i in this.cities) {\r\n                if (this.startPoint.value == this.cities[i].name)\r\n                    calcFare = calcFare + this.cities[i].fare;\r\n                if (this.endPoint.value == this.cities[i].name)\r\n                    calcFare = calcFare + this.cities[i].fare;\r\n            }\r\n            let displayAmt = document.getElementById(\"amount\");\r\n            if (this.ticketType.value === 'Economy Class') {\r\n                displayAmt.innerText = \"Total payable amount: $\" + passCount * (300 + calcFare);\r\n            }\r\n            else if (this.ticketType.value === 'Business Class') {\r\n                displayAmt.innerText = \"Total payable amount: $\" + passCount * (500 + calcFare);\r\n            }\r\n            else if (this.ticketType.value === 'Common Class') {\r\n                displayAmt.innerText = \"Total payable amount: $\" + passCount * (150 + calcFare);\r\n            }\r\n        }\r\n    }\r\n    ticketDetailGridcreated() {\r\n        this.ticketDetailGrid.dataSource = this.reserved;\r\n    }\r\n    content0() {\r\n        return (<div id=\"booking\">\r\n    <div className=\"wizard-title\">Plan your journey</div>\r\n    <div className=\"responsive-align\">\r\n      <div className=\"row\">\r\n        <div className=\"col-xs-6 col-sm-6 col-lg-6 col-md-6 search-item\">\r\n          <DropDownListComponent ref={dropdownlist => { this.startPoint = dropdownlist; }} width=\"100%\" dataSource={this.cities} fields={this.autoCompleteFields} placeholder=\"From\" floatLabelType=\"Auto\"/>\r\n        </div>\r\n        <div className=\"col-xs-6 col-sm-6 col-lg-6 col-md-6 search-item\">\r\n          <DropDownListComponent ref={dropdownlist => { this.endPoint = dropdownlist; }} width=\"100%\" dataSource={this.cities} fields={this.autoCompleteFields} placeholder=\"To\" floatLabelType=\"Auto\"/>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-xs-6 col-sm-6 col-lg-6 col-md-6 search-item\">\r\n          <DatePickerComponent ref={calendar => (this.journeyDate = calendar)} width=\"100%\" placeholder=\"Journey Date\" floatLabelType=\"Auto\" min={this.dateMin} max={this.dateMax} focus={this.focusIn.bind(this)}/>\r\n        </div>\r\n        <div className=\"col-xs-6 col-sm-6 col-lg-6 col-md-6 search-item\">\r\n          <DropDownListComponent ref={dropdownlist => (this.ticketType = dropdownlist)} dataSource={this.quotas} placeholder=\"Ticket type\" floatLabelType=\"Auto\" fields={this.fields}/>\r\n        </div>\r\n      </div>\r\n      <div className=\"btn-container\">\r\n        <button id=\"searchNext\" className=\"e-btn\" onClick={this.btnClicked.bind(this)}>\r\n          Search Train\r\n        </button>\r\n      </div>\r\n      <span id=\"err1\"/>\r\n    </div>\r\n  </div>);\r\n    }\r\n    content1() {\r\n        return (<div id=\"selectTrain\">\r\n    <div className=\"wizard-title\">Select the train from the list </div>\r\n    <GridComponent ref={grid => (this.availTrainGrid = grid)} width=\"100%\" rowSelected={this.trainSelected.bind(this)} created={this.availableTrainGridcreated.bind(this)}>\r\n      <ColumnsDirective>\r\n        <ColumnDirective field=\"TrainNo\" headerText=\"Train No\" width={120} type=\"number\"/>\r\n        <ColumnDirective field=\"Name\" headerText=\"Name\" width={140}/>\r\n        <ColumnDirective field=\"Departure\" headerText=\"Departure\" width={120}/>\r\n        <ColumnDirective field=\"Arrival\" headerText=\"Arrival\" width={140}/>\r\n        <ColumnDirective field=\"Availability\" headerText=\"Availability\" width={140} type=\"number\"/>\r\n      </ColumnsDirective>\r\n    </GridComponent>\r\n    <br />\r\n    <div className=\"btn-container\">\r\n      <button id=\"goToSearch\" className=\"e-btn\" onClick={this.btnClicked.bind(this)}>\r\n        Back\r\n      </button>\r\n      <button id=\"bookTickets\" className=\"e-btn\" onClick={this.btnClicked.bind(this)}>\r\n        Continue\r\n      </button>\r\n    </div>\r\n    <span id=\"err2\"/>\r\n  </div>);\r\n    }\r\n    content2() {\r\n        return (<div id=\"details\">\r\n    <div className=\"details-page wizard-title\">\r\n      Enter the passenger details\r\n    </div>\r\n    <div id=\"PassengersList\">\r\n      <table id=\"passenger-table\">\r\n        <colgroup>\r\n          <col />\r\n          <col />\r\n          <col />\r\n          <col />\r\n          <col />\r\n          <col />\r\n        </colgroup>\r\n        <thead>\r\n          <tr>\r\n            <th className=\"name-header\">Name</th>\r\n            <th className=\"age-header\">Age</th>\r\n            <th className=\"gender-header\">Gender</th>\r\n            <th className=\"type-header\">Berth Preference</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              <input className=\"e-input\" id=\"pass_name1\" type=\"text\" placeholder=\"Passenger Name\"/>\r\n            </td>\r\n            <td>\r\n              <NumericTextBoxComponent ref={numerictextbox => { this.pass_age1 = numerictextbox; }} showSpinButton={false} min={1} max={100} value={18} format=\"n0\"/>\r\n            </td>\r\n            <td>\r\n              <DropDownListComponent ref={dropdownlist => { this.pass_gender1 = dropdownlist; }} dataSource={this.gender} text=\"Male\" fields={this.fields}/>\r\n            </td>\r\n            <td>\r\n              <DropDownListComponent ref={dropdownlist => { this.pass_berth1 = dropdownlist; }} dataSource={this.berths} placeholder=\"Optional\" fields={this.fields}/>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <input id=\"pass_name2\" className=\"e-input\" type=\"text\" placeholder=\"Passenger Name\"/>\r\n            </td>\r\n            <td>\r\n              <NumericTextBoxComponent showSpinButton={false} min={1} max={100} value={18} format=\"n0\"/>\r\n            </td>\r\n            <td>\r\n              <DropDownListComponent ref={dropdownlist => { this.pass_gender2 = dropdownlist; }} dataSource={this.gender} text=\"Male\" fields={this.fields}/>\r\n            </td>\r\n            <td>\r\n              <DropDownListComponent ref={dropdownlist => { this.pass_berth2 = dropdownlist; }} dataSource={this.berths} placeholder=\"Optional\" fields={this.fields}/>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <input id=\"pass_name3\" className=\"e-input\" type=\"text\" placeholder=\"Passenger Name\"/>\r\n            </td>\r\n            <td>\r\n              <NumericTextBoxComponent showSpinButton={false} min={1} max={100} value={18} format=\"n0\"/>\r\n            </td>\r\n            <td>\r\n              <DropDownListComponent ref={dropdownlist => { this.pass_gender3 = dropdownlist; }} dataSource={this.gender} text=\"Male\" fields={this.fields}/>\r\n            </td>\r\n            <td>\r\n              <DropDownListComponent ref={dropdownlist => { this.pass_berth3 = dropdownlist; }} dataSource={this.berths} placeholder=\"Optional\" fields={this.fields}/>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    <br />\r\n    <div className=\"btn-container\">\r\n      <button id=\"goBackToBook\" className=\"e-btn\" onClick={this.btnClicked.bind(this)}>\r\n        Back\r\n      </button>\r\n      <button id=\"confirmTickets\" className=\"e-btn\" onClick={this.btnClicked.bind(this)}>\r\n        Continue\r\n      </button>\r\n    </div>\r\n    <span id=\"err3\"/>\r\n  </div>);\r\n    }\r\n    content3() {\r\n        return (<div id=\"confirm\">\r\n    <div className=\"tab-title1 wizard-title\">\r\n      Confirm the details and proceed\r\n    </div>\r\n    <GridComponent ref={grid => (this.ticketDetailGrid = grid)} width=\"100%\" created={this.ticketDetailGridcreated.bind(this)}>\r\n      <ColumnsDirective>\r\n        <ColumnDirective field=\"TrainNo\" headerText=\"Train No\" width={120} type=\"number\"/>\r\n        <ColumnDirective field=\"PassName\" headerText=\"Name\" width={140}/>\r\n        <ColumnDirective field=\"Gender\" headerText=\"Gender\" width={120}/>\r\n        <ColumnDirective field=\"Berth\" headerText=\"Berth\" width={140}/>\r\n      </ColumnsDirective>\r\n    </GridComponent>\r\n    <br />\r\n    <div id=\"amount\"/>\r\n    <br />\r\n    <div className=\"btn-container\">\r\n      <button id=\"goBackDetails\" className=\"e-btn\" onClick={this.btnClicked.bind(this)}>\r\n        Back\r\n      </button>\r\n      <button id=\"makePayment\" className=\"e-btn\" onClick={this.btnClicked.bind(this)}>\r\n        Pay\r\n      </button>\r\n    </div>\r\n  </div>);\r\n    }\r\n    render() {\r\n        return (<div>\r\n        <div className=\"col-lg-12 control-section e-tab-section\">\r\n          <div className=\"e-sample-resize-container\">\r\n            <TabComponent id=\"tab-wizard\" ref={tab => (this.tab = tab)} heightAdjustMode=\"None\" height={390} selecting={this.tabSelecting.bind(this)}>\r\n              <TabItemsDirective>\r\n                <TabItemDirective header={this.headerText[0]} content={this.content0.bind(this)}/>\r\n                <TabItemDirective header={this.headerText[1]} content={this.content1.bind(this)} disabled={true}/>\r\n                <TabItemDirective header={this.headerText[2]} content={this.content2.bind(this)} disabled={true}/>\r\n                <TabItemDirective header={this.headerText[3]} content={this.content3.bind(this)} disabled={true}/>\r\n              </TabItemsDirective>\r\n            </TabComponent>\r\n            <DialogComponent ref={dialog => (this.alertDlg = dialog)} header=\"Success\" width={250} isModal={true} visible={false} showCloseIcon={true} content=\"Your payment successfully processed\" target={this.dlgTarget} buttons={this.dlgButtons} created={this.dlgCreated.bind(this)}/>\r\n          </div>\r\n        </div>\r\n      </div>);\r\n    }\r\n}\r\n\nrender(<Wizard />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}