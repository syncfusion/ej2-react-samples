{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","export-data.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.dataCollection = [\n    { xDate: new Date(2013, 0, 1), Open: 85.79, High: 85.89, Low: 85.36, Close: 85.54 },\n    { xDate: new Date(2013, 0, 3), Open: 85.83, High: 85.85, Low: 85.55, Close: 85.64 },\n    { xDate: new Date(2013, 0, 5), Open: 86.19, High: 86.25, Low: 85.8, Close: 85.98 },\n    { xDate: new Date(2013, 0, 7), Open: 86.17, High: 86.28, Low: 85.96, Close: 86.07 },\n    { xDate: new Date(2013, 0, 9), Open: 86.19, High: 86.26, Low: 85.97, Close: 86.2 },\n    { xDate: new Date(2013, 0, 11), Open: 85.98, High: 86.31, Low: 85.86, Close: 86.15 },\n    { xDate: new Date(2013, 0, 13), Open: 85.82, High: 86.18, Low: 85.74, Close: 85.78 },\n    { xDate: new Date(2013, 0, 15), Open: 85.45, High: 85.66, Low: 85.41, Close: 85.55 },\n    { xDate: new Date(2013, 0, 17), Open: 85.53, High: 85.53, Low: 85.31, Close: 85.48 },\n    { xDate: new Date(2013, 0, 19), Open: 85.6, High: 85.68, Low: 85.34, Close: 85.39 },\n    { xDate: new Date(2013, 0, 21), Open: 85.6, High: 85.72, Low: 85.5, Close: 85.61 },\n    { xDate: new Date(2013, 0, 23), Open: 85.34, High: 85.52, Low: 85.3, Close: 85.49 },\n    { xDate: new Date(2013, 0, 25), Open: 85.66, High: 85.72, Low: 85.38, Close: 85.41 },\n    { xDate: new Date(2013, 0, 27), Open: 85.93, High: 85.95, Low: 85.59, Close: 85.62 },\n    { xDate: new Date(2013, 0, 29), Open: 85.91, High: 85.93, Low: 85.63, Close: 85.58 },\n    { xDate: new Date(2013, 1, 1), Open: 85.85, High: 86.25, Low: 85.79, Close: 86.06 },\n    { xDate: new Date(2013, 1, 3), Open: 85.6, High: 85.85, Low: 85.49, Close: 85.81 },\n    { xDate: new Date(2013, 1, 5), Open: 85.94, High: 86, Low: 85.48, Close: 85.66 },\n    { xDate: new Date(2013, 1, 7), Open: 86.55, High: 86.64, Low: 85.36, Close: 85.92 },\n    { xDate: new Date(2013, 1, 9), Open: 86.46, High: 86.87, Low: 86.4, Close: 86.71 },\n    { xDate: new Date(2013, 1, 11), Open: 86.3, High: 86.39, Low: 86.13, Close: 86.38 },\n    { xDate: new Date(2013, 1, 13), Open: 85.74, High: 86.44, Low: 85.67, Close: 86.19 },\n    { xDate: new Date(2013, 1, 15), Open: 85.56, High: 85.62, Low: 85.34, Close: 85.61 },\n    { xDate: new Date(2013, 1, 17), Open: 85.79, High: 85.89, Low: 85.36, Close: 85.52 },\n    { xDate: new Date(2013, 1, 19), Open: 85.54, High: 86, Low: 85.51, Close: 85.76 },\n    { xDate: new Date(2013, 1, 21), Open: 85, High: 85.17, Low: 84.87, Close: 85.15 },\n    { xDate: new Date(2013, 1, 23), Open: 85.1, High: 85.28, Low: 84.72, Close: 85.08 },\n    { xDate: new Date(2013, 1, 25), Open: 85.46, High: 85.56, Low: 85.18, Close: 85.37 },\n    { xDate: new Date(2013, 1, 27), Open: 85.42, High: 85.44, Low: 85.09, Close: 85.42 },\n    { xDate: new Date(2013, 1, 29), Open: 85.42, High: 85.44, Low: 85.09, Close: 85.42 },\n    { xDate: new Date(2013, 2, 1), Open: 85.79, High: 85.89, Low: 85.36, Close: 85.54 },\n    { xDate: new Date(2013, 2, 3), Open: 85.83, High: 85.85, Low: 85.55, Close: 85.64 },\n    { xDate: new Date(2013, 2, 5), Open: 86.19, High: 86.25, Low: 85.8, Close: 85.98 },\n    { xDate: new Date(2013, 2, 7), Open: 86.17, High: 86.28, Low: 85.96, Close: 86.07 },\n    { xDate: new Date(2013, 2, 9), Open: 86.19, High: 86.26, Low: 85.97, Close: 86.2 },\n    { xDate: new Date(2013, 2, 11), Open: 85.98, High: 86.31, Low: 85.86, Close: 86.15 },\n    { xDate: new Date(2013, 2, 13), Open: 85.82, High: 86.18, Low: 85.74, Close: 85.78 },\n    { xDate: new Date(2013, 2, 15), Open: 85.45, High: 85.66, Low: 85.41, Close: 85.55 },\n    { xDate: new Date(2013, 2, 17), Open: 85.53, High: 85.53, Low: 85.31, Close: 85.48 },\n    { xDate: new Date(2013, 2, 19), Open: 85.6, High: 85.68, Low: 85.34, Close: 85.39 },\n    { xDate: new Date(2013, 2, 21), Open: 85.6, High: 85.72, Low: 85.5, Close: 85.61 },\n    { xDate: new Date(2013, 2, 23), Open: 85.34, High: 85.52, Low: 85.3, Close: 85.49 },\n    { xDate: new Date(2013, 2, 25), Open: 85.66, High: 85.72, Low: 85.38, Close: 85.41 },\n    { xDate: new Date(2013, 2, 27), Open: 85.93, High: 85.95, Low: 85.59, Close: 85.62 },\n    { xDate: new Date(2013, 2, 29), Open: 85.91, High: 85.93, Low: 85.63, Close: 85.58 },\n    { xDate: new Date(2013, 3, 1), Open: 86.1, High: 86.15, Low: 85.9, Close: 86.03 },\n    { xDate: new Date(2013, 3, 3), Open: 85.93, High: 86.17, Low: 85.84, Close: 86.02 },\n    { xDate: new Date(2013, 3, 5), Open: 85.74, High: 86, Low: 85.66, Close: 86 },\n    { xDate: new Date(2013, 3, 7), Open: 85.71, High: 85.71, Low: 85.36, Close: 85.62 },\n    { xDate: new Date(2013, 3, 9), Open: 85.3, High: 85.92, Low: 85.16, Close: 85.8 },\n    { xDate: new Date(2013, 3, 11), Open: 84.23, High: 85.46, Low: 84.23, Close: 85.2 },\n    { xDate: new Date(2013, 3, 13), Open: 84.51, High: 84.54, Low: 84.19, Close: 84.3 },\n    { xDate: new Date(2013, 3, 15), Open: 84.44, High: 84.65, Low: 84.2, Close: 84.63 },\n    { xDate: new Date(2013, 3, 17), Open: 84.6, High: 84.81, Low: 84.59, Close: 84.65 },\n    { xDate: new Date(2013, 3, 19), Open: 84.52, High: 84.86, Low: 84.4, Close: 84.76 },\n    { xDate: new Date(2013, 3, 21), Open: 84.17, High: 84.66, Low: 84.16, Close: 84.47 },\n    { xDate: new Date(2013, 3, 23), Open: 84.22, High: 84.3, Low: 83.98, Close: 84.26 },\n    { xDate: new Date(2013, 3, 25), Open: 83.75, High: 84.1, Low: 83.65, Close: 84 },\n    { xDate: new Date(2013, 3, 27), Open: 84, High: 84.01, Low: 83.67, Close: 83.74 },\n    { xDate: new Date(2013, 3, 29), Open: 84, High: 84.01, Low: 83.67, Close: 83.74 },\n    { xDate: new Date(2013, 4, 1), Open: 84.3, High: 84.45, Low: 84.19, Close: 84.22 },\n    { xDate: new Date(2013, 4, 3), Open: 83.79, High: 84.19, Low: 83.7, Close: 84.04 },\n    { xDate: new Date(2013, 4, 5), Open: 84.02, High: 84.02, Low: 83.69, Close: 83.71 },\n    { xDate: new Date(2013, 4, 7), Open: 84.01, High: 84.04, Low: 83.82, Close: 83.96 },\n    { xDate: new Date(2013, 4, 9), Open: 83.9, High: 84.02, Low: 83.86, Close: 83.94 },\n    { xDate: new Date(2013, 4, 11), Open: 84.09, High: 84.17, Low: 83.9, Close: 84.06 },\n    { xDate: new Date(2013, 4, 13), Open: 83.89, High: 84.25, Low: 83.77, Close: 84.01 },\n    { xDate: new Date(2013, 4, 15), Open: 84.05, High: 84.14, Low: 83.84, Close: 83.91 },\n    { xDate: new Date(2013, 4, 17), Open: 84.49, High: 84.65, Low: 84.18, Close: 84.22 },\n    { xDate: new Date(2013, 4, 19), Open: 84.99, High: 85.1, Low: 84.37, Close: 84.43 },\n    { xDate: new Date(2013, 4, 21), Open: 84.96, High: 85.06, Low: 84.7, Close: 85.01 },\n    { xDate: new Date(2013, 4, 23), Open: 84.68, High: 84.9, Low: 84.65, Close: 84.76 },\n    { xDate: new Date(2013, 4, 25), Open: 84.35, High: 85.03, Low: 84.32, Close: 84.67 },\n    { xDate: new Date(2013, 4, 27), Open: 84.19, High: 84.31, Low: 84.16, Close: 84.19 },\n    { xDate: new Date(2013, 4, 29), Open: 84.19, High: 84.31, Low: 84.16, Close: 84.19 },\n    { xDate: new Date(2013, 5, 1), Open: 84.2, High: 84.29, Low: 84.04, Close: 84.15 },\n    { xDate: new Date(2013, 5, 3), Open: 84.21, High: 84.25, Low: 84.03, Close: 84.17 },\n    { xDate: new Date(2013, 5, 5), Open: 84.72, High: 84.87, Low: 84.44, Close: 84.49 },\n    { xDate: new Date(2013, 5, 7), Open: 84.85, High: 84.88, Low: 84.5, Close: 84.72 },\n    { xDate: new Date(2013, 5, 9), Open: 84.53, High: 84.74, Low: 84.25, Close: 84.69 },\n    { xDate: new Date(2013, 5, 11), Open: 84.4, High: 84.7, Low: 84.27, Close: 84.52 },\n    { xDate: new Date(2013, 5, 13), Open: 84.96, High: 85.07, Low: 84.5, Close: 84.57 },\n    { xDate: new Date(2013, 5, 15), Open: 85.28, High: 85.32, Low: 84.95, Close: 85.03 },\n    { xDate: new Date(2013, 5, 17), Open: 85.35, High: 85.39, Low: 85.1, Close: 85.32 },\n    { xDate: new Date(2013, 5, 19), Open: 85.65, High: 85.66, Low: 85.21, Close: 85.36 },\n    { xDate: new Date(2013, 5, 21), Open: 85.38, High: 85.85, Low: 85.25, Close: 85.67 },\n    { xDate: new Date(2013, 5, 23), Open: 85.8, High: 85.96, Low: 85.67, Close: 85.83 },\n    { xDate: new Date(2013, 5, 25), Open: 86.07, High: 86.22, Low: 85.75, Close: 85.87 },\n    { xDate: new Date(2013, 5, 27), Open: 86.05, High: 86.08, Low: 85.68, Close: 85.79 },\n    { xDate: new Date(2013, 5, 29), Open: 86.05, High: 86.08, Low: 85.68, Close: 85.79 },\n    { xDate: new Date(2013, 6, 1), Open: 85.85, High: 86.25, Low: 85.79, Close: 86.06 },\n    { xDate: new Date(2013, 6, 3), Open: 85.6, High: 85.85, Low: 85.49, Close: 85.81 },\n    { xDate: new Date(2013, 6, 5), Open: 85.94, High: 86, Low: 85.48, Close: 85.66 },\n    { xDate: new Date(2013, 6, 7), Open: 86.55, High: 86.64, Low: 85.36, Close: 85.92 },\n    { xDate: new Date(2013, 6, 9), Open: 86.46, High: 86.87, Low: 86.4, Close: 86.71 },\n    { xDate: new Date(2013, 6, 11), Open: 86.3, High: 86.39, Low: 86.13, Close: 86.38 },\n    { xDate: new Date(2013, 6, 13), Open: 85.74, High: 86.44, Low: 85.67, Close: 86.19 },\n    { xDate: new Date(2013, 6, 15), Open: 85.56, High: 85.62, Low: 85.34, Close: 85.61 },\n    { xDate: new Date(2013, 6, 17), Open: 85.79, High: 85.89, Low: 85.36, Close: 85.52 },\n    { xDate: new Date(2013, 6, 19), Open: 85.54, High: 86, Low: 85.51, Close: 85.76 },\n    { xDate: new Date(2013, 6, 21), Open: 85, High: 85.17, Low: 84.87, Close: 85.15 },\n    { xDate: new Date(2013, 6, 23), Open: 85.1, High: 85.28, Low: 84.72, Close: 85.08 },\n    { xDate: new Date(2013, 6, 25), Open: 85.46, High: 85.56, Low: 85.18, Close: 85.37 },\n    { xDate: new Date(2013, 6, 27), Open: 85.42, High: 85.44, Low: 85.09, Close: 85.42 },\n    { xDate: new Date(2013, 6, 29), Open: 85.42, High: 85.44, Low: 85.09, Close: 85.42 },\n    { xDate: new Date(2013, 7, 1), Open: 85.79, High: 85.89, Low: 85.36, Close: 85.54 },\n    { xDate: new Date(2013, 7, 3), Open: 85.83, High: 85.85, Low: 85.55, Close: 85.64 },\n    { xDate: new Date(2013, 7, 5), Open: 86.19, High: 86.25, Low: 85.8, Close: 85.98 },\n    { xDate: new Date(2013, 7, 7), Open: 86.17, High: 86.28, Low: 85.96, Close: 86.07 },\n    { xDate: new Date(2013, 7, 9), Open: 86.19, High: 86.26, Low: 85.97, Close: 86.2 },\n    { xDate: new Date(2013, 7, 11), Open: 85.98, High: 86.31, Low: 85.86, Close: 86.15 },\n    { xDate: new Date(2013, 7, 13), Open: 85.82, High: 86.18, Low: 85.74, Close: 85.78 },\n    { xDate: new Date(2013, 7, 15), Open: 85.45, High: 85.66, Low: 85.41, Close: 85.55 },\n    { xDate: new Date(2013, 7, 17), Open: 85.53, High: 85.53, Low: 85.31, Close: 85.48 },\n    { xDate: new Date(2013, 7, 19), Open: 85.6, High: 85.68, Low: 85.34, Close: 85.39 },\n    { xDate: new Date(2013, 7, 21), Open: 85.6, High: 85.72, Low: 85.5, Close: 85.61 },\n    { xDate: new Date(2013, 7, 23), Open: 85.34, High: 85.52, Low: 85.3, Close: 85.49 },\n    { xDate: new Date(2013, 7, 25), Open: 85.66, High: 85.72, Low: 85.38, Close: 85.41 },\n    { xDate: new Date(2013, 7, 27), Open: 85.93, High: 85.95, Low: 85.59, Close: 85.62 },\n    { xDate: new Date(2013, 7, 29), Open: 85.91, High: 85.93, Low: 85.63, Close: 85.58 },\n    { xDate: new Date(2013, 8, 1), Open: 86.1, High: 86.15, Low: 85.9, Close: 86.03 },\n    { xDate: new Date(2013, 8, 3), Open: 85.93, High: 86.17, Low: 85.84, Close: 86.02 },\n    { xDate: new Date(2013, 8, 5), Open: 85.74, High: 86, Low: 85.66, Close: 86 },\n    { xDate: new Date(2013, 8, 7), Open: 85.71, High: 85.71, Low: 85.36, Close: 85.62 },\n    { xDate: new Date(2013, 8, 9), Open: 85.3, High: 85.92, Low: 85.16, Close: 85.8 },\n    { xDate: new Date(2013, 8, 11), Open: 84.23, High: 85.46, Low: 84.23, Close: 85.2 },\n    { xDate: new Date(2013, 8, 13), Open: 84.51, High: 84.54, Low: 84.19, Close: 84.3 },\n    { xDate: new Date(2013, 8, 15), Open: 84.44, High: 84.65, Low: 84.2, Close: 84.63 },\n    { xDate: new Date(2013, 8, 17), Open: 84.6, High: 84.81, Low: 84.59, Close: 84.65 },\n    { xDate: new Date(2013, 8, 19), Open: 84.52, High: 84.86, Low: 84.4, Close: 84.76 },\n    { xDate: new Date(2013, 8, 21), Open: 84.17, High: 84.66, Low: 84.16, Close: 84.47 },\n    { xDate: new Date(2013, 8, 23), Open: 84.22, High: 84.3, Low: 83.98, Close: 84.26 },\n    { xDate: new Date(2013, 8, 25), Open: 83.75, High: 84.1, Low: 83.65, Close: 84 },\n    { xDate: new Date(2013, 8, 27), Open: 84, High: 84.01, Low: 83.67, Close: 83.74 },\n    { xDate: new Date(2013, 8, 29), Open: 84, High: 84.01, Low: 83.67, Close: 83.74 },\n    { xDate: new Date(2013, 9, 1), Open: 84.3, High: 84.45, Low: 84.19, Close: 84.22 },\n    { xDate: new Date(2013, 9, 3), Open: 83.79, High: 84.19, Low: 83.7, Close: 84.04 },\n    { xDate: new Date(2013, 9, 5), Open: 84.02, High: 84.02, Low: 83.69, Close: 83.71 },\n    { xDate: new Date(2013, 9, 7), Open: 84.01, High: 84.04, Low: 83.82, Close: 83.96 },\n    { xDate: new Date(2013, 9, 9), Open: 83.9, High: 84.02, Low: 83.86, Close: 83.94 },\n    { xDate: new Date(2013, 9, 11), Open: 84.09, High: 84.17, Low: 83.9, Close: 84.06 },\n    { xDate: new Date(2013, 9, 13), Open: 83.89, High: 84.25, Low: 83.77, Close: 84.01 },\n    { xDate: new Date(2013, 9, 15), Open: 84.05, High: 84.14, Low: 83.84, Close: 83.91 },\n    { xDate: new Date(2013, 9, 17), Open: 84.49, High: 84.65, Low: 84.18, Close: 84.22 },\n    { xDate: new Date(2013, 9, 19), Open: 84.99, High: 85.1, Low: 84.37, Close: 84.43 },\n    { xDate: new Date(2013, 9, 21), Open: 84.96, High: 85.06, Low: 84.7, Close: 85.01 },\n    { xDate: new Date(2013, 9, 23), Open: 84.68, High: 84.9, Low: 84.65, Close: 84.76 },\n    { xDate: new Date(2013, 9, 25), Open: 84.35, High: 85.03, Low: 84.32, Close: 84.67 },\n    { xDate: new Date(2013, 9, 27), Open: 84.19, High: 84.31, Low: 84.16, Close: 84.19 },\n    { xDate: new Date(2013, 9, 29), Open: 84.19, High: 84.31, Low: 84.16, Close: 84.19 },\n    { xDate: new Date(2013, 10, 1), Open: 84.2, High: 84.29, Low: 84.04, Close: 84.15 },\n    { xDate: new Date(2013, 10, 3), Open: 84.21, High: 84.25, Low: 84.03, Close: 84.17 },\n    { xDate: new Date(2013, 10, 5), Open: 84.72, High: 84.87, Low: 84.44, Close: 84.49 },\n    { xDate: new Date(2013, 10, 7), Open: 84.85, High: 84.88, Low: 84.5, Close: 84.72 },\n    { xDate: new Date(2013, 10, 9), Open: 84.53, High: 84.74, Low: 84.25, Close: 84.69 },\n    { xDate: new Date(2013, 10, 11), Open: 84.4, High: 84.7, Low: 84.27, Close: 84.52 },\n    { xDate: new Date(2013, 10, 13), Open: 84.96, High: 85.07, Low: 84.5, Close: 84.57 },\n    { xDate: new Date(2013, 10, 15), Open: 85.28, High: 85.32, Low: 84.95, Close: 85.03 },\n    { xDate: new Date(2013, 10, 17), Open: 85.35, High: 85.39, Low: 85.1, Close: 85.32 },\n    { xDate: new Date(2013, 10, 19), Open: 85.65, High: 85.66, Low: 85.21, Close: 85.36 },\n    { xDate: new Date(2013, 10, 21), Open: 85.38, High: 85.85, Low: 85.25, Close: 85.67 },\n    { xDate: new Date(2013, 10, 23), Open: 85.8, High: 85.96, Low: 85.67, Close: 85.83 },\n    { xDate: new Date(2013, 10, 25), Open: 86.07, High: 86.22, Low: 85.75, Close: 85.87 },\n    { xDate: new Date(2013, 10, 27), Open: 86.05, High: 86.08, Low: 85.68, Close: 85.79 },\n    { xDate: new Date(2013, 10, 29), Open: 86.05, High: 86.08, Low: 85.68, Close: 85.79 },\n    { xDate: new Date(2013, 11, 1), Open: 85.85, High: 86.25, Low: 85.79, Close: 86.06 },\n    { xDate: new Date(2013, 11, 3), Open: 85.6, High: 85.85, Low: 85.49, Close: 85.81 },\n    { xDate: new Date(2013, 11, 5), Open: 85.94, High: 86, Low: 85.48, Close: 85.66 },\n    { xDate: new Date(2013, 11, 7), Open: 86.55, High: 86.64, Low: 85.36, Close: 85.92 },\n    { xDate: new Date(2013, 11, 9), Open: 86.46, High: 86.87, Low: 86.4, Close: 86.71 },\n    { xDate: new Date(2013, 11, 11), Open: 86.3, High: 86.39, Low: 86.13, Close: 86.38 },\n    { xDate: new Date(2013, 11, 13), Open: 85.74, High: 86.44, Low: 85.67, Close: 86.19 },\n    { xDate: new Date(2013, 11, 15), Open: 85.56, High: 85.62, Low: 85.34, Close: 85.61 },\n    { xDate: new Date(2013, 11, 17), Open: 85.79, High: 85.89, Low: 85.36, Close: 85.52 },\n    { xDate: new Date(2013, 11, 19), Open: 85.54, High: 86, Low: 85.51, Close: 85.76 },\n    { xDate: new Date(2013, 11, 21), Open: 85, High: 85.17, Low: 84.87, Close: 85.15 },\n    { xDate: new Date(2013, 11, 23), Open: 85.1, High: 85.28, Low: 84.72, Close: 85.08 },\n    { xDate: new Date(2013, 11, 25), Open: 85.46, High: 85.56, Low: 85.18, Close: 85.37 },\n    { xDate: new Date(2013, 11, 27), Open: 85.42, High: 85.44, Low: 85.09, Close: 85.42 },\n    { xDate: new Date(2013, 11, 29), Open: 85.42, High: 85.44, Low: 85.09, Close: 85.42 }\n];\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for Range Navigator Export\r\n */\r\nimport * as React from \"react\";\r\nimport { SplineAreaSeries, ChartComponent, SeriesCollectionDirective, RangeNavigatorComponent, DateTime, SeriesDirective, Inject, Tooltip, Export } from '@syncfusion/ej2-react-charts';\r\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { PropertyPane } from './property-pane';\r\nimport { Browser } from '@syncfusion/ej2-base';\r\nimport { SampleBase } from './sample-base';\r\nimport { dataCollection } from './export-data';\r\nexport let zoomFactor;\r\nexport let zoomPosition;\r\nexport let dateTimeData = dataCollection;\r\nexport let themes = ['Material', 'Fabric', 'Bootstrap', 'Highcontrast'];\r\nexport let borderColor = ['#FF4081', '#007897', '#428BCA', '#FFD939'];\r\nexport let regionColor = ['rgba(255, 64, 129, 0.3)', ' rgba(0, 120, 151, 0.3)',\r\n    'rgba(66, 139, 202, 0.3)', 'rgba(255, 217, 57, 0.3)'];\r\nconst SAMPLE_CSS = `\r\n        .control-fluid {\r\n            padding: 0px !important;\r\n        }\r\n        #title{\r\n            font-size: 15px;\r\n            font-style: normal;\r\n            font-family: \"Segoe UI\";\r\n            font-weight: 500;\r\n            text-anchor: middle;\r\n            transform: none;\r\n            opacity: 1;\r\n        }\r\n        #btn-control {\r\n            width: 100%;\r\n            text-align: center;\r\n        }\r\n        .e-export-icon::before {\r\n            content: '\\\\e720';\r\n        }\r\n    \r\n         .e-print-icon::before {\r\n            content: '\\\\e34b';\r\n        }`;\r\nexport class RangeExport extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = [\r\n            { value: 'JPEG' },\r\n            { value: 'PNG' },\r\n            { value: 'SVG' },\r\n            { value: 'PDF' }\r\n        ];\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section row'>\r\n                <div className='col-md-9'>\r\n                <div className=\"row\" style={{ textAlign: \"center\" }}>\r\n                        <div id=\"title\">Conns,Inc Stock Details</div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <RangeNavigatorComponent id='rangenavigator' ref={rangenav => this.rangeInstance = rangenav} style={{ textAlign: \"center\" }} valueType='DateTime' intervalType='Months' labelFormat='MMM' enableGrouping={true} value={[new Date('2013-05-01'), new Date('2013-08-01')]} dataSource={dateTimeData} xName='xDate' yName='Close' width={Browser.isDevice ? '100%' : '80%'} load={this.rangeLoad.bind(this)} changed={this.changed.bind(this)}>\r\n                        <Inject services={[DateTime]}/>\r\n                    </RangeNavigatorComponent>\r\n                    </div>\r\n                <div className=\"row\">\r\n                    <ChartComponent id='charts' ref={chart => this.chartInstance = chart} style={{ textAlign: \"center\" }} primaryXAxis={{\r\n            valueType: 'DateTime',\r\n            crosshairTooltip: { enable: true },\r\n            edgeLabelPlacement: 'Shift',\r\n            majorGridLines: { width: 0 }\r\n        }} primaryYAxis={{\r\n            minimum: 81, maximum: 87, interval: 2,\r\n            title: 'Million in USD',\r\n            majorTickLines: { width: 0 },\r\n            lineStyle: { width: 0 },\r\n            labelFormat: '${value}M'\r\n        }} load={this.chartLoad.bind(this)} width={Browser.isDevice ? '100%' : '80%'} height='350' chartArea={{ border: { width: 0 } }} tooltip={{\r\n            enable: true, shared: true\r\n        }}>\r\n                        <Inject services={[SplineAreaSeries, DateTime, Tooltip, Export]}/>\r\n                        <SeriesCollectionDirective>\r\n                            <SeriesDirective dataSource={dateTimeData} xName='xDate' yName='Close' border={{ width: 2 }} animation={{ enable: false }} name='Close' type='SplineArea' width={2}>\r\n                            </SeriesDirective>\r\n                        </SeriesCollectionDirective>\r\n                    </ChartComponent>\r\n                </div>\r\n                </div>\r\n                    <div className='col-md-3 property-section'>\r\n                        <PropertyPane title='Properties'>\r\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '80%' }}>\r\n                                <tr style={{ height: \"50px\" }}>\r\n                                    <td style={{ width: \"30%\" }}>\r\n                                        Export Type:\r\n                            </td>\r\n                                    <td style={{ width: \"30%\" }}>\r\n                                        <DropDownListComponent width={60} id=\"etype\" value=\"JPEG\" ref={d => this.mode = d} dataSource={this.type} fields={{ text: 'value', value: 'value' }} placeholder=\"JPEG\"/>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: \"50px\" }}>\r\n                                    <td style={{ width: \"40%\" }}>\r\n                                        File Name:\r\n                            </td>\r\n                                    <td style={{ width: \"40%\" }}>\r\n                                        <div className=\"e-float-input\" style={{ width: 70, 'margin-top': '0px' }}>\r\n                                            <input type=\"text\" defaultValue=\"Chart\" id=\"fileName\" style={{ \"margin-left\": \"-10px\" }}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: '40px' }}>\r\n                                    <td>\r\n                                        <div id=\"btn-control\" style={{ 'margin-left': '20px' }}>\r\n                                            <ButtonComponent id=\"exporticon\" onClick={this.exportClick.bind(this)} iconCss='e-icons e-export-icon' cssClass='e-flat' isPrimary={true}>Export</ButtonComponent>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td>\r\n                                        <div id=\"btn-control\" style={{ 'margin-left': '20px' }}>\r\n                                            <ButtonComponent id=\"printicon\" onClick={this.printClick.bind(this)} iconCss='e-icons e-print-icon' cssClass='e-flat' isPrimary={true}>Print</ButtonComponent>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n    changed(args) {\r\n        if (this.chartInstance && this.chartRendered) {\r\n            this.chartInstance.primaryXAxis.zoomFactor = args.zoomFactor;\r\n            this.chartInstance.primaryXAxis.zoomPosition = args.zoomPosition;\r\n            this.chartInstance.dataBind();\r\n        }\r\n        else {\r\n            zoomFactor = args.zoomFactor;\r\n            zoomPosition = args.zoomPosition;\r\n        }\r\n    }\r\n    ;\r\n    chartLoad(args) {\r\n        args.chart.primaryXAxis.zoomFactor = zoomFactor;\r\n        args.chart.primaryXAxis.zoomPosition = zoomPosition;\r\n        let selectedTheme = location.hash.split('/')[1];\r\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\r\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\");\r\n        let chartTheme = args.chart.theme;\r\n        args.chart.series[0].fill = regionColor[themes.indexOf(chartTheme)];\r\n        args.chart.series[0].border.color = borderColor[themes.indexOf(chartTheme)];\r\n        this.chartRendered = true;\r\n    }\r\n    ;\r\n    exportClick(e) {\r\n        let fileName = document.getElementById('fileName').value;\r\n        this.chartInstance.exportModule.export(this.mode.value, fileName, null, [this.rangeInstance, this.chartInstance]);\r\n    }\r\n    printClick(e) {\r\n        this.rangeInstance.print(['rangenavigator', 'charts']);\r\n    }\r\n}\r\n\nrender(<RangeExport />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}