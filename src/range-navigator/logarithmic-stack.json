{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for Logarithmic Axis Range Navigator\r\n */\r\nimport * as React from \"react\";\r\nimport { Inject, ChartComponent, Logarithmic, StepAreaSeries, StepLineSeries, SeriesCollectionDirective, SeriesDirective, Tooltip, Crosshair, RangeNavigatorComponent, RangenavigatorSeriesCollectionDirective, RangenavigatorSeriesDirective, RangeTooltip } from '@syncfusion/ej2-react-charts';\r\nimport { Browser } from '@syncfusion/ej2-base';\r\nimport { SampleBase } from './sample-base';\r\nexport let zoomFactor;\r\nexport let zoomPosition;\r\nexport let data = [];\r\nexport let max = 100;\r\nfor (let i = 0; i < 100; i++) {\r\n    data.push({\r\n        x: Math.pow(10, i * 0.1),\r\n        y: Math.floor(Math.random() * (80 - 30 + 1)) + 30\r\n    });\r\n}\r\nexport let themes = ['Material', 'Fabric', 'Bootstrap', 'Highcontrast'];\r\nexport let borderColor = ['#00bdae', '#4472c4', '#a16ee5', '#79ECE4'];\r\nexport let regionColor = ['rgba(0, 189, 174, 0.3)', 'rgba(68, 114, 196, 0.3)',\r\n    'rgba(161, 110, 229, 0.3)', 'rgba(121, 236, 228, 0.3)'];\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px;\r\n    }\r\n    #title{\r\n        font-size: 15px;\r\n        font-style: normal;\r\n        font-family: \"Segoe UI\";\r\n        font-weight: 500;\r\n        text-anchor: middle;\r\n        transform: none;\r\n        opacity: 1;\r\n    }\r\n    #control-container {\r\n        padding: 0px !important;\r\n    }\r\n\r\n    #material-gradient-chart stop {\r\n        stop-color: #00bdae;\r\n    }\r\n\r\n    #fabric-gradient-chart stop {\r\n        stop-color: #4472c4;\r\n    }\r\n\r\n    #bootstrap-gradient-chart stop {\r\n        stop-color: #a16ee5;\r\n    }\r\n\r\n    #bootstrap4-gradient-chart stop {\r\n        stop-color: #a16ee5;\r\n    }\r\n\r\n    #highcontrast-gradient-chart stop {\r\n        stop-color: #79ECE4;\r\n    }\r\n\r\n    .chart-gradient stop[offset=\"0\"] {\r\n        stop-opacity: 0.9;\r\n    }\r\n\r\n    .chart-gradient stop[offset=\"1\"] {\r\n        stop-opacity: 0.3;\r\n    }\r\n    `;\r\nexport class LogarithmicAxis extends SampleBase {\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section'>\r\n                <div className=\"row\" style={{ textAlign: \"center\" }}>\r\n                        <div id=\"title\">Inflation vs Goods Consumers</div>\r\n                    </div>\r\n                 <div className=\"row\">\r\n                 <RangeNavigatorComponent id='rangenavigator' ref={rangenavigator => this.rangenavigator1 = rangenavigator} style={{ textAlign: \"center\" }} labelPosition='Outside' valueType='Logarithmic' tooltip={{ enable: true }} interval={1} value={[4, 6]} labelIntersectAction='None' width={Browser.isDevice ? '100%' : '80%'} load={this.rangeLoad.bind(this)} labelRender={this.renderLabel.bind(this)} tooltipRender={this.renderTooltip.bind(this)} changed={this.changed.bind(this)}>\r\n                    <Inject services={[StepLineSeries, Logarithmic, RangeTooltip]}/>\r\n                    <RangenavigatorSeriesCollectionDirective>\r\n                            <RangenavigatorSeriesDirective dataSource={data} xName='x' yName='y' type='StepLine' width={2}>\r\n                            </RangenavigatorSeriesDirective>\r\n                        </RangenavigatorSeriesCollectionDirective>\r\n                    </RangeNavigatorComponent>\r\n                    </div>\r\n                     <div className=\"row\">\r\n                    <ChartComponent id='charts' ref={chart => this.chart1 = chart} style={{ textAlign: \"center\" }} primaryXAxis={{\r\n            valueType: 'Logarithmic',\r\n            crosshairTooltip: { enable: false },\r\n            interval: 1,\r\n            edgeLabelPlacement: 'Shift',\r\n            majorGridLines: { width: 0 },\r\n            title: 'Numers of Goods Consumers'\r\n        }} primaryYAxis={{\r\n            minimum: 0, maximum: 100,\r\n            title: 'Inflation',\r\n            labelFormat: '{value}%',\r\n            majorTickLines: { width: 0 },\r\n            lineStyle: { width: 0 }\r\n        }} width={Browser.isDevice ? '100%' : '80%'} height='350' load={this.chartLoad.bind(this)} chartArea={{ border: { width: 0 } }} crosshair={{\r\n            enable: false,\r\n            lineType: 'Vertical'\r\n        }}>\r\n                        <Inject services={[StepAreaSeries, Logarithmic, Tooltip, Crosshair]}/>\r\n                        <SeriesCollectionDirective>\r\n                            <SeriesDirective dataSource={data} xName='x' yName='y' border={{ width: 2 }} type='StepArea' animation={{ enable: false }} marker={{ visible: true }} width={2}>\r\n                            </SeriesDirective>\r\n                        </SeriesCollectionDirective>\r\n                    </ChartComponent>\r\n                    </div>\r\n                    <svg style={{ height: '0' }}>\r\n                    <defs>\r\n                        <linearGradient id=\"material-gradient-chart\" style={{ opacity: 0.75 }} className=\"chart-gradient\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\r\n                            <stop offset=\"0\"></stop>\r\n                            <stop offset=\"1\"></stop>\r\n                        </linearGradient>\r\n                        <linearGradient id=\"fabric-gradient-chart\" style={{ opacity: 0.75 }} className=\"chart-gradient\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\r\n                            <stop offset=\"0\"></stop>\r\n                            <stop offset=\"1\"></stop>\r\n                        </linearGradient>\r\n                        <linearGradient id=\"bootstrap-gradient-chart\" style={{ opacity: 0.75 }} className=\"chart-gradient\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\r\n                            <stop offset=\"0\"></stop>\r\n                            <stop offset=\"1\"></stop>\r\n                        </linearGradient>\r\n                        <linearGradient id=\"bootstrap4-gradient-chart\" style={{ opacity: 0.75 }} className=\"chart-gradient\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\r\n                            <stop offset=\"0\"></stop>\r\n                            <stop offset=\"1\"></stop>\r\n                        </linearGradient>\r\n                        <linearGradient id=\"highcontrast-gradient-chart\" style={{ opacity: 0.75 }} className=\"chart-gradient\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\r\n                            <stop offset=\"0\"></stop>\r\n                            <stop offset=\"1\"></stop>\r\n                        </linearGradient>\r\n                    </defs>\r\n                </svg>\r\n            </div>\r\n        </div>);\r\n    }\r\n    changed(args) {\r\n        if (this.chart1) {\r\n            this.chart1.primaryXAxis.zoomFactor = args.zoomFactor;\r\n            this.chart1.primaryXAxis.zoomPosition = args.zoomPosition;\r\n            this.chart1.dataBind();\r\n        }\r\n        else {\r\n            zoomFactor = args.zoomFactor;\r\n            zoomPosition = args.zoomPosition;\r\n        }\r\n    }\r\n    ;\r\n    renderLabel(args) {\r\n        args.text = (+args.text).toExponential().toLocaleUpperCase();\r\n    }\r\n    ;\r\n    renderTooltip(args) {\r\n        args.text = [(+(+args.text).toFixed(1)).toExponential(1).toString().toLocaleUpperCase()];\r\n    }\r\n    ;\r\n}\r\n\nrender(<LogarithmicAxis />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}