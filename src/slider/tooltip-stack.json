{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { SliderComponent } from '@syncfusion/ej2-react-inputs';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { SampleBase } from './sample-base';\r\nimport { PropertyPane } from './property-pane';\r\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\r\nconst slidercss = `\r\n.material #property tr#showon {\r\n    display: none;\r\n}\r\n\r\n.content-wrapper {\r\n    width: 52%;\r\n    margin: 0 auto;\r\n    min-width: 185px;\r\n}\r\n\r\n.sliderwrap label {\r\n    padding-bottom: 26px;\r\n    font-size: 13px;\r\n    font-weight: 500;\r\n    margin-top: 15px;\r\n}\r\n\r\n.userselect {\r\n    -webkit-user-select: none;\r\n    /* Safari 3.1+ */\r\n    -moz-user-select: none;\r\n    /* Firefox 2+ */\r\n    -ms-user-select: none;\r\n    /* IE 10+ */\r\n    user-select: none;\r\n    /* Standard syntax */\r\n}\r\n`;\r\nexport class Tooltip extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        // Initialize tooltip with placement and showOn\r\n        this.defaultTooltip = { placement: 'Before', isVisible: true, showOn: 'Focus' };\r\n        this.rangeTooltip = { placement: 'Before', isVisible: true, showOn: 'Focus' };\r\n        //Dropdownlist datasource values for changing tooltip placement for slider component\r\n        this.option = [{ text: 'Focus', value: 'Focus' }, { text: 'Hover', value: 'Hover' }, { text: 'Auto', value: 'Auto' },\r\n            { text: 'Always', value: 'Always' }];\r\n        this.fields = { value: 'value', text: 'text' };\r\n        this.placement = [{ text: 'Before', value: 'Before' }, { text: 'After', value: 'After' }];\r\n        this.placementField = { value: 'value', text: 'text' };\r\n    }\r\n    // Handling the dropdown list change event to change slider tooltip showOn property\r\n    onChange() {\r\n        this.defaultObj.tooltip = { showOn: this.listObj.value };\r\n        this.defaultObj.dataBind();\r\n        this.rangeObj.tooltip = { showOn: this.listObj.value };\r\n        this.rangeObj.dataBind();\r\n    }\r\n    onPlacementChange() {\r\n        // Handling the dropdown list change event to change slider tooltip placement\r\n        this.defaultObj.tooltip = { placement: this.placementObj.value };\r\n        this.defaultObj.dataBind();\r\n        this.rangeObj.tooltip = { placement: this.placementObj.value };\r\n        this.rangeObj.dataBind();\r\n    }\r\n    // Handler used to reposition the tooltip on page scroll\r\n    onScroll() {\r\n        if (this.defaultObj && this.rangeObj) {\r\n            this.defaultObj.refreshTooltip(this.defaultObj.tooltipTarget);\r\n            this.rangeObj.refreshTooltip(this.rangeObj.tooltipTarget);\r\n        }\r\n    }\r\n    render() {\r\n        if (!isNullOrUndefined(document.getElementById('right-pane'))) {\r\n            document.getElementById('right-pane').addEventListener('scroll', this.onScroll.bind(this));\r\n        }\r\n        return (<div className='control-pane'>\r\n                <div className='control-section'>\r\n                    <div className='col-lg-8'>\r\n                        <div className=\"content-wrapper\">\r\n                            <style>{slidercss}</style>\r\n                            <div className='sliderwrap'>\r\n                                <label>Default Slider</label>\r\n                                \r\n                                <SliderComponent id=\"slider01\" value={30} showButtons={true} tooltip={this.defaultTooltip} ref={(slider) => { this.defaultObj = slider; }}/>\r\n                            </div>\r\n                            <div className='sliderwrap'>\r\n                                <label>Range Slider</label>\r\n                                \r\n                                <SliderComponent id=\"slider02\" value={[30, 70]} showButtons={true} type='Range' tooltip={this.rangeTooltip} ref={(slider) => { this.rangeObj = slider; }}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"#slider_event\" className='col-lg-4 property-section'>\r\n                        <PropertyPane title='Tooltip'>\r\n                            <table id=\"property\" title=\"Tooltip\" className='property-panel-table' style={{ width: '100%' }}>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td style={{ width: '50%' }}>\r\n                                            <div>Placement</div>\r\n                                        </td>\r\n                                        <td style={{ width: '50%', paddingRight: '10px' }}>\r\n                                            <div>\r\n                                                \r\n                                                <DropDownListComponent dataSource={this.placement} fields={this.placementField} index={0} placeholder=\"Select a Placement\" popupHeight=\"200px\" ref={(dropdownlist) => { this.placementObj = dropdownlist; }} change={this.onPlacementChange.bind(this)}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr id=\"showon\">\r\n                                        <td style={{ width: '50%' }}>\r\n                                            <div>ShowOn</div>\r\n                                        </td>\r\n                                        <td style={{ width: '50%', paddingRight: '10px' }}>\r\n                                            <div>\r\n                                                \r\n                                                <DropDownListComponent dataSource={this.option} fields={this.fields} index={0} placeholder=\"Select a ShowOn\" popupHeight=\"200px\" ref={(dropdownlist) => { this.listObj = dropdownlist; }} change={this.onChange.bind(this)}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<Tooltip />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}