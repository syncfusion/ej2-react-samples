{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { SliderComponent } from '@syncfusion/ej2-react-inputs';\r\nimport { SampleBase } from './sample-base';\r\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\r\nconst slidercss = `\r\n.content-wrapper {\r\n    width: 40%;\r\n    margin: 0 auto;\r\n    min-width: 185px;\r\n}\r\n\r\n.sliderwrap {\r\n    margin-top: 40px;\r\n}\r\n.e-bigger .content-wrapper {\r\n    width: 80%;\r\n}\r\n.sliderwrap label {\r\n    padding-bottom: 26px;\r\n    font-size: 13px;\r\n    font-weight: 500;\r\n    margin-top: 15px;\r\n    text-align: left;\r\n    width: 100%;\r\n}\r\n`;\r\nexport class Format extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.currencyTicks = {\r\n            placement: 'After', largeStep: 25, smallStep: 5, showSmallTicks: true,\r\n            // Formatting ticks value in currency with 3-decimal specifier.\r\n            format: 'c1'\r\n        };\r\n        this.currencyTooltip = {\r\n            placement: 'Before', isVisible: true,\r\n            // Formatting tooltip value in currency with 2-decimal specifier.\r\n            format: 'c2'\r\n        };\r\n        this.kilometerTicks = {\r\n            placement: 'After',\r\n            largeStep: 400,\r\n            smallStep: 200,\r\n            showSmallTicks: true,\r\n            /**\r\n             * Formatting ticks value in numeric with 2-decimal specifier if the any decimal values occurred.\r\n             * Zeros will be filled if the values are not in 4-digits in the fractional part.\r\n             */\r\n            format: '00##.## km'\r\n        };\r\n        this.kilometerTooltip = {\r\n            placement: 'Before',\r\n            isVisible: true,\r\n            /**\r\n             * Formatting tooltip value in numeric with 2-decimal specifier if the any decimal values occurred.\r\n             * Zeros will be filled if the values are not in 4-digits in the fractional part.\r\n             */\r\n            format: '00##.## km'\r\n        };\r\n        this.minValue = new Date(2013, 6, 13, 11).getTime();\r\n        this.maxValue = new Date(2013, 6, 13, 23).getTime();\r\n        // 3600000 milliseconds = 1 Hour, 3600000 / 6 milliseconds = 10 Minutes\r\n        this.stepValue = 3600000 / 6;\r\n        this.value = [new Date(2013, 6, 13, 12).getTime(), new Date(2013, 6, 13, 18).getTime()];\r\n        this.timeTooltip = {\r\n            placement: 'Before', isVisible: true\r\n        };\r\n        this.timeTicks = {\r\n            placement: 'After',\r\n            // 3 * 3600000 milliseconds = 3 Hour\r\n            largeStep: 3 * 3600000,\r\n            smallStep: 3600000, showSmallTicks: true\r\n        };\r\n    }\r\n    tooltipChangeHandler(args) {\r\n        // Splitting the range values from the tooltip using space into an array.\r\n        let totalMiliSeconds = args.text.split(' ');\r\n        // First part is the first handle value\r\n        let firstPart = totalMiliSeconds[0];\r\n        // Second part is the second handle value\r\n        let secondPart = totalMiliSeconds[2];\r\n        /**\r\n         * toLocaleTimeString is predefined javascript date function, which is used to\r\n         * customize the date in different format\r\n         */\r\n        let custom = { hour: '2-digit', minute: '2-digit' };\r\n        firstPart = new Date(Number(firstPart)).toLocaleTimeString('en-us', custom);\r\n        secondPart = new Date(Number(secondPart)).toLocaleTimeString('en-us', custom);\r\n        // Assigning our custom text to the tooltip value.\r\n        args.text = firstPart + ' - ' + secondPart;\r\n    }\r\n    renderingTicksHandler(args) {\r\n        let totalMiliSeconds = Number(args.value);\r\n        /**\r\n         * toLocaleTimeString is predefined javascript date function, which is used to\r\n         * customize the date in different format\r\n         */\r\n        let custom = { hour: '2-digit', minute: '2-digit' };\r\n        // Assigning our custom text to the tick value.\r\n        args.text = new Date(totalMiliSeconds).toLocaleTimeString('en-us', custom);\r\n    }\r\n    // Handler used to reposition the tooltip on page scroll\r\n    onScroll() {\r\n        if (this.currencyObj && this.kilometerObj && this.timeObj) {\r\n            for (let slider of [this.currencyObj, this.kilometerObj, this.timeObj]) {\r\n                slider.refreshTooltip(slider.tooltipTarget);\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        if (!isNullOrUndefined(document.getElementById('right-pane'))) {\r\n            document.getElementById('right-pane').addEventListener('scroll', this.onScroll.bind(this));\r\n        }\r\n        return (<div>\r\n                <div className=\"col-lg-12 control-section\">\r\n                    <div className=\"content-wrapper\">\r\n                        <style>{slidercss}</style>\r\n                        <div className='sliderwrap'>\r\n                            <label>Currency Slider</label>\r\n                            \r\n                            <SliderComponent id=\"slider01\" value={[20, 80]} min={0} max={100} ticks={this.currencyTicks} tooltip={this.currencyTooltip} type='Range' ref={(slider) => { this.currencyObj = slider; }}/>\r\n                        </div>\r\n                        <div className='sliderwrap'>\r\n                            <label>Kilometer Slider</label>\r\n                            \r\n                            <SliderComponent id=\"slider02\" value={[1100, 1850]} min={900} max={2100} ticks={this.kilometerTicks} type='Range' tooltip={this.kilometerTooltip} ref={(slider) => { this.kilometerObj = slider; }}/>\r\n                        </div>\r\n                        <div className='sliderwrap'>\r\n                            <label>Time Slider</label>\r\n                            \r\n                            <SliderComponent id=\"slider03\" value={this.value} min={this.minValue} max={this.maxValue} ticks={this.timeTicks} type='Range' step={this.stepValue} tooltip={this.timeTooltip} tooltipChange={this.tooltipChangeHandler.bind(this)} renderingTicks={this.renderingTicksHandler.bind(this)} ref={(slider) => { this.timeObj = slider; }}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<Format />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}