{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { SliderComponent } from '@syncfusion/ej2-react-inputs';\r\nimport { SampleBase } from './sample-base';\r\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\r\nconst slidercss = `\r\n.sliderwrap .label-text {\r\n    font-weight: 500;\r\n}\r\n\r\n.content-wrapper {\r\n    width: 80%;\r\n    margin: 0 auto;\r\n    min-width: 185px;\r\n}\r\n\r\n.sliderwrap {\r\n    margin-top: 40px;\r\n}\r\n\r\n#slider01 .e-handle,\r\n#out .e-handle,\r\n.bootstrap #out .e-handle,\r\n.bootstrap #slider01 .e-handle,\r\n.fabric #out .e-handle,\r\n.fabric #slider01 .e-handle,\r\n.highcontrast #out .e-handle,\r\n.highcontrast #slider01 .e-handle {\r\n    background-color: #ffd939;\r\n    border-color: #ffd939;\r\n    z-index: 1;\r\n}\r\n\r\n.e-bigger .content-wrapper {\r\n    width: 80%;\r\n}\r\n\r\n.sliderwrap label {\r\n    padding-bottom: 26px;\r\n    font-size: 13px;\r\n    font-weight: 500;\r\n    margin-top: 15px;\r\n}\r\n\r\n.userselect {\r\n    -webkit-user-select: none;\r\n    /* Safari 3.1+ */\r\n    -moz-user-select: none;\r\n    /* Firefox 2+ */\r\n    -ms-user-select: none;\r\n    /* IE 10+ */\r\n    user-select: none;\r\n    /* Standard syntax */\r\n}\r\n\r\n\r\n\r\n.e-slider-tooltip.e-tooltip-wrap.e-popup.e-slider-tooltip .e-tip-content,\r\n.e-slider-tooltip.e-tooltip-wrap.e-popup.e-material-range .e-tip-content.e-material-tooltip-show {\r\n    color: #333;\r\n}\r\n\r\n.e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup .e-arrow-tip-inner{\r\n    color: #ffd939;\r\n}\r\n\r\n.e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup .e-arrow-tip-outer {\r\n    border-top-color: #ffd939;\r\n}\r\n\r\n.e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup .e-arrow-tip-outer {\r\n    border-bottom-color: #ffd939;\r\n}\r\n\r\n.e-slider-container .e-slider#slider01 .e-range,\r\n.e-slider-container .e-slider#out .e-range {\r\n    background-color: #0375be;\r\n    z-index: unset;\r\n}\r\n.e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup.e-material-default.e-slider-horizontal-after,\r\n.e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup.e-material-default.e-slider-horizontal-before,\r\n.e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup {\r\n    background-color: #ffd939;\r\n    border-color: #ffd939;\r\n}\r\n\r\n.bootstrap .e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup .e-arrow-tip-outer {\r\n    border-top-color: #ffd939;\r\n}\r\n\r\n.bootstrap .e-tooltip-cutomization.e-slider-tooltip.e-tooltip-wrap.e-popup .e-arrow-tip-inner {\r\n    color: #ffd939;\r\n}\r\n\r\n`;\r\nexport class TooltipCustomization extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        // Set slider minimum and maximum values\r\n        // new Date(Year, Month, day, hours, minutes, seconds, millseconds)\r\n        this.min = new Date(2013, 6, 13, 11).getTime();\r\n        this.sliderMin = new Date(2013, 6, 13, 11).getTime();\r\n        this.sliderMax = new Date(2013, 6, 13, 23).getTime();\r\n        this.max = new Date(2013, 6, 13, 23).getTime();\r\n        // Initialize ticks with placement, largestep, smallste\r\n        this.value = [new Date(2013, 6, 13, 12).getTime(), new Date(2013, 6, 13, 18).getTime()];\r\n        this.sliderValue = new Date(2013, 6, 13, 17).getTime();\r\n        this.ticks = {\r\n            placement: 'After',\r\n            // 3 * 3600000 milliseconds = 3 Hour\r\n            largeStep: 3 * 3600000,\r\n            smallStep: 3600000, showSmallTicks: true\r\n        };\r\n        // Initialize tooltip with placement\r\n        this.tooltip = {\r\n            placement: 'Before', isVisible: true, cssClass: 'e-tooltip-cutomization'\r\n        };\r\n        this.sliderTooltip = {\r\n            placement: 'Before', isVisible: true, cssClass: 'e-tooltip-cutomization'\r\n        };\r\n        this.sliderTicks = {\r\n            placement: 'After',\r\n            // 3 * 3600000 milliseconds = 3 Hour\r\n            largeStep: 3 * 3600000,\r\n            smallStep: 3600000, showSmallTicks: true\r\n        };\r\n    }\r\n    tooltipChangeHandler(args) {\r\n        /**\r\n         * toLocaleTimeString is predefined javascript date function, which is used to\r\n         * customize the date in different format\r\n         */\r\n        let custom = { hour: '2-digit', minute: '2-digit' };\r\n        // Splitting the range values from the tooltip using space into an array.\r\n        if (args.text.indexOf('-') !== -1) {\r\n            let totalMiliSeconds = args.text.split(' ');\r\n            // First part is the first handle value\r\n            let firstPart = totalMiliSeconds[0];\r\n            // Second part is the second handle value\r\n            let secondPart = totalMiliSeconds[2];\r\n            firstPart = new Date(Number(firstPart)).toLocaleTimeString('en-us', custom);\r\n            secondPart = new Date(Number(secondPart)).toLocaleTimeString('en-us', custom);\r\n            // Assigning our custom text to the tooltip value.\r\n            args.text = firstPart + ' - ' + secondPart;\r\n        }\r\n        else {\r\n            args.text = 'Until ' + new Date(Number(args.text)).toLocaleTimeString('en-us', custom);\r\n        }\r\n    }\r\n    onRenderingTicks(args) {\r\n        let totalMiliSeconds = Number(args.value);\r\n        /**\r\n         * toLocaleTimeString is predefined javascript date function, which is used to\r\n         * customize the date in different format\r\n         */\r\n        let custom = { hour: '2-digit', minute: '2-digit' };\r\n        // Assigning our custom text to the tick value.\r\n        args.text = new Date(totalMiliSeconds).toLocaleTimeString('en-us', custom);\r\n    }\r\n    // Handler used to reposition the tooltip on page scroll\r\n    onScroll() {\r\n        if (this.sliderObj && this.timeObj) {\r\n            this.timeObj.refreshTooltip(this.timeObj.tooltipTarget);\r\n            this.sliderObj.refreshTooltip(this.sliderObj.tooltipTarget);\r\n        }\r\n    }\r\n    render() {\r\n        if (!isNullOrUndefined(document.getElementById('right-pane'))) {\r\n            document.getElementById('right-pane').addEventListener('scroll', this.onScroll.bind(this));\r\n        }\r\n        return (<div className='control-pane'>\r\n                <style>{slidercss}</style>\r\n                <div className='col-lg-12-control-section'>\r\n                    <div className=\"content-wrapper\">\r\n                        <div className=\"sliderwrap\">\r\n                            <label className=\"labeltext userselect\">\r\n                                <span className=\"label-text\">Background color</span>\r\n                            </label>\r\n\r\n                            <SliderComponent id=\"slider01\" value={this.value} min={this.min} max={this.max} step={3600000 / 6} ticks={this.ticks} type=\"Range\" tooltip={this.tooltip} tooltipChange={this.tooltipChangeHandler.bind(this)} ref={(slider) => { this.timeObj = slider; }} renderingTicks={this.onRenderingTicks.bind(this)}/>\r\n                        </div>\r\n                        <div className=\"sliderwrap\">\r\n                            <label className=\"labeltext userselect\">\r\n                                <span className=\"label-text\">Color and text</span>\r\n                            </label>\r\n                            \r\n                            <SliderComponent id=\"out\" value={new Date(2013, 6, 13, 17).getTime()} min={this.sliderMin} max={this.sliderMax} step={3600000 / 6} ticks={this.sliderTicks} type=\"MinRange\" tooltip={this.sliderTooltip} tooltipChange={this.tooltipChangeHandler.bind(this)} ref={(slider) => { this.sliderObj = slider; }} renderingTicks={this.onRenderingTicks.bind(this)}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<TooltipCustomization />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}