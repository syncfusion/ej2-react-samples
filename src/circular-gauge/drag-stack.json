{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for Pointer drag\r\n */\r\nimport * as React from 'react';\r\nimport { PropertyPane } from './property-pane';\r\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, Inject, AnnotationsDirective, AnnotationDirective, PointersDirective, PointerDirective, RangesDirective, RangeDirective, Annotations, } from '@syncfusion/ej2-react-circulargauge';\r\nimport { SampleBase } from './sample-base';\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }`;\r\nexport class Drag extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.content = '<div style=\"font-size: 14px;color:#E5C31C;font-weight: lighter;font-style: oblique;\"><span>';\r\n    }\r\n    dragChange() {\r\n        let pointerValue = +this.drag.value;\r\n        document.getElementById('pointerValue').innerHTML = 'Pointer Value <span> &nbsp;&nbsp;&nbsp;' + Math.round(pointerValue);\r\n        this.setPointersValue(this.gauge, pointerValue);\r\n    }\r\n    pointerDragChange() {\r\n        let value = this.pointerDrag.checked;\r\n        this.gauge.enablePointerDrag = value;\r\n    }\r\n    setPointersValue(circulargauge, pointerValue) {\r\n        let color;\r\n        if (pointerValue >= 0 && pointerValue <= 40) {\r\n            color = '#30B32D';\r\n        }\r\n        else if (pointerValue >= 40 && pointerValue <= 100) {\r\n            color = '#E5C31C';\r\n        }\r\n        else {\r\n            color = '#F03E3E';\r\n        }\r\n        circulargauge.axes[0].pointers[0].color = color;\r\n        circulargauge.axes[0].pointers[1].color = color;\r\n        circulargauge.axes[0].pointers[0].animation.enable = true;\r\n        circulargauge.axes[0].pointers[1].animation.enable = true;\r\n        circulargauge.axes[0].pointers[0].needleTail.color = color;\r\n        circulargauge.axes[0].pointers[1].needleTail.color = color;\r\n        circulargauge.axes[0].pointers[0].cap.border.color = color;\r\n        circulargauge.axes[0].pointers[1].cap.border.color = color;\r\n        circulargauge.setPointerValue(0, 1, pointerValue);\r\n        circulargauge.setPointerValue(0, 0, pointerValue);\r\n        this.content = '<div style=\"font-size: 14px;color:' + color + ';font-weight: lighter;font-style: oblique;\"><span>';\r\n        circulargauge.setAnnotationValue(0, 0, this.content + pointerValue + ' MPH</span></div>');\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className='control-section row'>\r\n                    <div className='col-lg-9'>\r\n                        <CircularGaugeComponent load={this.load.bind(this)} loaded={this.onChartLoad.bind(this)} dragMove={this.dragMove.bind(this)} dragEnd={this.dragEnd.bind(this)} id='drag-container' ref={gauge => this.gauge = gauge} enablePointerDrag={true}>\r\n                            <Inject services={[Annotations]}/>\r\n                            <AxesDirective>\r\n                                <AxisDirective startAngle={210} endAngle={140} radius='80%' minimum={0} maximum={120} majorTicks={{\r\n            useRangeColor: true\r\n        }} lineStyle={{ width: 0, color: '#9E9E9E' }} minorTicks={{\r\n            useRangeColor: true\r\n        }} labelStyle={{\r\n            useRangeColor: true\r\n        }}>\r\n                                    <AnnotationsDirective>\r\n                                        <AnnotationDirective content='<div style=\"font-size: 14px;color:#FFDD00;font-weight: lighter;font-style: oblique;\"><span>70 MPH</span></div>' angle={180} radius='45%' zIndex='1'>\r\n                                        </AnnotationDirective>\r\n                                    </AnnotationsDirective>\r\n                                    <PointersDirective>\r\n                                        <PointerDirective value={70} type=\"Marker\" markerShape='InvertedTriangle' radius='110%' markerHeight={20} color='#E5C31C' markerWidth={20}/>\r\n                                        <PointerDirective value={70} radius='60%' cap={{\r\n            radius: 10, border: { width: 5, color: '#E5C31C' }\r\n        }} needleTail={{\r\n            length: '0%', color: '#E5C31C'\r\n        }} color='#E5C31C'/>\r\n                                    </PointersDirective>\r\n                                    <RangesDirective>\r\n                                        <RangeDirective start={0} end={40} radius='108%' color='#30B32D' startWidth={8} endWidth={8}/>\r\n                                        <RangeDirective start={40} end={100} radius='108%' color='#FFDD00' startWidth={8} endWidth={8}/>\r\n                                        <RangeDirective start={100} end={120} radius='108%' color='#F03E3E' startWidth={8} endWidth={8}/>\r\n                                    </RangesDirective>\r\n                                </AxisDirective>\r\n                            </AxesDirective>\r\n                        </CircularGaugeComponent>\r\n                    </div>\r\n                    \r\n                    <div className='col-lg-3 property-section'>\r\n                        <PropertyPane title='Properties'>\r\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                                <tbody>\r\n                                    <tr style={{ height: \"50px\" }}>\r\n                                        <td style={{ width: \"30%\" }}>\r\n                                            <div id='pointerValue'>Pointer Value <span> &nbsp;&nbsp;&nbsp;70</span> </div>\r\n                                        </td>\r\n                                        <td style={{ width: \"40%\" }}>\r\n                                            <div>\r\n                                                <input type=\"range\" id=\"value\" onChange={this.dragChange.bind(this)} ref={d => this.drag = d} defaultValue=\"70\" min=\"0\" max=\"120\" style={{ width: \"90%\" }}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr style={{ height: \"50px\" }}>\r\n                                        <td style={{ width: \"20%\" }}>\r\n                                            <div id='enablePointer'>Enable Drag</div>\r\n                                        </td>\r\n                                        <td style={{ width: \"40%\" }}>\r\n                                            <div>\r\n                                                <input type=\"checkbox\" onChange={this.pointerDragChange.bind(this)} ref={d => this.pointerDrag = d} id=\"enable\" defaultChecked={true} style={{ width: \"90%\" }}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n    // Code for Property Panel\r\n    onChartLoad(args) {\r\n        document.getElementById('drag-container').setAttribute('title', '');\r\n    }\r\n    ;\r\n    dragMove(args) {\r\n        document.getElementById('pointerValue').innerHTML = 'Pointer Value <span> &nbsp;&nbsp;&nbsp;' + Math.round(args.currentValue);\r\n        this.drag.value = Math.round(args.currentValue).toString();\r\n        this.gauge.setAnnotationValue(0, 0, this.content + Math.round(args.currentValue) + ' MPH</span></div > ');\r\n    }\r\n    ;\r\n    dragEnd(args) {\r\n        this.setPointersValue(this.gauge, Math.round(args.currentValue));\r\n    }\r\n    ;\r\n}\r\n\nrender(<Drag />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}