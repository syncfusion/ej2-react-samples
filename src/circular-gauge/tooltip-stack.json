{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for tooltip\r\n */\r\nimport * as React from 'react';\r\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, Inject, PointersDirective, PointerDirective, RangesDirective, RangeDirective, GaugeTooltip, } from '@syncfusion/ej2-react-circulargauge';\r\nimport { SampleBase } from './sample-base';\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }\r\n    #templateWrap img {\r\n        border-radius: 30px;\r\n        width: 30px;\r\n        height: 30px;\r\n        margin: 0 auto;\r\n    }\r\n\t #templateWrap {\r\n        background: #fff;\r\n        padding: 3px;\r\n        border-radius: 2px;\r\n    }\r\n    #templateWrap .des {\r\n        float: right;\r\n        padding-left: 10px;\r\n        line-height: 30px;\r\n    }`;\r\nexport class Tooltip extends SampleBase {\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section row'>\r\n                    <div className='col-lg-12'>\r\n                        <CircularGaugeComponent title='Tooltip Customization' loaded={this.onChartLoad.bind(this)} tooltipRender={this.tooltipRender.bind(this)} dragEnd={this.dragEnd.bind(this)} id='tooltip-container' ref={gauge => this.gauge = gauge} enablePointerDrag={true} load={this.load.bind(this)} titleStyle={{ size: '15px', color: 'grey' }} tooltip={{\r\n            enable: true,\r\n            type: ['Range', 'Pointer'],\r\n            enableAnimation: false\r\n        }}>\r\n                            <Inject services={[GaugeTooltip]}/>\r\n                            <AxesDirective>\r\n                                <AxisDirective startAngle={240} endAngle={120} radius='90%' minimum={0} maximum={120} majorTicks={{\r\n            color: 'white', offset: -5, height: 12\r\n        }} lineStyle={{ width: 0 }} minorTicks={{\r\n            width: 0\r\n        }} labelStyle={{\r\n            useRangeColor: true, font: { color: '#424242', size: '13px', fontFamily: 'Roboto' }\r\n        }}>\r\n                                    <PointersDirective>\r\n                                        <PointerDirective value={70} radius='60%' cap={{\r\n            radius: 10, border: { color: '#33BCBD', width: 5 }\r\n        }} animation={{\r\n            enable: true, duration: 1500\r\n        }} color='#33BCBD'/>\r\n                                    </PointersDirective>\r\n                                    <RangesDirective>\r\n                                        <RangeDirective start={0} end={50} radius='102%' color='#3A5DC8' startWidth={10} endWidth={10}/>\r\n                                        <RangeDirective start={50} end={120} radius='102%' color='#33BCBD' startWidth={10} endWidth={10}/>\r\n                                    </RangesDirective>\r\n                                </AxisDirective>\r\n                            </AxesDirective>\r\n                        </CircularGaugeComponent>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n    onChartLoad(args) {\r\n        document.getElementById('tooltip-container').setAttribute('title', '');\r\n    }\r\n    ;\r\n    tooltipRender(args) {\r\n        let imageName;\r\n        let borderColor;\r\n        let textColor;\r\n        if (args.pointer) {\r\n            imageName = ((args.pointer.currentValue >= 0 && args.pointer.currentValue <= 50) ? 'min' : 'max');\r\n            borderColor = ((args.pointer.currentValue >= 0 && args.pointer.currentValue <= 50) ? '#3A5DC8' : '#33BCBD');\r\n            textColor = this.gauge.theme.toLowerCase() === 'highcontrast' ? 'White' : borderColor;\r\n            if (this.gauge.theme.toLowerCase() === 'highcontrast') {\r\n                args.tooltip.template = '<div id=\"templateWrap\" style=\"border:2px solid ' + borderColor +\r\n                    ';background-color:black\"><img src=\"////npmci.syncfusion.com/development/react/demos/src/circular-gauge/images/' + imageName + '.png\"/><div class=\"des\" style=\"color: ' +\r\n                    textColor + '\"><span>${value} MPH</span></div></div>';\r\n            }\r\n            else {\r\n                args.tooltip.template = '<div id=\"templateWrap\" style=\"border:2px solid ' + borderColor +\r\n                    '\"><img src=\"////npmci.syncfusion.com/development/react/demos/src/circular-gauge/images/' + imageName + '.png\"/><div class=\"des\" style=\"color: ' +\r\n                    borderColor + '\"><span>${value} MPH</span></div></div>';\r\n            }\r\n        }\r\n        else if (args.range) {\r\n            imageName = ((args.range.start >= 0 && args.range.end <= 50)) ? 'min' : 'max';\r\n            borderColor = ((args.range.start >= 0 && args.range.end <= 50)) ? '#3A5DC8' : '#33BCBD';\r\n            textColor = this.gauge.theme.toLowerCase() === 'highcontrast' ? 'White' : borderColor;\r\n            let start = args.range.start;\r\n            let end = args.range.end;\r\n            if (this.gauge.theme.toLowerCase() === 'highcontrast') {\r\n                args.tooltip.rangeSettings.template = '<div id=templateWrap style=\"padding:5px;border:2px solid' + borderColor + ';color: ' +\r\n                    textColor + ';background-color:black\"><img src=\"////npmci.syncfusion.com/development/react/demos/src/circular-gauge/images/' + imageName +\r\n                    '.png\"/> <span>' + start + ' - ' + end + ' MPH  </span> </div>';\r\n            }\r\n            else {\r\n                args.tooltip.rangeSettings.template = '<div id=templateWrap style=\"padding:5px;border:2px solid' + borderColor + ';color: ' +\r\n                    borderColor + '\"><img src=\"////npmci.syncfusion.com/development/react/demos/src/circular-gauge/images/' + imageName +\r\n                    '.png\"/> <span>' + start + ' - ' + end + ' MPH  </span> </div>';\r\n            }\r\n        }\r\n    }\r\n    ;\r\n    dragEnd(args) {\r\n        if (args.currentValue >= 0 && args.currentValue <= 50) {\r\n            args.pointer.color = \"#3A5DC8\";\r\n            args.pointer.cap.border.color = \"#3A5DC8\";\r\n        }\r\n        else {\r\n            args.pointer.color = \"#33BCBD\";\r\n            args.pointer.cap.border.color = \"#33BCBD\";\r\n        }\r\n        args.pointer.value = args.currentValue;\r\n        args.pointer.animation.enable = false;\r\n        this.gauge.refresh();\r\n    }\r\n    ;\r\n}\r\n\nrender(<Tooltip />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}