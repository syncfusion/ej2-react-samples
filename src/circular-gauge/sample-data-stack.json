{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for data sample\r\n */\r\nimport * as React from \"react\";\r\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, Inject, PointersDirective, PointerDirective, RangesDirective, RangeDirective, Annotations, AnnotationDirective, AnnotationsDirective, } from '@syncfusion/ej2-react-circulargauge';\r\nimport { GridComponent, ColumnsDirective, ColumnDirective } from '@syncfusion/ej2-react-grids';\r\nimport { SampleBase } from './sample-base';\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }\r\n    .imageStyle {\r\n        width: 16px;\r\n        height: 16px;\r\n        margin-top: 4px;\r\n    }\r\n        \r\n    .fontDes {\r\n        float: right;\r\n        padding-left: 5px;\r\n        color:#424242;\r\n        font-size:20px;\r\n        font-family:Roboto\";\r\n    }\r\n    .fontDes1 {\r\n        color:#9E9E9E;\r\n        font-size:16px;\r\n        font-family:Roboto\";\r\n    }\r\n    `;\r\nexport class SampleData extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.orderData = [\r\n            {\r\n                'Country': 'Germany',\r\n                'Sales': 500,\r\n                'Target': 400,\r\n                'vsTarget': 300\r\n            }, {\r\n                'Country': 'USA',\r\n                'Sales': 1000,\r\n                'Target': 600,\r\n                'vsTarget': 360\r\n            }, {\r\n                'Country': 'UK',\r\n                'Sales': 600,\r\n                'Target': 700,\r\n                'vsTarget': -100\r\n            }\r\n        ];\r\n    }\r\n    onChartLoad(args) {\r\n        this.dataInterval1 = setInterval(() => {\r\n            let value1 = Math.round(Math.random() * (90 - 55) + 55);\r\n            let value2 = Math.round(Math.random() * (75 - 60) + 60);\r\n            let value3 = Math.round(Math.random() * (40 - 10) + 10);\r\n            let gridData1 = 4 * value1;\r\n            let gridData2 = 6 * value2;\r\n            let gridData3 = 7 * value3;\r\n            let newVal = Math.random() * (90 - 20) + 20;\r\n            if (document.getElementById('sample1-container')) {\r\n                this.sampleGauge1.axes[0].pointers[0].animation.enable = true;\r\n                this.sampleGauge2.axes[0].pointers[0].animation.enable = true;\r\n                this.sampleGauge3.axes[0].pointers[0].animation.enable = true;\r\n                this.sampleGauge1.setPointerValue(0, 0, value1);\r\n                this.sampleGauge2.setPointerValue(0, 0, value2);\r\n                this.sampleGauge3.setPointerValue(0, 0, value3);\r\n                this.sampleGauge1.setAnnotationValue(0, 0, this.sampleGauge1.axes[0].annotations[0].content);\r\n                this.sampleGauge2.setAnnotationValue(0, 0, this.sampleGauge2.axes[0].annotations[0].content);\r\n                this.sampleGauge3.setAnnotationValue(0, 0, this.sampleGauge3.axes[0].annotations[0].content);\r\n                this.orderData = [\r\n                    {\r\n                        'Country': 'Germany',\r\n                        'Sales': 500,\r\n                        'Target': 400,\r\n                        'vsTarget': gridData1\r\n                    }, {\r\n                        'Country': 'USA',\r\n                        'Sales': 1000,\r\n                        'Target': 600,\r\n                        'vsTarget': gridData2\r\n                    }, {\r\n                        'Country': 'UK',\r\n                        'Sales': 600,\r\n                        'Target': 700,\r\n                        'vsTarget': -gridData3\r\n                    }\r\n                ];\r\n            }\r\n            else {\r\n                clearInterval(+this.dataInterval1);\r\n            }\r\n        }, 2000);\r\n    }\r\n    ;\r\n    onGridLoad(args) {\r\n        this.dataInterval2 = setInterval(() => {\r\n            if (document.getElementById('sample1-container')) {\r\n                this.grid1.dataSource = this.orderData;\r\n                this.grid1.refresh();\r\n            }\r\n            else {\r\n                clearInterval(+this.dataInterval2);\r\n            }\r\n        }, 2000);\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section'>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-12\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-4\">\r\n                                    <CircularGaugeComponent load={this.load.bind(this)} style={{ height: \"250px\" }} ref={gauge => this.sampleGauge1 = gauge} id='sample1-container'>\r\n                                        <Inject services={[Annotations]}/>\r\n                                        <AxesDirective>\r\n                                            <AxisDirective startAngle={230} endAngle={130} minimum={0} maximum={100} lineStyle={{\r\n            width: 0\r\n        }} majorTicks={{\r\n            width: 0\r\n        }} minorTicks={{\r\n            width: 0\r\n        }} labelStyle={{\r\n            font: { size: '0' }\r\n        }}>\r\n                                                <AnnotationsDirective>\r\n                                                    <AnnotationDirective content='<div id=\"templateWrap\"><img class=\"imageStyle\" src=\"////npmci.syncfusion.com/development/react/demos/src/circular-gauge/images/positive.png\" alt=\"Positive value for Germany\"/><div class=\"fontDes\">${pointers[0].value}%</div></div></div>' angle={180} zIndex='1' radius='30%'/>\r\n                                                    <AnnotationDirective content='<div class=\"fontDes1\">Germany</div>' angle={180} zIndex='1' radius='65%'/>\r\n                                                </AnnotationsDirective>\r\n                                                <RangesDirective>\r\n                                                    <RangeDirective start={0} end={50} startWidth={15} endWidth={15} color='#EC121C'/>\r\n                                                    <RangeDirective start={50} end={100} startWidth={15} endWidth={15} color='#45EA0C'/>\r\n                                                </RangesDirective>\r\n                                                <PointersDirective>\r\n                                                    <PointerDirective value={75} radius='60%' animation={{ enable: false }} color='#777777' pointerWidth={5} cap={{\r\n            radius: 6,\r\n            border: { width: 0 },\r\n            color: '#777777'\r\n        }} needleTail={{\r\n            length: '25%',\r\n            color: '#777777'\r\n        }}>\r\n                                                    </PointerDirective>\r\n                                                </PointersDirective>\r\n                                            </AxisDirective>\r\n                                        </AxesDirective>\r\n                                    </CircularGaugeComponent>\r\n                                </div>\r\n                                <div className=\"col-sm-4\">\r\n                                    <CircularGaugeComponent load={this.load.bind(this)} style={{ height: \"250px\" }} ref={gauge => this.sampleGauge2 = gauge} id='sample2-container'>\r\n                                        <Inject services={[Annotations]}/>\r\n                                        <AxesDirective>\r\n                                            <AxisDirective startAngle={230} endAngle={130} minimum={0} maximum={100} lineStyle={{\r\n            width: 0\r\n        }} majorTicks={{\r\n            width: 0\r\n        }} minorTicks={{\r\n            width: 0\r\n        }} labelStyle={{\r\n            font: { size: '0' }\r\n        }}>\r\n                                                <AnnotationsDirective>\r\n                                                    <AnnotationDirective content='<div id=\"templateWrap\"><img class=\"imageStyle\" src=\"////npmci.syncfusion.com/development/react/demos/src/circular-gauge/images/positive.png\" alt=\"Positive value for USA\" /><div class=\"fontDes\">${pointers[0].value}%</div></div></div>' angle={180} zIndex='1' radius='30%'/>\r\n                                                    <AnnotationDirective content='<div class=\"fontDes1\">USA</div>' angle={180} zIndex='1' radius='65%'/>\r\n                                                </AnnotationsDirective>\r\n                                                <RangesDirective>\r\n                                                    <RangeDirective start={0} end={50} startWidth={15} endWidth={15} color='#EC121C'/>\r\n                                                    <RangeDirective start={50} end={100} startWidth={15} endWidth={15} color='#45EA0C'/>\r\n                                                </RangesDirective>\r\n                                                <PointersDirective>\r\n                                                    <PointerDirective value={60} radius='60%' animation={{ enable: false }} color='#777777' pointerWidth={5} cap={{\r\n            radius: 6,\r\n            border: { width: 0 },\r\n            color: '#777777'\r\n        }} needleTail={{\r\n            length: '25%',\r\n            color: '#777777'\r\n        }}>\r\n                                                    </PointerDirective>\r\n                                                </PointersDirective>\r\n                                            </AxisDirective>\r\n                                        </AxesDirective>\r\n                                    </CircularGaugeComponent>\r\n                                </div>\r\n                                <div className=\"col-sm-4\">\r\n                                    <CircularGaugeComponent load={this.load.bind(this)} style={{ height: \"250px\" }} ref={gauge => this.sampleGauge3 = gauge} loaded={this.onChartLoad.bind(this)} id='sample3-container'>\r\n                                        <Inject services={[Annotations]}/>\r\n                                        <AxesDirective>\r\n                                            <AxisDirective startAngle={230} endAngle={130} minimum={0} maximum={100} lineStyle={{\r\n            width: 0\r\n        }} majorTicks={{\r\n            width: 0\r\n        }} minorTicks={{\r\n            width: 0\r\n        }} labelStyle={{\r\n            font: { size: '0' }\r\n        }}>\r\n                                                <AnnotationsDirective>\r\n                                                    <AnnotationDirective content='<div id=\"templateWrap\"><img class=\"imageStyle\" src=\"////npmci.syncfusion.com/development/react/demos/src/circular-gauge/images/negative.png\" alt=\"Negative value for UK\" /><div class=\"fontDes\">${pointers[0].value}%</div></div></div>' angle={180} zIndex='1' radius='30%'/>\r\n                                                    <AnnotationDirective content='<div class=\"fontDes1\">UK</div>' angle={180} zIndex='1' radius='65%'/>\r\n                                                </AnnotationsDirective>\r\n                                                <RangesDirective>\r\n                                                    <RangeDirective start={0} end={50} startWidth={15} endWidth={15} color='#EC121C'/>\r\n                                                    <RangeDirective start={50} end={100} startWidth={15} endWidth={15} color='#45EA0C'/>\r\n                                                </RangesDirective>\r\n                                                <PointersDirective>\r\n                                                    <PointerDirective value={25} radius='60%' animation={{ enable: false }} color='#777777' pointerWidth={5} cap={{\r\n            radius: 6,\r\n            border: { width: 0 },\r\n            color: '#777777'\r\n        }} needleTail={{\r\n            length: '25%',\r\n            color: '#777777'\r\n        }}>\r\n                                                    </PointerDirective>\r\n                                                </PointersDirective>\r\n                                            </AxisDirective>\r\n                                        </AxesDirective>\r\n                                    </CircularGaugeComponent>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-12\">\r\n                            <div className=\"row\">\r\n                                <GridComponent dataBound={this.onGridLoad.bind(this)} ref={grid => this.grid1 = grid} dataSource={this.orderData.slice(0, 30)}>\r\n                                    <ColumnsDirective>\r\n                                        <ColumnDirective field='Country' headerText='Country' width='80'></ColumnDirective>\r\n                                        <ColumnDirective field='Sales' headerText='Sales $' width='80'></ColumnDirective>\r\n                                        <ColumnDirective field='Target' headerText='Target $' width='80'/>\r\n                                        <ColumnDirective field='vsTarget' headerText='vs Target' width='80'/>\r\n                                    </ColumnsDirective>\r\n                                </GridComponent>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<SampleData />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}