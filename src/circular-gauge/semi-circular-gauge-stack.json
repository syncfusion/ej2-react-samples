{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Dynamic gauge\r\n */\r\nimport * as React from \"react\";\r\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, PointersDirective, PointerDirective } from '@syncfusion/ej2-react-circulargauge';\r\nimport { CheckBoxComponent } from \"@syncfusion/ej2-react-buttons\";\r\nimport { PropertyPane } from './property-pane';\r\nimport { SampleBase } from './sample-base';\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }`;\r\nexport class SemiGauge extends SampleBase {\r\n    // Code for Property Panel\r\n    angleChange(e) {\r\n        let centerX = document.getElementById('centerX');\r\n        let centerY = document.getElementById('centerY');\r\n        if (e.checked) {\r\n            this.gauge.centerX = null;\r\n            this.gauge.centerY = null;\r\n            this.gauge.moveToCenter = true;\r\n            centerX.disabled = true;\r\n            centerY.disabled = true;\r\n        }\r\n        else {\r\n            this.gauge.centerX = centerX.value + '%';\r\n            this.gauge.centerY = centerY.value + '%';\r\n            centerX.disabled = false;\r\n            centerY.disabled = false;\r\n            this.gauge.moveToCenter = false;\r\n        }\r\n        this.gauge.refresh();\r\n    }\r\n    start() {\r\n        let min = +this.startElement.value;\r\n        document.getElementById('rangeStart').innerHTML = 'Start Angle <span> &nbsp;&nbsp;&nbsp;' + min + '째';\r\n        this.gauge.axes[0].startAngle = min;\r\n        this.gauge.refresh();\r\n    }\r\n    end() {\r\n        let max = +this.endElement.value;\r\n        document.getElementById('rangeEnd').innerHTML = 'End Angle <span> &nbsp;&nbsp;&nbsp;' + max + '째';\r\n        this.gauge.axes[0].endAngle = max;\r\n        this.gauge.refresh();\r\n    }\r\n    radius() {\r\n        let radius = +this.radiusElement.value;\r\n        document.getElementById('radius1').innerHTML = 'Radius <span> &nbsp;&nbsp;&nbsp;' + radius + '%';\r\n        this.gauge.axes[0].radius = '' + radius + '%';\r\n        this.gauge.refresh();\r\n    }\r\n    centerX() {\r\n        let max = +this.xElement.value;\r\n        document.getElementById('center1').innerHTML = 'Center X <span> &nbsp;&nbsp;&nbsp;' + max + '%';\r\n        this.gauge.centerX = '' + max + '%';\r\n        this.gauge.refresh();\r\n    }\r\n    centerY() {\r\n        let max = +this.yElement.value;\r\n        document.getElementById('center2').innerHTML = 'Center Y <span> &nbsp;&nbsp;&nbsp;' + max + '%';\r\n        this.gauge.centerY = '' + max + '%';\r\n        this.gauge.refresh();\r\n    }\r\n    hideLabel() {\r\n        let labelIntersect = document.getElementById('hidelabel').checked;\r\n        this.gauge.axes[0].hideIntersectingLabel = labelIntersect;\r\n        this.gauge.refresh();\r\n    }\r\n    load(args) {\r\n        let selectedTheme = location.hash.split('/')[1];\r\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\r\n        args.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='col-lg-8 control-section'>\r\n                    <CircularGaugeComponent load={this.load.bind(this)} ref={gauge => this.gauge = gauge} id='gauge'>\r\n                        <AxesDirective>\r\n                            <AxisDirective radius='80%' startAngle={270} endAngle={90} minimum={0} maximum={100} hideIntersectingLabel={true} lineStyle={{ width: 0, color: '#0450C2' }} labelStyle={{\r\n            font: {\r\n                fontWeight: 'normal'\r\n            },\r\n            position: 'Outside',\r\n            autoAngle: true\r\n        }} majorTicks={{ position: 'Inside', width: 2, height: 12, interval: 4 }} minorTicks={{ position: 'Inside', width: 1, height: 5, interval: 2 }}>\r\n                                <PointersDirective>\r\n                                    <PointerDirective animation={{ enable: false }} value={30} radius='75%' color='#FF9200' pointerWidth={7} cap={{\r\n            radius: 8,\r\n            color: '#565656',\r\n            border: { width: 0 }\r\n        }} needleTail={{\r\n            color: '#FF9200',\r\n            length: '13%'\r\n        }}/>\r\n                                </PointersDirective>\r\n                            </AxisDirective>\r\n                        </AxesDirective>\r\n                    </CircularGaugeComponent>\r\n                </div>\r\n                \r\n                    <div className='col-lg-4 property-section'>\r\n                        <PropertyPane title='Properties'>\r\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                                <tbody>\r\n                                    <tr style={{ height: '50px' }}>\r\n                                        <td>\r\n                                            <div id='rangeStart'>Start Angle <span> &nbsp;&nbsp;&nbsp;270째</span> </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <input type=\"range\" id=\"start\" defaultValue=\"270\" min=\"0\" max=\"360\" style={{ width: '90%' }} onChange={this.start.bind(this)} ref={d => this.startElement = d}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr style={{ height: '50px' }}>\r\n                                        <td>\r\n                                            <div id='rangeEnd'>End Angle <span> &nbsp;&nbsp;&nbsp;90째</span> </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <input type=\"range\" id=\"end\" defaultValue=\"90\" min=\"0\" max=\"360\" style={{ width: '90%' }} onChange={this.end.bind(this)} ref={d => this.endElement = d}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr style={{ height: '50px' }}>\r\n                                        <td>\r\n                                            <div id='radius1'>Radius <span> &nbsp;&nbsp;&nbsp;80%</span> </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <input type=\"range\" id=\"radius\" defaultValue=\"80\" min=\"0\" max=\"100\" style={{ width: '90%' }} onChange={this.radius.bind(this)} ref={d => this.radiusElement = d}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <div>Radius based on angle</div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div style={{ paddingTop: '0px' }}>\r\n                                                <CheckBoxComponent id='angle' change={this.angleChange.bind(this)} ref={d => this.angleElement = d}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr style={{ height: '50px' }}>\r\n                                        <td>\r\n                                            <div id='center1'>Center X <span> &nbsp;&nbsp;&nbsp;50%</span> </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <input type=\"range\" id=\"centerX\" defaultValue=\"50\" min=\"0\" max=\"100\" style={{ width: '90%' }} onChange={this.centerX.bind(this)} ref={d => this.xElement = d}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr style={{ height: '50px' }}>\r\n                                        <td>\r\n                                            <div id='center2'>Center Y <span> &nbsp;&nbsp;&nbsp;50%</span> </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <input type=\"range\" id=\"centerY\" defaultValue=\"50\" min=\"0\" max=\"100\" style={{ width: '90%' }} onChange={this.centerY.bind(this)} ref={d => this.yElement = d}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <div>Hide intersecting labels</div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div style={{ paddingTop: '0px' }}>\r\n                                                <CheckBoxComponent id='hidelabel' checked={true} change={this.hideLabel.bind(this)} ref={d => this.angleElement = d}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<SemiGauge />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}