{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for Ranges\r\n */\r\nimport * as React from 'react';\r\nimport { PropertyPane } from './property-pane';\r\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, Inject, PointersDirective, PointerDirective, RangesDirective, RangeDirective, Annotations, AnnotationsDirective, AnnotationDirective, } from '@syncfusion/ej2-react-circulargauge';\r\nimport { SampleBase } from './sample-base';\r\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }`;\r\nexport class Range extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.loaded = false;\r\n    }\r\n    // Code for Property Panel\r\n    start() {\r\n        let index = +this.listObj.value;\r\n        let min = +this.startElement.value;\r\n        document.getElementById('rangeStart').innerHTML = 'Range Start <span> &nbsp;&nbsp;&nbsp;' + min;\r\n        this.gauge.axes[0].ranges[index].start = min;\r\n        this.gauge.axes[0].pointers[0].animation.enable = false;\r\n        this.gauge.refresh();\r\n    }\r\n    end() {\r\n        let index = +this.listObj.value;\r\n        let max = +this.endElement.value;\r\n        document.getElementById('rangeEnd').innerHTML = 'Range End <span> &nbsp;&nbsp;&nbsp;' + max;\r\n        this.gauge.axes[0].ranges[index].end = max;\r\n        this.gauge.axes[0].pointers[0].animation.enable = false;\r\n        this.gauge.refresh();\r\n    }\r\n    startWidth() {\r\n        let index = +this.listObj.value;\r\n        let startWidth = +this.startWidthElement.value;\r\n        document.getElementById('rangeStartWidth').innerHTML = 'Start Width <span> &nbsp;&nbsp;&nbsp;' + startWidth;\r\n        this.gauge.axes[0].ranges[index].startWidth = startWidth;\r\n        this.gauge.axes[0].pointers[0].animation.enable = false;\r\n        this.gauge.refresh();\r\n    }\r\n    endWidth() {\r\n        let index = +this.listObj.value;\r\n        let endWidth = +this.endWidthElement.value;\r\n        document.getElementById('rangeEndWidth').innerHTML = 'End Width <span> &nbsp;&nbsp;&nbsp;' + endWidth;\r\n        this.gauge.axes[0].ranges[index].endWidth = endWidth;\r\n        this.gauge.axes[0].pointers[0].animation.enable = false;\r\n        this.gauge.refresh();\r\n    }\r\n    radius() {\r\n        let index = +this.listObj.value;\r\n        let radius = +this.radiusElement.value;\r\n        document.getElementById('roundedRadius').innerHTML = 'Corner Radius <span> &nbsp;&nbsp;&nbsp;' + radius;\r\n        this.gauge.axes[0].ranges[index].roundedCornerRadius = radius;\r\n        this.gauge.axes[0].pointers[0].animation.enable = false;\r\n        this.gauge.refresh();\r\n    }\r\n    enable() {\r\n        let index = +this.listObj.value;\r\n        let useRangeColor = this.enableElement.checked;\r\n        this.gauge.axes[0].labelStyle.useRangeColor = useRangeColor;\r\n        this.gauge.axes[0].majorTicks.useRangeColor = useRangeColor;\r\n        this.gauge.axes[0].minorTicks.useRangeColor = useRangeColor;\r\n        this.gauge.axes[0].pointers[0].animation.enable = false;\r\n        this.gauge.refresh();\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className='control-section row'>\r\n                    <div className='col-lg-8'>\r\n                        <CircularGaugeComponent load={this.load.bind(this)} id='range-container' ref={gauge => this.gauge = gauge} loaded={this.onChartLoad.bind(this)}>\r\n                            <Inject services={[Annotations]}/>\r\n                            <AxesDirective>\r\n                                <AxisDirective startAngle={210} radius='80%' endAngle={150} minimum={0} maximum={120} majorTicks={{\r\n            height: 10, offset: 5,\r\n        }} lineStyle={{ width: 10, color: 'transparent' }} minorTicks={{\r\n            height: 0\r\n        }} labelStyle={{\r\n            position: 'Inside',\r\n            font: {\r\n                size: '12px',\r\n                fontFamily: 'Roboto', fontStyle: 'Regular'\r\n            },\r\n            useRangeColor: false\r\n        }}>\r\n                                    <PointersDirective>\r\n                                        <PointerDirective value={65} radius='60%' pointerWidth={8} needleTail={{\r\n            length: '18%'\r\n        }} cap={{\r\n            radius: 7\r\n        }}/>\r\n                                    </PointersDirective>\r\n                                    <RangesDirective>\r\n                                        <RangeDirective start={0} end={40} color='#30B32D'/>\r\n                                        <RangeDirective start={40} end={80} color='#FFDD00'/>\r\n                                        <RangeDirective start={80} end={120} color='#F03E3E'/>\r\n                                    </RangesDirective>\r\n                                    <AnnotationsDirective>\r\n                                        <AnnotationDirective content='<div><span style=\"font-size:14px; color:#9E9E9E; font-family:Regular\">Speedometer</span></div>' angle={0} zIndex='1' radius='30%'>\r\n                                        </AnnotationDirective>\r\n                                        <AnnotationDirective content='<div><span style=\"font-size:24px; color:#424242; font-family:Regular\">65 MPH</span></div>' angle={180} zIndex='1' radius='40%'>\r\n                                        </AnnotationDirective>\r\n                                    </AnnotationsDirective>\r\n                                </AxisDirective>\r\n                            </AxesDirective>\r\n                        </CircularGaugeComponent>\r\n                    </div>\r\n                    \r\n                    <div className='col-lg-4 property-section'>\r\n                        <PropertyPane title='Properties'>\r\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                                <tbody>\r\n                                    <tr style={{ height: '50px' }}>\r\n                                        <td>\r\n                                            <div> Select Range </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <select id=\"rangeSelect\" className=\"form-control\" style={{ width: '90%' }}>\r\n                                                    <option value=\"0\"> Low</option>\r\n                                                    <option value=\"1\">Medium</option>\r\n                                                    <option value=\"2\">High</option>\r\n                                                </select>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr style={{ height: '50px' }}>\r\n                                        <td>\r\n                                            <div id='rangeStart'>Range Start <span> &nbsp;&nbsp;&nbsp;0</span> </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <input type=\"range\" id=\"start\" defaultValue=\"0\" min=\"0\" max=\"120\" style={{ width: '90%' }} onChange={this.start.bind(this)} ref={d => this.startElement = d}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                    <tr style={{ height: '50px' }}>\r\n                                        <td>\r\n                                            <div id='rangeEnd'>Range End <span> &nbsp;&nbsp;&nbsp;40</span> </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <input type=\"range\" id=\"end\" defaultValue=\"40\" min=\"0\" max=\"120\" style={{ width: '90%' }} onChange={this.end.bind(this)} ref={d => this.endElement = d}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr style={{ height: '50px' }}>\r\n                                        <td>\r\n                                            <div id=''>Range Color</div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <select id=\"rangeColor\" className=\"form-control\">\r\n                                                    <option value=\"#30B32D\">#30B32D</option>\r\n                                                    <option value=\"#FFDD00\">#FFDD00</option>\r\n                                                    <option value=\"#F03E3E\">#F03E3E</option>\r\n                                                </select>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr style={{ height: '50px' }}>\r\n                                        <td style={{ width: '20%' }}>\r\n                                            <div id='enablePointer'>Range Font Color</div>\r\n                                        </td>\r\n                                        <td style={{ width: '40%' }}>\r\n                                            <div>\r\n                                                <input type=\"checkbox\" id=\"enable\" onChange={this.enable.bind(this)} ref={d => this.enableElement = d}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr style={{ height: '50px' }}>\r\n                                        <td>\r\n                                            <div id='rangeStartWidth'>Start Width <span> &nbsp;&nbsp;&nbsp;10</span> </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <input type=\"range\" id=\"startWidth\" defaultValue=\"10\" min=\"0\" max=\"30\" style={{ width: '90%' }} onChange={this.startWidth.bind(this)} ref={d => this.startWidthElement = d}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr style={{ height: '50px' }}>\r\n                                        <td>\r\n                                            <div id='rangeEndWidth'>End Width <span> &nbsp;&nbsp;&nbsp;10</span> </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <input type=\"range\" id=\"endWidth\" defaultValue=\"10\" min=\"0\" max=\"30\" style={{ width: '90%' }} onChange={this.endWidth.bind(this)} ref={d => this.endWidthElement = d}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr style={{ height: '50px' }}>\r\n                                        <td>\r\n                                            <div id='roundedRadius'>Corner Radius <span> &nbsp;&nbsp;&nbsp;0</span> </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <input type=\"range\" id=\"radius\" defaultValue=\"0\" min=\"0\" max=\"30\" step=\"5\" style={{ width: '90%' }} onChange={this.radius.bind(this)} ref={d => this.radiusElement = d}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n    onChartLoad(args) {\r\n        if (!this.loaded) {\r\n            this.loaded = true;\r\n            this.listObj = new DropDownList({\r\n                index: 0, width: 130,\r\n                change: () => {\r\n                    let index = +this.listObj.value;\r\n                    this.colortObj.value = this.gauge.axes[0].ranges[index].color;\r\n                    this.endWidthElement.value = this.gauge.axes[0].ranges[index].endWidth.toString();\r\n                    document.getElementById('rangeEndWidth').innerHTML = 'End Width <span> &nbsp;&nbsp;&nbsp;' + this.gauge.axes[0].ranges[index].endWidth;\r\n                    this.startWidthElement.value = this.gauge.axes[0].ranges[index].startWidth.toString();\r\n                    document.getElementById('rangeStartWidth').innerHTML = 'Start Width <span> &nbsp;&nbsp;&nbsp;' + this.gauge.axes[0].ranges[index].startWidth;\r\n                    this.endElement.value = this.gauge.axes[0].ranges[index].end.toString();\r\n                    document.getElementById('rangeEnd').innerHTML = 'Range End <span> &nbsp;&nbsp;&nbsp;' + this.gauge.axes[0].ranges[index].end;\r\n                    this.startElement.value = this.gauge.axes[0].ranges[index].start.toString();\r\n                    document.getElementById('rangeStart').innerHTML = 'Range Start <span> &nbsp;&nbsp;&nbsp;' + this.gauge.axes[0].ranges[index].start;\r\n                    this.radiusElement.value = this.gauge.axes[0].ranges[index].roundedCornerRadius.toString();\r\n                    document.getElementById('roundedRadius').innerHTML = 'Corner Radius <span> &nbsp;&nbsp;&nbsp;' + this.gauge.axes[0].ranges[index].roundedCornerRadius;\r\n                }\r\n            });\r\n            this.listObj.appendTo('#rangeSelect');\r\n            this.colortObj = new DropDownList({\r\n                index: 0, width: 130,\r\n                change: () => {\r\n                    this.gauge.axes[0].ranges[+this.listObj.value].color = this.colortObj.value.toString();\r\n                    this.gauge.axes[0].pointers[0].animation.enable = false;\r\n                    this.gauge.refresh();\r\n                }\r\n            });\r\n            this.colortObj.appendTo('#rangeColor');\r\n        }\r\n    }\r\n    ;\r\n}\r\n\nrender(<Range />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}