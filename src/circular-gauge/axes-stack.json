{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for Multiple Axis\r\n */\r\nimport * as React from 'react';\r\nimport { PropertyPane } from './property-pane';\r\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, isCompleteAngle, PointersDirective, PointerDirective } from '@syncfusion/ej2-react-circulargauge';\r\nimport { SampleBase } from './sample-base';\r\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }`;\r\nexport class Axes extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.axisIndex = 0;\r\n        this.loaded = false;\r\n    }\r\n    onChartLoad(args) {\r\n        let id = args.gauge.element.id;\r\n        document.getElementById(id).setAttribute('title', '');\r\n        if (!this.loaded) {\r\n            this.loaded = true;\r\n            this.axis = new DropDownList({\r\n                index: 0, width: 140,\r\n                change: () => {\r\n                    this.axisIndex = +this.axis.value;\r\n                    let direction = this.gauge.axes[this.axisIndex].direction;\r\n                    this.direction.value = direction;\r\n                    let startAngle = this.gauge.axes[this.axisIndex].startAngle;\r\n                    let endAngle = this.gauge.axes[this.axisIndex].endAngle;\r\n                    document.getElementById('start').innerHTML = 'Start Angle <span> &nbsp;&nbsp;&nbsp;' + startAngle;\r\n                    document.getElementById('end').innerHTML = 'End Angle <span> &nbsp;&nbsp;&nbsp;' + endAngle;\r\n                    this.start.value = startAngle.toString();\r\n                    this.end.value = endAngle.toString();\r\n                }\r\n            });\r\n            this.axis.appendTo('#axisIndex');\r\n            this.direction = new DropDownList({\r\n                index: 0, width: 140,\r\n                change: () => {\r\n                    this.gauge.axes[this.axisIndex].direction = this.direction.value == 'ClockWise' ? 'ClockWise' : 'AntiClockWise';\r\n                    this.gauge.axes[0].pointers[0].animation.enable = false;\r\n                    this.gauge.axes[1].pointers[0].animation.enable = false;\r\n                    this.gauge.refresh();\r\n                }\r\n            });\r\n            this.direction.appendTo('#axisDirection');\r\n        }\r\n    }\r\n    ;\r\n    startAngle() {\r\n        let value = +this.start.value;\r\n        this.gauge.axes[0].pointers[0].animation.enable = false;\r\n        this.gauge.axes[1].pointers[0].animation.enable = false;\r\n        this.gauge.axes[this.axisIndex].startAngle = value;\r\n        document.getElementById('start').innerHTML = 'Start Angle <span> &nbsp;&nbsp;&nbsp;' + value;\r\n        this.gauge.axes[this.axisIndex].labelStyle.hiddenLabel =\r\n            isCompleteAngle(this.gauge.axes[this.axisIndex].startAngle, this.gauge.axes[this.axisIndex].endAngle) ?\r\n                'First' : 'None';\r\n        this.gauge.refresh();\r\n    }\r\n    endAngle() {\r\n        let value = +this.end.value;\r\n        this.gauge.axes[0].pointers[0].animation.enable = false;\r\n        this.gauge.axes[1].pointers[0].animation.enable = false;\r\n        this.gauge.axes[this.axisIndex].endAngle = value;\r\n        document.getElementById('end').innerHTML = 'End Angle <span> &nbsp;&nbsp;&nbsp;' + value;\r\n        this.gauge.axes[this.axisIndex].labelStyle.hiddenLabel =\r\n            isCompleteAngle(this.gauge.axes[this.axisIndex].startAngle, this.gauge.axes[this.axisIndex].endAngle) ?\r\n                'First' : 'None';\r\n        this.gauge.refresh();\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className='control-section row'>\r\n                    <div className='col-lg-8'>\r\n                        <CircularGaugeComponent load={this.load.bind(this)} id='range-container' title=\"Gauge with Multiple Axes\" titleStyle={{\r\n            color: 'gray',\r\n            size: '16px'\r\n        }} ref={gauge => this.gauge = gauge} loaded={this.onChartLoad.bind(this)}>\r\n                            <AxesDirective>\r\n                                <AxisDirective lineStyle={{ width: 1.5, color: ' #9E9E9E' }} radius='95%' startAngle={220} endAngle={140} minimum={0} maximum={160} majorTicks={{\r\n            position: 'Inside',\r\n            width: 2, height: 10, color: '#757575'\r\n        }} minorTicks={{\r\n            position: 'Inside', width: 2,\r\n            height: 5, color: '#757575'\r\n        }} labelStyle={{\r\n            position: 'Inside', autoAngle: true,\r\n            hiddenLabel: 'None', font: { color: '#333333' }\r\n        }}>\r\n                                    <PointersDirective>\r\n                                        <PointerDirective value={80} radius='100%' color='#333333' markerHeight={15} markerWidth={15} type='Marker' markerShape='Triangle'/>\r\n                                    </PointersDirective>\r\n                                </AxisDirective>\r\n                                <AxisDirective lineStyle={{ width: 1.5, color: ' #E84011' }} radius='95%' startAngle={220} endAngle={140} minimum={0} maximum={240} majorTicks={{\r\n            position: 'Outside', width: 2, height: 10,\r\n            color: '#E84011'\r\n        }} minorTicks={{\r\n            position: 'Outside', width: 2,\r\n            height: 5, color: '#E84011'\r\n        }} labelStyle={{\r\n            position: 'Outside', autoAngle: true,\r\n            hiddenLabel: 'None'\r\n        }}>\r\n                                    <PointersDirective>\r\n                                        <PointerDirective value={120} radius='100%' color='#C62E0A' markerHeight={15} markerWidth={15} type='Marker' markerShape='InvertedTriangle'/>\r\n                                    </PointersDirective>\r\n                                </AxisDirective>\r\n                            </AxesDirective>\r\n                        </CircularGaugeComponent>\r\n                    </div>\r\n                    \r\n                    <div className='col-lg-4 property-section'>\r\n                        <PropertyPane title='Properties'>\r\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <div> Axis </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <select id=\"axisIndex\" className=\"form-control\" style={{ width: \"90%\" }}>\r\n                                                    <option value=\"0\">Axis 1</option>\r\n                                                    <option value=\"1\">Axis 2</option>\r\n                                                </select>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <div> Direction </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <select id=\"axisDirection\" className=\"form-control\" style={{ width: \"90%\" }}>\r\n                                                    <option value=\"ClockWise\">ClockWise</option>\r\n                                                    <option value=\"AntiClockWise\">AntiClockWise</option>\r\n                                                </select>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <div id='start'>Start Angle <span> &nbsp;&nbsp;&nbsp;220</span> </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <input type=\"range\" id=\"startAngle\" onChange={this.startAngle.bind(this)} ref={d => this.start = d} defaultValue=\"220\" min=\"0\" max=\"360\" style={{ width: \"90%\" }}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <div id='end'>End Angle <span> &nbsp;&nbsp;&nbsp;140</span> </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <input type=\"range\" id=\"endAngle\" onChange={this.endAngle.bind(this)} ref={d => this.end = d} defaultValue=\"140\" min=\"0\" max=\"360\" style={{ width: \"90%\" }}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<Axes />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}