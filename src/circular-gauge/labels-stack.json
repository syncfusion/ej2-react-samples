{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for labels\r\n */\r\nimport * as React from 'react';\r\nimport { PropertyPane } from './property-pane';\r\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, Inject, AnnotationsDirective, AnnotationDirective, PointersDirective, PointerDirective, Annotations } from '@syncfusion/ej2-react-circulargauge';\r\nimport { SampleBase } from './sample-base';\r\nimport { CheckBoxComponent } from \"@syncfusion/ej2-react-buttons\";\r\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }`;\r\nexport class Labels extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.isMajorTicks = true;\r\n        this.loaded = false;\r\n    }\r\n    ticksOffset() {\r\n        let value = +this.tickOffset.value;\r\n        if (this.isMajorTicks) {\r\n            this.gauge.axes[0].majorTicks.offset = value;\r\n        }\r\n        else {\r\n            this.gauge.axes[0].minorTicks.offset = value;\r\n        }\r\n        document.getElementById('offset').innerHTML = 'Tick Offset <span>&nbsp;&nbsp;&nbsp;' + value;\r\n        this.gauge.refresh();\r\n    }\r\n    ticksHeight() {\r\n        let value = +this.tickHeight.value;\r\n        if (this.isMajorTicks) {\r\n            this.gauge.axes[0].majorTicks.height = value;\r\n        }\r\n        else {\r\n            this.gauge.axes[0].minorTicks.height = value;\r\n        }\r\n        document.getElementById('height').innerHTML = 'Tick Height <span>&nbsp;&nbsp;&nbsp;' + value;\r\n        this.gauge.refresh();\r\n    }\r\n    labelsOffset() {\r\n        let value = +this.labelOffset.value;\r\n        this.gauge.axes[0].labelStyle.offset = value;\r\n        document.getElementById('labelOffsetValue').innerHTML = 'Label Offset <span>&nbsp;&nbsp;&nbsp;' + value;\r\n        this.gauge.refresh();\r\n    }\r\n    showLastLabel() {\r\n        let showLastLabel = document.getElementById('enable');\r\n        this.gauge.axes[0].showLastLabel = this.lastLabel.checked;\r\n        this.gauge.refresh();\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className='control-section row'>\r\n                    <div className='col-lg-8'>\r\n                        <CircularGaugeComponent load={this.load.bind(this)} id='range-container' loaded={this.onChartLoad.bind(this)} ref={gauge => this.gauge = gauge}>\r\n                            <Inject services={[Annotations]}/>\r\n                            <AxesDirective>\r\n                                <AxisDirective startAngle={210} endAngle={150} radius='75%' minimum={0} maximum={170} majorTicks={{\r\n            position: 'Inside', color: '#757575', width: 2, height: 10, interval: 20\r\n        }} lineStyle={{ width: 2, color: '#9E9E9E' }} minorTicks={{\r\n            position: 'Inside', color: '#757575', height: 5, width: 2, interval: 10\r\n        }} labelStyle={{\r\n            position: 'Outside', autoAngle: true,\r\n            font: {\r\n                size: '10px'\r\n            }\r\n        }}>\r\n                                    <AnnotationsDirective>\r\n                                        <AnnotationDirective content='<div id=\"content\" style=\"color:#518C03;font-size:20px;font-family:Segoe UI;font-weight:semibold;\">145</div>' angle={0} radius='0%' zIndex='1'>\r\n                                        </AnnotationDirective>\r\n                                    </AnnotationsDirective>\r\n                                    <PointersDirective>\r\n                                        <PointerDirective value={145} radius='60%' color='#8BC34A' pointerWidth={10} border={{\r\n            width: 0,\r\n            color: 'transparent'\r\n        }} animation={{ enable: false }} type=\"RangeBar\" roundedCornerRadius={10} cap={{\r\n            radius: 0,\r\n            border: {\r\n                width: 0\r\n            }\r\n        }}/>\r\n                                    </PointersDirective>\r\n                                </AxisDirective>\r\n                            </AxesDirective>\r\n                        </CircularGaugeComponent>\r\n                    </div>\r\n                    \r\n                    <div className='col-lg-4 property-section'>\r\n                        <PropertyPane title='Properties'>\r\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <div> Ticks </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <select id=\"Ticks\" className=\"form-control\" style={{ width: '90%' }}>\r\n                                                    <option value=\"major\"> Major Ticks</option>\r\n                                                    <option value=\"minor\">Minor Ticks</option>\r\n                                                </select>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <div> Tick Position </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <select id=\"tickposition\" className=\"form-control\" style={{ width: '90%' }}>\r\n                                                    <option value=\"Inside\"> Inside</option>\r\n                                                    <option value=\"Outside\">Outside</option>\r\n                                                </select>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <div> Label Position </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <select id=\"labelposition\" className=\"form-control\" style={{ width: '90%' }}>\r\n                                                    <option value=\"Outside\"> Outside</option>\r\n                                                    <option value=\"Inside\">Inside</option>\r\n                                                </select>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <div id='offset'>Tick Offset <span>&nbsp;&nbsp;&nbsp;0</span> </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <input type=\"range\" onChange={this.ticksOffset.bind(this)} ref={d => this.tickOffset = d} id=\"tickOffset\" defaultValue=\"0\" min=\"0\" max=\"50\" style={{ width: '90%' }}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <div id='height'>Tick Height <span>&nbsp;&nbsp;&nbsp;10</span> </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <input type=\"range\" onChange={this.ticksHeight.bind(this)} ref={d => this.tickHeight = d} id=\"tickHeight\" defaultValue=\"10\" min=\"1\" max=\"50\" style={{ width: '90%' }}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <div id='labelOffsetValue'>Label Offset <span>&nbsp;&nbsp;&nbsp;0</span> </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <input type=\"range\" onChange={this.labelsOffset.bind(this)} ref={d => this.labelOffset = d} id=\"labelOffset\" defaultValue=\"0\" min=\"0\" max=\"50\" style={{ width: '90%' }}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr style={{ \"height\": \"30px\" }}>\r\n                                    <td style={{ \"width\": \"50%\" }}>\r\n                                        <div> enablePointer </div>\r\n                                    </td>\r\n                                    <td style={{ \"width\": \"50%\" }}>\r\n                                        <div>\r\n                                            <CheckBoxComponent change={this.showLastLabel.bind(this)} ref={d => this.lastLabel = d} id='enable' disabled={false}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n    // Code for Property Panel\r\n    onChartLoad(args) {\r\n        if (!this.loaded) {\r\n            this.loaded = true;\r\n            this.ticks = new DropDownList({\r\n                index: 0, width: 130,\r\n                change: () => {\r\n                    let value = this.ticks.value.toString();\r\n                    let tickProp;\r\n                    this.isMajorTicks = value === 'major';\r\n                    if (this.isMajorTicks) {\r\n                        tickProp = this.gauge.axes[0].majorTicks;\r\n                    }\r\n                    else {\r\n                        tickProp = this.gauge.axes[0].minorTicks;\r\n                    }\r\n                    this.tickPosition.value = tickProp.position;\r\n                    this.tickOffset.value = tickProp.offset.toString();\r\n                    this.tickHeight.value = tickProp.height.toString();\r\n                    document.getElementById('offset').innerHTML = 'Tick Offset <span>&nbsp;&nbsp;&nbsp;' + tickProp.offset;\r\n                    document.getElementById('height').innerHTML = 'Tick Height <span>&nbsp;&nbsp;&nbsp;' + tickProp.height;\r\n                }\r\n            });\r\n            this.ticks.appendTo('#Ticks');\r\n            this.tickPosition = new DropDownList({\r\n                index: 0, width: 130,\r\n                change: () => {\r\n                    let value = this.tickPosition.value.toString();\r\n                    if (this.isMajorTicks) {\r\n                        this.gauge.axes[0].majorTicks.position = value == 'Inside' ? 'Inside' : 'Outside';\r\n                    }\r\n                    else {\r\n                        this.gauge.axes[0].minorTicks.position = value == 'Inside' ? 'Inside' : 'Outside';\r\n                    }\r\n                    this.gauge.refresh();\r\n                }\r\n            });\r\n            this.tickPosition.appendTo('#tickposition');\r\n            this.labelPosition = new DropDownList({\r\n                index: 0, width: 130,\r\n                change: () => {\r\n                    let value = this.labelPosition.value.toString();\r\n                    this.gauge.axes[0].labelStyle.position = value == 'Inside' ? 'Inside' : 'Outside';\r\n                    this.gauge.refresh();\r\n                }\r\n            });\r\n            this.labelPosition.appendTo('#labelposition');\r\n        }\r\n    }\r\n}\r\n\nrender(<Labels />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}