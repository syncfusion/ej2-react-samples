{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Dynamic gauge\r\n */\r\nimport * as React from \"react\";\r\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, AnnotationDirective, PointersDirective, PointerDirective, RangesDirective, RangeDirective, AnnotationsDirective } from '@syncfusion/ej2-react-circulargauge';\r\nimport { CheckBoxComponent } from \"@syncfusion/ej2-react-buttons\";\r\nimport { PropertyPane } from './property-pane';\r\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\r\nimport { SampleBase } from './sample-base';\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }`;\r\nexport class Speedometer extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.gauge5Interval1 = setInterval(() => {\r\n            if (this.gauge) {\r\n                let newVal = this.gauge.axes[0].pointers[0].value + (Math.floor(Math.random() * (10 - (-10))) - 10);\r\n                if (newVal <= 0) {\r\n                    newVal = 5;\r\n                }\r\n                if (document.getElementById('container')) {\r\n                    this.gauge.axes[0].pointers[0].animation.enable = true;\r\n                    this.gauge.setPointerValue(0, 0, newVal);\r\n                    if (!isNullOrUndefined(document.getElementById('pointerannotation'))) {\r\n                        document.getElementById('pointerannotation').innerHTML = newVal.toString() + ' km/h';\r\n                    }\r\n                }\r\n                else {\r\n                    clearInterval(this.gauge5Interval1);\r\n                }\r\n            }\r\n        }, 1000);\r\n    }\r\n    // Code for Property Panel\r\n    rangeChange() {\r\n        if (this.rangeElement.checked === true) {\r\n            this.gapElement.disabled = true;\r\n            this.gauge.axes[0].ranges[0].start = 0;\r\n            this.gauge.axes[0].ranges[0].end = 120;\r\n            this.gauge.axes[0].ranges[0].startWidth = 5;\r\n            this.gauge.axes[0].ranges[0].endWidth = 35;\r\n            this.gauge.axes[0].ranges[0].color = 'url(#grad1)';\r\n            this.gauge.axes[0].ranges[1].start = null;\r\n            this.gauge.axes[0].ranges[1].end = null;\r\n            this.gauge.axes[0].ranges[1].startWidth = '';\r\n            this.gauge.axes[0].ranges[1].endWidth = '';\r\n            this.gauge.axes[0].ranges[1].color = '';\r\n            this.gauge.axes[0].ranges[2].start = null;\r\n            this.gauge.axes[0].ranges[2].end = null;\r\n            this.gauge.axes[0].ranges[2].startWidth = '';\r\n            this.gauge.axes[0].ranges[2].endWidth = '';\r\n            this.gauge.axes[0].ranges[2].color = '';\r\n            this.gauge.axes[0].ranges[3].start = null;\r\n            this.gauge.axes[0].ranges[3].end = null;\r\n            this.gauge.axes[0].ranges[3].startWidth = '';\r\n            this.gauge.axes[0].ranges[3].endWidth = '';\r\n            this.gauge.axes[0].ranges[3].color = '';\r\n            this.gauge.axes[0].ranges[4].start = null;\r\n            this.gauge.axes[0].ranges[4].end = null;\r\n            this.gauge.axes[0].ranges[4].startWidth = '';\r\n            this.gauge.axes[0].ranges[4].endWidth = '';\r\n            this.gauge.axes[0].ranges[4].color = '';\r\n            this.gauge.axes[0].ranges[5].start = null;\r\n            this.gauge.axes[0].ranges[5].end = null;\r\n            this.gauge.axes[0].ranges[5].startWidth = '';\r\n            this.gauge.axes[0].ranges[5].endWidth = '';\r\n            this.gauge.axes[0].ranges[5].color = '';\r\n            this.gauge.axes[0].pointers[0].animation.enable = false;\r\n            this.gauge.refresh();\r\n        }\r\n        else {\r\n            this.gapElement.disabled = false;\r\n            this.gauge.axes[0].ranges[0].start = 0;\r\n            this.gauge.axes[0].ranges[0].end = 20;\r\n            this.gauge.axes[0].ranges[0].startWidth = 5;\r\n            this.gauge.axes[0].ranges[0].endWidth = 10;\r\n            this.gauge.axes[0].ranges[0].color = '#82b944';\r\n            this.gauge.axes[0].ranges[1].start = 20;\r\n            this.gauge.axes[0].ranges[1].end = 40;\r\n            this.gauge.axes[0].ranges[1].startWidth = 10;\r\n            this.gauge.axes[0].ranges[1].endWidth = 15;\r\n            this.gauge.axes[0].ranges[1].color = '#a1cb43';\r\n            this.gauge.axes[0].ranges[2].start = 40;\r\n            this.gauge.axes[0].ranges[2].end = 60;\r\n            this.gauge.axes[0].ranges[2].startWidth = 15;\r\n            this.gauge.axes[0].ranges[2].endWidth = 20;\r\n            this.gauge.axes[0].ranges[2].color = '#ddec12';\r\n            this.gauge.axes[0].ranges[3].start = 60;\r\n            this.gauge.axes[0].ranges[3].end = 80;\r\n            this.gauge.axes[0].ranges[3].startWidth = 20;\r\n            this.gauge.axes[0].ranges[3].endWidth = 25;\r\n            this.gauge.axes[0].ranges[3].color = '#ffbc00';\r\n            this.gauge.axes[0].ranges[4].start = 80;\r\n            this.gauge.axes[0].ranges[4].end = 100;\r\n            this.gauge.axes[0].ranges[4].startWidth = 25;\r\n            this.gauge.axes[0].ranges[4].endWidth = 30;\r\n            this.gauge.axes[0].ranges[4].color = '#ff6000';\r\n            this.gauge.axes[0].ranges[5].start = 100;\r\n            this.gauge.axes[0].ranges[5].end = 120;\r\n            this.gauge.axes[0].ranges[5].startWidth = 30;\r\n            this.gauge.axes[0].ranges[5].endWidth = 35;\r\n            this.gauge.axes[0].ranges[5].color = 'red';\r\n            this.gauge.axes[0].pointers[0].animation.enable = false;\r\n            this.gauge.refresh();\r\n        }\r\n    }\r\n    textChange() {\r\n        if (this.textElement.checked === true) {\r\n            this.gauge.axes[0].majorTicks.interval = 10;\r\n            this.gauge.axisLabelRender = (args) => {\r\n                let text;\r\n                switch (parseInt(args.text)) {\r\n                    case 10:\r\n                        text = 'Ideal';\r\n                        break;\r\n                    case 30:\r\n                        text = 'Safe';\r\n                        break;\r\n                    case 50:\r\n                        text = 'Good';\r\n                        break;\r\n                    case 70:\r\n                        text = 'Ok';\r\n                        break;\r\n                    case 90:\r\n                        text = 'Risk';\r\n                        break;\r\n                    case 110:\r\n                        text = 'Danger';\r\n                        break;\r\n                    default:\r\n                        text = '';\r\n                        break;\r\n                }\r\n                args.text = text;\r\n            };\r\n            this.gauge.axes[0].pointers[0].animation.enable = false;\r\n            this.gauge.refresh();\r\n        }\r\n        else {\r\n            this.gauge.axes[0].majorTicks.interval = 20;\r\n            this.gauge.axes[0].minimum = 0;\r\n            this.gauge.axes[0].maximum = 120;\r\n            this.gauge.axisLabelRender = (args) => { };\r\n            this.gauge.axes[0].pointers[0].animation.enable = false;\r\n            this.gauge.refresh();\r\n        }\r\n    }\r\n    gapChange() {\r\n        if (this.gapElement.checked) {\r\n            this.gauge.axes[0].rangeGap = 5;\r\n        }\r\n        else {\r\n            this.gauge.axes[0].rangeGap = null;\r\n        }\r\n        this.gauge.axes[0].pointers[0].animation.enable = false;\r\n        this.gauge.refresh();\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='col-lg-8 control-section'>    \r\n                    <svg style={style1}>\r\n                        <defs>\r\n                        <linearGradient id=\"grad1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\r\n                            <stop offset=\"0%\" style={style2}/>\r\n                            <stop offset=\"50%\" style={style3}/>\r\n                            <stop offset=\"100%\" style={style4}/>\r\n                        </linearGradient>\r\n                        </defs>   \r\n                    </svg>\r\n                    <CircularGaugeComponent title='Speedometer' titleStyle={{ size: '18px' }} centerY='75%' load={this.load.bind(this)} ref={gauge => this.gauge = gauge} id='container'>\r\n                        <AxesDirective>\r\n                            <AxisDirective radius='120%' startAngle={270} endAngle={90} minimum={0} maximum={120} lineStyle={{ width: 0 }} labelStyle={{\r\n            font: {\r\n                size: '13px',\r\n                fontFamily: 'Roboto'\r\n            },\r\n            position: 'Outside',\r\n            autoAngle: true,\r\n            useRangeColor: false\r\n        }} majorTicks={{ height: 0 }} minorTicks={{ height: 0 }}>\r\n                                <PointersDirective>\r\n                                    <PointerDirective animation={{ enable: true, duration: 900 }} value={40} radius='80%' color='#757575' pointerWidth={7} cap={{\r\n            radius: 8,\r\n            color: '#757575',\r\n            border: { width: 0 }\r\n        }} needleTail={{\r\n            color: '#757575',\r\n            length: '15%'\r\n        }}/>\r\n                                </PointersDirective>\r\n                                <AnnotationsDirective>\r\n                                    <AnnotationDirective content='<div style=\"width:90px;text-align:center;font-size:20px;font-family:Roboto\">${pointers[0].value} km/h</div>' angle={0} zIndex='1' radius='30%'/>\r\n                                </AnnotationsDirective>\r\n                                <RangesDirective>\r\n                                    <RangeDirective start={0} end={20} startWidth={5} endWidth={10} radius='102%' color='#82b944'/>\r\n                                    <RangeDirective start={20} end={40} startWidth={10} endWidth={15} radius='102%' color='#a1cb43'/>\r\n                                    <RangeDirective start={40} end={60} startWidth={15} endWidth={20} radius='102%' color='#ddec12'/>\r\n                                    <RangeDirective start={60} end={80} startWidth={20} endWidth={25} radius='102%' color='#ffbc00'/>\r\n                                    <RangeDirective start={80} end={100} startWidth={25} endWidth={30} radius='102%' color='#ff6000'/>\r\n                                    <RangeDirective start={100} end={120} startWidth={30} endWidth={35} radius='102%' color='red'/>\r\n                                </RangesDirective>\r\n                            </AxisDirective>\r\n                        </AxesDirective>\r\n                    </CircularGaugeComponent>\r\n                </div>\r\n                \r\n                <div className='col-lg-4 property-section'>\r\n                    <PropertyPane title='Properties'>\r\n                        <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div>Show text labels</div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <CheckBoxComponent id='showText' change={this.textChange.bind(this)} ref={d => this.textElement = d}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div>Combine ranges</div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <CheckBoxComponent id='combineRange' change={this.rangeChange.bind(this)} ref={d => this.rangeElement = d}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div>Gap between ranges</div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <CheckBoxComponent id='range' change={this.gapChange.bind(this)} ref={d => this.gapElement = d}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </PropertyPane>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\nvar style1 = {\r\n    'height': '0px',\r\n    'width': '0px'\r\n};\r\nvar style2 = {\r\n    'stop-color': '#82b944',\r\n    'stop-opacity': 1\r\n};\r\nvar style3 = {\r\n    'stop-color': 'rgb(255,255,0)',\r\n    'stop-opacity': 1\r\n};\r\nvar style4 = {\r\n    'stop-color': 'red',\r\n    'stop-opacity': 1\r\n};\r\n\nrender(<Speedometer />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}