{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Dynamic gauge\r\n */\r\nimport * as React from \"react\";\r\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, Inject, Annotations, AnnotationDirective, PointersDirective, PointerDirective, RangesDirective, RangeDirective, AnnotationsDirective } from '@syncfusion/ej2-react-circulargauge';\r\nimport { SliderComponent } from \"@syncfusion/ej2-react-inputs\";\r\nimport { SampleBase } from './sample-base';\r\nlet sliderValue = 60;\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }\r\n    .sliderwrap {\r\n        margin-top: 0px;\r\n        width: 300px;            \r\n        align-self: center;\r\n    }  \r\n    #slider.e-control.e-slider .e-handle {\r\n        background-color: #4B4B4B ;\r\n    }\r\n    .e-control-wrapper.e-slider-container.e-horizontal .e-slider-track {\r\n        background: -webkit-linear-gradient(left, #ea501a 0, #ea501a 20%, #f79c02 40%, #e5ce20 60%, #a1cb43 80%, #82b944 100%);\r\n        background: linear-gradient(left, #ea501a 0, #ea501a 20%, #f79c02 40%, #e5ce20 60%, #a1cb43 80%, #82b944 100%);\r\n        background: -moz-linear-gradient(left, #ea501a 0, #ea501a 20%, #f79c02 40%, #e5ce20 60%, #a1cb43 80%, #82b944 100%); \r\n    }\r\n    .e-limit-bar.e-limits {\r\n        background-color: transparent !important;\r\n    }\r\n    .e-control-wrapper.e-slider-container.e-horizontal .e-range {\r\n        height: 0px !important;\r\n    }\r\n    #slider.e-control.e-slider .e-slider-track {\r\n        height: 8px;\r\n        top: calc(50% - 4px);\r\n        border-radius: 5px;\r\n    }`;\r\nexport class ArcGauge extends SampleBase {\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section'>\r\n                    <CircularGaugeComponent title='Progress Tracker' titleStyle={{ size: '18px' }} load={this.load.bind(this)} ref={gauge => this.gauge = gauge} id='gauge'>\r\n                        <Inject services={[Annotations]}/>\r\n                        <AxesDirective>\r\n                            <AxisDirective radius='80%' startAngle={200} endAngle={160} minimum={0} maximum={100} lineStyle={{ width: 0 }} labelStyle={{\r\n            font: {\r\n                fontWeight: 'Roboto',\r\n                fontStyle: 'Regular',\r\n                size: '0px',\r\n                color: 'white'\r\n            },\r\n            position: 'Inside',\r\n            useRangeColor: true\r\n        }} majorTicks={{ height: 0 }} minorTicks={{ height: 0 }}>\r\n                                <AnnotationsDirective>\r\n                                    <AnnotationDirective content='<div id=\"pointervalue\" style=\"font-size:35px;width:120px;text-align:center\">60/100</div>' angle={0} radius='0%' zIndex='1'/>\r\n                                    <AnnotationDirective content='<div id=\"slider\" style=\"height:70px;width:250px;\"></div>' angle={0} radius='-100%' zIndex='1'/>\r\n                                </AnnotationsDirective>\r\n                                <RangesDirective>\r\n                                    <RangeDirective start={0} end={100} radius='90%' startWidth={30} endWidth={30} color='#E0E0E0' roundedCornerRadius={20}>\r\n                                    </RangeDirective>\r\n                                </RangesDirective>\r\n                                <PointersDirective>\r\n                                    <PointerDirective animation={{ enable: false }} value={60} radius='90%' color='#e5ce20' pointerWidth={30} type='RangeBar' roundedCornerRadius={20} border={{\r\n            color: 'gray',\r\n            width: 0\r\n        }}/>\r\n                                </PointersDirective>\r\n                            </AxisDirective>\r\n                        </AxesDirective>\r\n                    </CircularGaugeComponent>\r\n                    <SliderComponent className='sliderwrap' id=\"slider\" style={{ width: '300px', 'margin-left': '300px' }} type='MinRange' min={0} max={100} value={sliderValue} limits={{ enabled: true, minStart: 0, minEnd: 100 }} change={this.sliderChange.bind(this)} ref={d => this.sliderElement = d}/>\r\n                </div>\r\n            </div>);\r\n    }\r\n    sliderChange() {\r\n        sliderValue = this.sliderElement.value;\r\n        if (!isNaN(sliderValue)) {\r\n            this.gauge['isProtectedOnChange'] = true;\r\n            if (sliderValue >= 0 && sliderValue < 20) {\r\n                this.gauge.axes[0].pointers[0].color = '#ea501a';\r\n            }\r\n            else if (sliderValue >= 20 && sliderValue < 40) {\r\n                this.gauge.axes[0].pointers[0].color = '#f79c02';\r\n            }\r\n            else if (sliderValue >= 40 && sliderValue < 60) {\r\n                this.gauge.axes[0].pointers[0].color = '#e5ce20';\r\n            }\r\n            else if (sliderValue >= 60 && sliderValue < 80) {\r\n                this.gauge.axes[0].pointers[0].color = '#a1cb43';\r\n            }\r\n            else if (sliderValue >= 80 && sliderValue < 100) {\r\n                this.gauge.axes[0].pointers[0].color = '#82b944';\r\n            }\r\n            this.gauge.setPointerValue(0, 0, sliderValue);\r\n            if (document.getElementById('pointervalue')) {\r\n                document.getElementById('pointervalue').innerHTML = this.gauge.axes[0].pointers[0].value.toString() + '/100';\r\n            }\r\n        }\r\n    }\r\n}\r\n\nrender(<ArcGauge />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}