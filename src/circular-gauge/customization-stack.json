{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","customization-service.js":"\"use strict\";\n/**\n * Dynamic source\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ej2_circulargauge_1 = require(\"@syncfusion/ej2-circulargauge\");\nvar ej2_circulargauge_2 = require(\"@syncfusion/ej2-circulargauge\");\nej2_circulargauge_1.CircularGauge.Inject(ej2_circulargauge_2.Annotations);\nvar DynamicDataSerive = /** @class */ (function () {\n    function DynamicDataSerive() {\n    }\n    DynamicDataSerive.prototype.GetSubGauge1 = function () {\n        var gauge1 = new ej2_circulargauge_1.CircularGauge({\n            load: function (args1) {\n                var selectedTheme = location.hash.split('/')[1];\n                selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                args1.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\n            },\n            axes: [{\n                    annotations: [{\n                            content: '<div style=\"color:#666666;font-size:35px;\">50.5GB</div>',\n                            angle: 180, radius: '0%', zIndex: '1'\n                        }, {\n                            content: '<div style=\"color:#757575;font-size:15px;\">Used</div>',\n                            angle: 180, radius: '25%', zIndex: '1',\n                            textStyle: {\n                                fontFamily: 'Roboto',\n                                color: '#9E9E9E',\n                                fontStyle: 'Bold',\n                                fontWeight: 'Regular',\n                                size: '14px'\n                            }\n                        }],\n                    lineStyle: { width: 0 },\n                    startAngle: 180, endAngle: 180,\n                    radius: '80%',\n                    labelStyle: { font: { size: '0px' } },\n                    majorTicks: { width: 0 },\n                    minorTicks: { height: 0 },\n                    minimum: 0, maximum: 100,\n                    ranges: [{\n                            start: 0, end: 100,\n                            radius: '80%', startWidth: 30,\n                            endWidth: 30, color: '#E0E0E0'\n                        }],\n                    pointers: [{\n                            type: 'RangeBar',\n                            value: 50.5, radius: '80%',\n                            color: '#FF2680', animation: { duration: 0 },\n                            pointerWidth: 30\n                        }]\n                }]\n        });\n        var gauge2 = new ej2_circulargauge_1.CircularGauge({\n            load: function (args2) {\n                var selectedTheme = location.hash.split('/')[1];\n                selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                args2.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\n            },\n            centerY: '70%',\n            axes: [{\n                    annotations: [{\n                            content: '<div style=\"color:#666666;font-size:35px;\">1800</div>',\n                            angle: 0,\n                            radius: '110%', zIndex: '1'\n                        }],\n                    lineStyle: { width: 0 },\n                    startAngle: 300, endAngle: 60,\n                    radius: '80%',\n                    labelStyle: { font: { size: '0px' } },\n                    majorTicks: { width: 0 },\n                    minorTicks: { height: 0 },\n                    minimum: 999, maximum: 2000,\n                    ranges: [{\n                            start: 1000, end: 2000,\n                            radius: '90%',\n                            startWidth: 30, endWidth: 30,\n                            color: '#E0E0E0'\n                        }],\n                    pointers: [{\n                            type: 'RangeBar',\n                            value: 1800, radius: '90%',\n                            color: '#FFDD00', animation: { duration: 0 },\n                            pointerWidth: 30\n                        }, {\n                            radius: '90%', value: 1800,\n                            color: '#424242',\n                            animation: { duration: 0 },\n                            pointerWidth: 9,\n                            cap: { radius: 10, color: '#424242', border: { width: 0 } }\n                        }]\n                }]\n        });\n        return { 'gauge1': gauge1, 'gauge2': gauge2 };\n    };\n    return DynamicDataSerive;\n}());\nexports.DynamicDataSerive = DynamicDataSerive;\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for Gauge Customization\r\n */\r\nimport * as React from 'react';\r\nimport { PropertyPane } from './property-pane';\r\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, Inject, AnnotationsDirective, AnnotationDirective, PointersDirective, PointerDirective, RangesDirective, RangeDirective, Annotations } from '@syncfusion/ej2-react-circulargauge';\r\nimport { SampleBase } from './sample-base';\r\nimport { CircularGauge } from '@syncfusion/ej2-circulargauge';\r\nimport { DynamicDataSerive } from './customization-service';\r\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }`;\r\nexport class Customization extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.usageGauge = new CircularGauge(DynamicDataSerive.prototype.GetSubGauge1().gauge1);\r\n        this.randomGauge = new CircularGauge(DynamicDataSerive.prototype.GetSubGauge1().gauge2);\r\n        this.isUsage = false;\r\n        this.isClicked = true;\r\n        this.loaded = false;\r\n    }\r\n    random() {\r\n        if (this.isClicked) {\r\n            this.gauge1.destroy();\r\n            this.isClicked = false;\r\n            this.randomGauge.appendTo('#customization-container');\r\n        }\r\n        else {\r\n            document.getElementById('customization-container1').style.display = 'none';\r\n        }\r\n        document.getElementById('customization-container').style.display = 'block';\r\n        // Code for Property Panel\r\n        this.isUsage = false;\r\n        this.pointerValueElement.min = '1000';\r\n        this.pointerValueElement.max = '2000';\r\n        this.pointerValueElement.value = this.randomGauge.axes[0].pointers[0].value.toString();\r\n        document.getElementById('currentPointerValue').innerHTML = 'Current Value <span> &nbsp;&nbsp;&nbsp;' + this.randomGauge.axes[0].pointers[0].value + '</span>';\r\n        this.barColor.value = this.randomGauge.axes[0].pointers[0].color;\r\n        this.rangeColor.value = this.randomGauge.axes[0].ranges[0].color;\r\n        this.pointerColor.value = this.randomGauge.axes[0].pointers[1].color;\r\n        this.pointerColor.enabled = true;\r\n        document.getElementById('pointColor').className = 'e-enabled';\r\n        document.getElementById('pointColor').style.visibility = 'visible';\r\n        let currentLine = document.getElementById('random_line');\r\n        let exisLine = document.getElementById('usage_line');\r\n        currentLine.style.display = 'block';\r\n        exisLine.style.display = 'none';\r\n    }\r\n    usage() {\r\n        if (this.isClicked) {\r\n            this.gauge1.destroy();\r\n            this.isClicked = false;\r\n            this.randomGauge.appendTo('#customization-container');\r\n        }\r\n        document.getElementById('customization-container').style.display = 'none';\r\n        document.getElementById('customization-container1').style.display = 'block';\r\n        this.isUsage = true;\r\n        this.pointerValueElement.min = '0.5';\r\n        this.pointerValueElement.max = '100';\r\n        this.pointerValueElement.value = this.usageGauge.axes[0].pointers[0].value.toString();\r\n        document.getElementById('currentPointerValue').innerHTML = 'Current Value <span> &nbsp;&nbsp;&nbsp;' + this.usageGauge.axes[0].pointers[0].value + '</span>';\r\n        this.barColor.value = this.usageGauge.axes[0].pointers[0].color;\r\n        this.rangeColor.value = this.usageGauge.axes[0].ranges[0].color;\r\n        this.pointerColor.enabled = false;\r\n        document.getElementById('pointColor').className = 'e-disabled';\r\n        let currentLine = document.getElementById('usage_line');\r\n        let exisLine = document.getElementById('random_line');\r\n        currentLine.style.display = 'block';\r\n        exisLine.style.display = 'none';\r\n    }\r\n    pointerValue() {\r\n        let value = +this.pointerValueElement.value;\r\n        if (!this.isClicked) {\r\n            if (this.isUsage) {\r\n                this.usageGauge.setPointerValue(0, 0, value);\r\n                this.usageGauge.setAnnotationValue(0, 0, '<div style=\"color:#666666;font-size:35px;\">' + value + 'GB' + '</div>');\r\n            }\r\n            else {\r\n                this.randomGauge.setPointerValue(0, 0, value);\r\n                this.randomGauge.setPointerValue(0, 1, value);\r\n                this.randomGauge.setAnnotationValue(0, 0, '<div style=\"color:#666666;font-size:35px;\">' + value + '' + '</div>');\r\n            }\r\n        }\r\n        else {\r\n            this.gauge1.setPointerValue(0, 0, value);\r\n            this.gauge1.setPointerValue(0, 1, value);\r\n            this.gauge1.setAnnotationValue(0, 0, '<div style=\"color:#666666;font-size:35px;\">' + value + '' + '</div>');\r\n            this.randomGauge.axes[0].pointers[0].value = value;\r\n            this.randomGauge.axes[0].pointers[1].value = value;\r\n            this.randomGauge.axes[0].annotations[0].content = '<div style=\"color:#666666;font-size:35px;\">' + value + '' + '</div>';\r\n        }\r\n        document.getElementById('currentPointerValue').innerHTML = 'Current Value <span> &nbsp;&nbsp;&nbsp;' + value + '</span>';\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className='control-section row'>\r\n                    <div className='col-lg-8'>\r\n                        <CircularGaugeComponent style={{ display: 'block' }} load={this.load.bind(this)} id='customization-container' loaded={this.onChartLoad.bind(this)} ref={gauge => this.gauge1 = gauge} centerY='70%'>\r\n                            <Inject services={[Annotations]}/>\r\n                            <AxesDirective>\r\n                                <AxisDirective startAngle={300} endAngle={60} radius='80%' minimum={999} maximum={2000} majorTicks={{\r\n            width: 0\r\n        }} lineStyle={{ width: 0 }} minorTicks={{\r\n            width: 0\r\n        }} labelStyle={{\r\n            font: { size: '0px' }\r\n        }}>\r\n                                    <AnnotationsDirective>\r\n                                        <AnnotationDirective content='<div style=\"color:#666666;font-size:35px;\">1800</div>' angle={0} radius='110%' zIndex='1'>\r\n                                        </AnnotationDirective>\r\n                                    </AnnotationsDirective>\r\n                                    <PointersDirective>\r\n                                        <PointerDirective type='RangeBar' value={1800} radius='90%' color='#FFDD00' pointerWidth={30} animation={{\r\n            duration: 0\r\n        }}/>\r\n                                        <PointerDirective value={1800} radius='90%' color='#424242' pointerWidth={9} cap={{ radius: 10, color: '#424242', border: { width: 0 } }} animation={{\r\n            duration: 0\r\n        }}/>\r\n                                    </PointersDirective>\r\n                                    <RangesDirective>\r\n                                        <RangeDirective start={1000} end={2000} radius='90%' color='#E0E0E0' startWidth={30} endWidth={30}/>\r\n                                    </RangesDirective>\r\n                                </AxisDirective>\r\n                            </AxesDirective>\r\n                        </CircularGaugeComponent>\r\n                        <CircularGaugeComponent style={{ display: 'none' }} id=\"customization-container1\"></CircularGaugeComponent>\r\n                    </div>\r\n                    \r\n                    <div className='col-lg-4 property-section'>\r\n                        <PropertyPane title='Properties'>\r\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                                <tbody>\r\n                                    <tr style={{ height: '50px' }}>\r\n                                        <td>\r\n                                            <img id='random' src=\"////npmci.syncfusion.com/development/react/demos/src/circular-gauge/images/gauge-1.png\" alt=\"Customized gauge 1\" style={{ marginLeft: '25px', marginTop: '10px' }} onClick={this.random.bind(this)} ref={d => this.image1 = d}/>\r\n                                            <div id=\"random_line\" style={{ display: \"block\", left: \"0px\", background: \"#ff4081\", \"padding-top\": \"0px\", height: \"2px\", width: \"85px\", margin: \"2px 2px 2px 17px\" }}></div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <img id='usage' src=\"////npmci.syncfusion.com/development/react/demos/src/circular-gauge/images/gauge-2.png\" alt=\"Customized gauge 2\" style={{ marginLeft: '25px', marginTop: '10px' }} onClick={this.usage.bind(this)} ref={d => this.image2 = d}/>\r\n                                            <div id=\"usage_line\" style={{ display: \"none\", left: \"0px\", background: \"#ff4081\", \"padding-top\": \"0px\", height: \"2px\", width: \"85px\", margin: \"2px 2px 2px 17px\" }}></div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr style={{ height: '50px' }}>\r\n                                        <td>\r\n                                            <div id='currentPointerValue'>Current Value <span> &nbsp;&nbsp;&nbsp;1800</span> </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <input type=\"range\" id=\"currentValue\" defaultValue=\"1800\" min=\"1000\" max=\"2000\" style={{ width: \"90%\" }} onChange={this.pointerValue.bind(this)} ref={d => this.pointerValueElement = d}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr style={{ height: '50px' }}>\r\n                                        <td>\r\n                                            <div id='rangebarColor'>RangeBar Color</div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <select id=\"barColor\" className=\"form-control\">\r\n                                                    <option value=\"#FFDD00\">#FFDD00</option>\r\n                                                    <option value=\"#00bdae\">#00bdae</option>\r\n                                                    <option value=\"#FF2680\">#FF2680</option>\r\n                                                </select>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr style={{ height: '50px' }}>\r\n                                        <td>\r\n                                            <div id='range'>Range Color</div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <select id=\"rangeColor\" className=\"form-control\">\r\n                                                    <option value=\"#E0E0E0\">#E0E0E0</option>\r\n                                                    <option value=\"#7bb4eb\">#7bb4eb</option>\r\n                                                    <option value=\"#ea7a57\">#ea7a57</option>\r\n                                                </select>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr style={{ height: '50px' }}>\r\n                                        <td>\r\n                                            <div id='pointColor'>Pointer Color</div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <select id=\"pointerColor\" className=\"form-control\">\r\n                                                    <option value=\"#424242\">#424242</option>\r\n                                                    <option value=\"#6f6fe2\">#6f6fe2</option>\r\n                                                    <option value=\"#9e480e\">#9e480e</option>\r\n                                                </select>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n    onChartLoad(args) {\r\n        if (!this.loaded) {\r\n            this.loaded = true;\r\n            this.barColor = new DropDownList({\r\n                index: 0,\r\n                width: 130,\r\n                change: () => {\r\n                    let barColor = this.barColor.value.toString();\r\n                    if (!this.isClicked) {\r\n                        if (this.isUsage) {\r\n                            this.usageGauge.axes[0].pointers[0].color = barColor;\r\n                            this.usageGauge.refresh();\r\n                        }\r\n                        else {\r\n                            this.randomGauge.axes[0].pointers[0].color = barColor;\r\n                            this.randomGauge.refresh();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.gauge1.axes[0].pointers[0].color = barColor;\r\n                        this.gauge1.refresh();\r\n                        this.randomGauge.axes[0].pointers[0].color = barColor;\r\n                    }\r\n                }\r\n            });\r\n            this.barColor.appendTo('#barColor');\r\n            this.rangeColor = new DropDownList({\r\n                index: 0,\r\n                width: 130,\r\n                change: () => {\r\n                    let barColor = this.rangeColor.value.toString();\r\n                    if (!this.isClicked) {\r\n                        if (this.isUsage) {\r\n                            this.usageGauge.axes[0].ranges[0].color = barColor;\r\n                            this.usageGauge.refresh();\r\n                        }\r\n                        else {\r\n                            this.randomGauge.axes[0].ranges[0].color = barColor;\r\n                            this.randomGauge.refresh();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.gauge1.axes[0].ranges[0].color = barColor;\r\n                        this.gauge1.refresh();\r\n                        this.randomGauge.axes[0].ranges[0].color = barColor;\r\n                    }\r\n                }\r\n            });\r\n            this.rangeColor.appendTo('#rangeColor');\r\n            this.pointerColor = new DropDownList({\r\n                index: 0,\r\n                width: 130,\r\n                change: () => {\r\n                    let barColor = this.pointerColor.value.toString();\r\n                    if (!this.isClicked) {\r\n                        if (!this.isUsage) {\r\n                            this.randomGauge.axes[0].pointers[1].color = barColor;\r\n                            this.randomGauge.axes[0].pointers[1].cap.border.color = barColor;\r\n                            this.randomGauge.axes[0].pointers[1].cap.color = barColor;\r\n                            this.randomGauge.refresh();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.gauge1.axes[0].pointers[1].color = barColor;\r\n                        this.gauge1.axes[0].pointers[1].cap.border.color = barColor;\r\n                        this.gauge1.axes[0].pointers[1].cap.color = barColor;\r\n                        this.gauge1.refresh();\r\n                        this.randomGauge.axes[0].pointers[1].color = barColor;\r\n                        this.randomGauge.axes[0].pointers[1].cap.border.color = barColor;\r\n                        this.randomGauge.axes[0].pointers[1].cap.color = barColor;\r\n                    }\r\n                }\r\n            });\r\n            this.pointerColor.appendTo('#pointerColor');\r\n        }\r\n        let selectedTheme = location.hash.split('/')[1];\r\n        let color;\r\n        if (selectedTheme === 'bootstrap') {\r\n            color = '#a16ee5';\r\n        }\r\n        else if (selectedTheme === 'fabric') {\r\n            color = '#1783FF';\r\n        }\r\n        else {\r\n            color = '#ff4081';\r\n        }\r\n        let exisLine = document.getElementById('usage_line');\r\n        let currentLine = document.getElementById('random_line');\r\n        exisLine.style.background = color;\r\n        currentLine.style.background = color;\r\n    }\r\n}\r\n\nrender(<Customization />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}