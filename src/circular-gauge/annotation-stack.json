{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","annotation-gauge.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Annotations\n */\nvar ej2_circulargauge_1 = require(\"@syncfusion/ej2-circulargauge\");\nvar ej2_circulargauge_2 = require(\"@syncfusion/ej2-circulargauge\");\nej2_circulargauge_1.CircularGauge.Inject(ej2_circulargauge_2.Annotations);\nfunction gauge2() {\n    var gauge2 = new ej2_circulargauge_1.CircularGauge({\n        background: 'transparent',\n        axes: [\n            {\n                startAngle: 0, endAngle: 0,\n                lineStyle: { width: 0 },\n                ranges: [\n                    {\n                        start: 0, end: 3,\n                        startWidth: 4, endWidth: 4,\n                        color: 'rgba(128,128,128)'\n                    }, {\n                        start: 3, end: 12,\n                        startWidth: 4, endWidth: 4,\n                        color: 'rgba(192,192,192)'\n                    }\n                ],\n                annotations: [{\n                        angle: 270,\n                        radius: '40%',\n                        content: null\n                    }, {\n                        angle: 180,\n                        radius: '40%',\n                        content: null\n                    }, {\n                        angle: 90,\n                        radius: '50%',\n                        content: null\n                    }, {\n                        angle: 360, zIndex: '1',\n                        radius: '35%',\n                        content: '<div id=\"tm\" style=\"font-size:10px;\">21-06-17</div>'\n                    }],\n                labelStyle: {\n                    hiddenLabel: 'First',\n                    font: {\n                        size: '0px'\n                    },\n                    autoAngle: false\n                }, majorTicks: {\n                    width: 1,\n                    height: 5,\n                    interval: 1\n                }, minorTicks: {\n                    height: 3,\n                    width: 0.5,\n                    interval: 0.2\n                },\n                minimum: 0,\n                maximum: 12,\n                pointers: [{\n                        radius: '70%',\n                        pointerWidth: 2,\n                        cap: {\n                            radius: 2,\n                            border: {\n                                width: 0.2\n                            }\n                        },\n                        needleTail: {\n                            length: '10%'\n                        }, animation: {\n                            enable: false,\n                            duration: 500\n                        }\n                    }]\n            }\n        ]\n    });\n    return gauge2;\n}\nexports.gauge2 = gauge2;\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for Annotation\r\n */\r\nimport * as React from 'react';\r\nimport { CircularGaugeComponent, AxesDirective, AxisDirective, Inject, AnnotationsDirective, AnnotationDirective, PointersDirective, PointerDirective, RangesDirective, RangeDirective, Annotations } from '@syncfusion/ej2-react-circulargauge';\r\nimport { CircularGauge } from '@syncfusion/ej2-circulargauge';\r\nimport { SampleBase } from './sample-base';\r\nimport { gauge2 } from './annotation-gauge';\r\nimport { Browser } from '@syncfusion/ej2-base';\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }`;\r\nexport class AnnotationsSample extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.intervalExecute = true;\r\n    }\r\n    onChartLoad(args) {\r\n        let id = args.gauge.element.id;\r\n        document.getElementById(id).setAttribute('title', '');\r\n        this.gauge = args.gauge;\r\n        this.updateSubGauge1();\r\n        this.updateSubGauge2();\r\n    }\r\n    ;\r\n    onResized(args) {\r\n        location.reload();\r\n    }\r\n    calcTime(offset) {\r\n        let date = new Date();\r\n        let localTime = date.getTime();\r\n        let localOffset = date.getTimezoneOffset() * 60000;\r\n        let utc = localTime + localOffset;\r\n        let curretDate = new Date(utc + (3600000 * (+offset)));\r\n        return curretDate;\r\n    }\r\n    updateSubGauge1() {\r\n        this.subGauge1 = new CircularGauge(gauge2());\r\n        this.subGauge1.appendTo('#minutes');\r\n    }\r\n    updateSubGauge2() {\r\n        this.subGauge2 = new CircularGauge({\r\n            background: 'transparent',\r\n            axes: [{\r\n                    ranges: [{ start: 0, end: 3, startWidth: 4, endWidth: 4, color: 'rgba(128,128,128)' },\r\n                        { start: 3, end: 12, startWidth: 4, endWidth: 4, color: 'rgba(192,192,192)' }],\r\n                    labelStyle: { hiddenLabel: 'First', font: { size: '0px' }, autoAngle: false },\r\n                    majorTicks: { width: 1, height: 5, interval: 1 },\r\n                    minorTicks: { height: 3, width: 0.5, interval: 0.2 }, minimum: 0, maximum: 12,\r\n                    pointers: [{\r\n                            radius: '70%', pointerWidth: 2,\r\n                            cap: {\r\n                                radius: 2, border: { width: 0.2 }\r\n                            }, needleTail: { length: '10%' }, animation: { enable: false, duration: 500 }\r\n                        }], startAngle: 0, endAngle: 0, lineStyle: { width: 0 }\r\n                }],\r\n            load: ((args) => {\r\n                args.gauge.axes[0].annotations = [{\r\n                        angle: 360, radius: '35%', zIndex: '1', content: '<div id=\"tm\" style=\"font-size:10px;\">21-06-17</div>'\r\n                    }];\r\n            }),\r\n            loaded: ((args) => {\r\n                if (this.intervalExecute) {\r\n                    this.updateTime(false);\r\n                    this.clockInterval = setInterval(() => {\r\n                        this.updateTime(true, this.clockInterval);\r\n                    }, 1000);\r\n                    this.intervalExecute = false;\r\n                }\r\n            })\r\n        });\r\n        this.subGauge2.appendTo('#seconds');\r\n    }\r\n    updateTime(enable, interval) {\r\n        if (document.getElementById('annotation-container') && document.getElementsByClassName('e-circulargauge')) {\r\n            this.getTime('+5.5', this.gauge, enable);\r\n            if (document.getElementById('minutes').childElementCount) {\r\n                this.getTime('+5.5', this.subGauge1, enable, true);\r\n            }\r\n            else {\r\n                this.updateSubGauge1();\r\n                this.getTime('+5.5', this.subGauge1, enable, true);\r\n            }\r\n            if (document.getElementById('seconds').childElementCount) {\r\n                this.getTime('+5.5', this.subGauge2, enable, true);\r\n            }\r\n            else {\r\n                this.updateSubGauge2();\r\n                this.getTime('+5.5', this.subGauge2, enable, true);\r\n            }\r\n        }\r\n        else {\r\n            clearInterval(+interval);\r\n        }\r\n    }\r\n    getTime(offset, gauge, enable, subGauge) {\r\n        let returnTime = this.calcTime(offset);\r\n        let seconds = returnTime.getSeconds() * 12 / 60;\r\n        seconds = seconds === 0 ? 12 : seconds;\r\n        let pointer = gauge.axes[0].pointers[2];\r\n        let pointer1 = gauge.axes[0].pointers[0];\r\n        if (!subGauge) {\r\n            gauge.axes[0].pointers[2].animation.enable = enable;\r\n            pointer.currentValue = seconds === 0.2 ? 0 : pointer.currentValue;\r\n        }\r\n        else {\r\n            pointer1.currentValue = seconds === 0.2 ? 0 : pointer1.currentValue;\r\n            gauge.axes[0].pointers[0].animation.enable = (gauge.element.id === 'seconds' && enable);\r\n        }\r\n        let hour = (returnTime.getHours() + returnTime.getMinutes() / 60) % 12;\r\n        let minutes = returnTime.getMinutes() * 12 / 60 + returnTime.getSeconds() * 12 / 3600;\r\n        let content;\r\n        let hourValue;\r\n        if (subGauge) {\r\n            if (gauge.element.id === 'minutes') {\r\n                content = '<div id=\"tm\" style=\"font-size:8px;\">' + Math.floor(returnTime.getMinutes()) + ' M</div>';\r\n                gauge.setPointerValue(0, 0, minutes);\r\n                gauge.setAnnotationValue(0, 3, content);\r\n            }\r\n            else {\r\n                gauge.setPointerValue(0, 0, seconds);\r\n                content = '<div id=\"tm\" style=\"font-size:8px;\">' + Math.floor(returnTime.getSeconds()) + ' S</div>';\r\n                gauge.axes[0].annotations[0].angle = 0;\r\n                gauge.axes[0].annotations[0].radius = '50%';\r\n                gauge.setAnnotationValue(0, 0, content);\r\n            }\r\n        }\r\n        else {\r\n            gauge.setPointerValue(0, 0, hour);\r\n            gauge.setPointerValue(0, 1, minutes);\r\n            gauge.setPointerValue(0, 2, seconds);\r\n            hourValue = (Math.floor(returnTime.getHours()) % 12);\r\n            content = '<div id=\"hr\" style=\"background-color:rgba(128,128,128);' +\r\n                'color:white;padding:4px;font-size:12px;\">' +\r\n                (hourValue === 0 ? 12 : hourValue) + ':' + Math.floor(returnTime.getMinutes()) +\r\n                (returnTime.getHours() >= 12 ? ' PM' : ' AM') + '</div>';\r\n            gauge.setAnnotationValue(0, 2, content);\r\n            let date = new Date();\r\n            content = '<div id=\"tm\" style=\"font-size:10px;\">' + date.getDate() + '-' +\r\n                (date.getMonth() + 1) + '-' + date.getFullYear() + '</div>';\r\n            gauge.setAnnotationValue(0, 3, content);\r\n        }\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n\r\n                <div className='control-section'>\r\n                    <CircularGaugeComponent load={this.load.bind(this)} id='annotation-container' ref={gauge => this.gauge = gauge} loaded={this.onChartLoad.bind(this)} resized={this.onResized.bind(this)} centerY='45%' titleStyle={{ size: '16px' }}>\r\n                        <Inject services={[Annotations]}/>\r\n                        <AxesDirective>\r\n                            <AxisDirective startAngle={0} endAngle={0} radius={Browser.isDevice ? '90%' : '70%'} minimum={0} maximum={12} majorTicks={{\r\n            width: 2, height: 14, interval: 1\r\n        }} lineStyle={{ width: 0 }} minorTicks={{\r\n            height: 4, width: 1, interval: 0.2\r\n        }} labelStyle={{\r\n            hiddenLabel: 'First', autoAngle: false\r\n        }}>\r\n                                <AnnotationsDirective>\r\n                                    <AnnotationDirective content='<div id=\"minutes\" style=\"width:75px;height:75px;\"></div>' angle={270} radius='50%' zIndex='1'>\r\n                                    </AnnotationDirective>\r\n                                    <AnnotationDirective content='<div id=\"seconds\" style=\"width:75px;height:75px;\"></div>' angle={180} radius='50%' zIndex='1'>\r\n                                    </AnnotationDirective>\r\n                                    <AnnotationDirective content='<div id=\"hr\" style=\"background-color:rgba(128,128,128); color:white;font-size:12px;\">11:11 AM</div>' angle={90} radius='40%' zIndex='1'>\r\n                                    </AnnotationDirective>\r\n                                    <AnnotationDirective content='<div id=\"tm\" style=\"font-size:10px;\">21-06-17</div>' angle={360} radius='50%' zIndex='1'>\r\n                                    </AnnotationDirective>\r\n                                </AnnotationsDirective>\r\n                                <PointersDirective>\r\n                                    <PointerDirective pointerWidth={5} radius='40%' border={{ width: 0 }} cap={{ radius: 0, border: { width: 0 } }} needleTail={{ length: '0%' }} animation={{ enable: false }}>\r\n                                    </PointerDirective>\r\n                                    <PointerDirective radius='60%' pointerWidth={5} border={{ width: 0 }} cap={{ radius: 0, border: { width: 0 } }} needleTail={{ length: '0%' }} animation={{ enable: false }}>\r\n                                    </PointerDirective>\r\n                                    <PointerDirective radius='70%' pointerWidth={1} cap={{ radius: 4, border: { width: 2 } }} border={{ width: 2, }} needleTail={{ length: '20%', border: { width: 2 } }} animation={{ enable: false, duration: 500 }}>\r\n                                    </PointerDirective>\r\n                                </PointersDirective>\r\n                                <RangesDirective>\r\n                                    <RangeDirective start={0} end={3} color='rgba(128,128,128)'/>\r\n                                    <RangeDirective start={3} end={12} color='rgba(192,192,192)'/>\r\n                                </RangesDirective>\r\n                            </AxisDirective>\r\n                        </AxesDirective>\r\n                    </CircularGaugeComponent>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<AnnotationsSample />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}