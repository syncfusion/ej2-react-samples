"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DropDownListSampleOrder = [
    { 'path': 'drop-down-list/default', 'component': 'Default', 'name': 'Default Functionalities', 'description': 'This example demonstrates the default functionalities of the React drop-down list component with minimum configuration.', 'order': '01', 'category': 'Dropdown List', 'api': '{"DropDownList": ["popupHeight", "placeholder", "index", "change"]}', 'sourceFiles': [{ 'displayName': 'default.tsx', 'path': 'src/drop-down-list/default.tsx' }, { 'displayName': 'default.jsx', 'path': 'src/drop-down-list/default.jsx' }, { 'displayName': 'dataSource.json', 'path': 'src/drop-down-list/dataSource.json' }] },
    { 'path': 'drop-down-list/grouping-icon', 'component': 'Grouping', 'name': 'Grouping and Icons', 'description': 'This example demonstrates how to group based on the different categories with individual header and icon support using React drop-down list component.', 'order': '01', 'category': 'Dropdown List', 'api': '{"DropDownList": ["dataSource", "fields", "popupHeight", "placeholder"]}', 'sourceFiles': [{ 'displayName': 'grouping-icon.tsx', 'path': 'src/drop-down-list/grouping-icon.tsx' }, { 'displayName': 'grouping-icon.jsx', 'path': 'src/drop-down-list/grouping-icon.jsx' }, { 'displayName': 'dataSource.json', 'path': 'src/drop-down-list/dataSource.json' }] },
    { 'path': 'drop-down-list/data-binding', 'component': 'Data', 'name': 'Data Binding', 'description': 'This example demonstrates how to bind with local data source and fetch data from remote data service in the React drop-down list component.', 'order': '01', 'category': 'Dropdown List', 'api': '{"DropDownList": ["dataSource", "fields", "query", "sortOrder", "autofill", "popupHeight", "placeholder"]}', 'sourceFiles': [{ 'displayName': 'data-binding.tsx', 'path': 'src/drop-down-list/data-binding.tsx' }, { 'displayName': 'data-binding.jsx', 'path': 'src/drop-down-list/data-binding.jsx' }, { 'displayName': 'dataSource.json', 'path': 'src/drop-down-list/dataSource.json' }] },
    { 'path': 'drop-down-list/filtering', 'component': 'Filtering', 'name': 'Filtering', 'description': 'This example for Syncfusion React drop-down list component explains the choosing an item from the filtered list based on the typed characters.', 'order': '01', 'category': 'Dropdown List', 'api': '{"DropDownList": ["dataSource", "fields", "allowFiltering", "filtering", "filterBarPlaceholder", "popupHeight", "placeholder"]}', 'sourceFiles': [{ 'displayName': 'filtering.tsx', 'path': 'src/drop-down-list/filtering.tsx' }, { 'displayName': 'filtering.jsx', 'path': 'src/drop-down-list/filtering.jsx' }, { 'displayName': 'dataSource.json', 'path': 'src/drop-down-list/dataSource.json' }] },
    { 'path': 'drop-down-list/template', 'component': 'Templates', 'name': 'Templates', 'description': 'This example demonstrates how to customize the appearance of each item in the React drop-down list component pop-up list using the template.', 'order': '01', 'category': 'Dropdown List', 'api': '{"DropDownList": ["dataSource", "fields","headerTemplate", "itemTemplate", "valueTemplate", "popupHeight", "placeholder"]}', 'sourceFiles': [{ 'displayName': 'template.tsx', 'path': 'src/drop-down-list/template.tsx' }, { 'displayName': 'template.jsx', 'path': 'src/drop-down-list/template.jsx' }, { 'displayName': 'dataSource.json', 'path': 'src/drop-down-list/dataSource.json' }] },
    { 'path': 'drop-down-list/cascading', 'component': 'Cascading', 'name': 'Cascading', 'description': 'This example demonstrates how to create a related drop-down list (Cascading DropDownList) using the React drop-down list component.', 'order': '01', 'category': 'Dropdown List', 'api': '{"DropDownList": ["dataSource", "fields", "change", "placeholder", "popupHeight", "value", "enabled"]}', 'sourceFiles': [{ 'displayName': 'cascading.tsx', 'path': 'src/drop-down-list/cascading.tsx' }, { 'displayName': 'cascading.jsx', 'path': 'src/drop-down-list/cascading.jsx' }, { 'displayName': 'dataSource.json', 'path': 'src/drop-down-list/dataSource.json' }] },
    { 'path': 'drop-down-list/inline', 'component': 'Inline', 'name': 'Inline', 'description': 'This example demonstrates how to render the React drop-down list component in line with highlighted contents.', 'order': '01', 'category': 'Dropdown List', 'api': '{"DropDownList": ["dataSource", "fields", "value"]}', 'sourceFiles': [{ 'displayName': 'inline.tsx', 'path': 'src/drop-down-list/inline.tsx' }, { 'displayName': 'inline.jsx', 'path': 'src/drop-down-list/inline.jsx' }, { 'displayName': 'dataSource.json', 'path': 'src/drop-down-list/dataSource.json' }] },
    { 'path': 'drop-down-list/diacritics-filtering', 'component': 'DiacriticsFiltering', 'name': 'Diacritics Filtering', 'description': 'This example demonstrates how to achieve the diacritics filter functionalities in the React drop-down list component.', 'order': '01', 'category': 'Dropdown List', 'api': '{"DropDownList": ["dataSource", "ignoreAccent", "placeholder","allowFiltering"]}', 'sourceFiles': [{ 'displayName': 'diacritics-filtering.tsx', 'path': 'src/drop-down-list/diacritics-filtering.tsx' }, { 'displayName': 'diacritics-filtering.jsx', 'path': 'src/drop-down-list/diacritics-filtering.jsx' }, { 'displayName': 'dataSource.json', 'path': 'src/drop-down-list/dataSource.json' }] }
];
