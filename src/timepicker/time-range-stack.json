{"index.css":".timepicker-control-section.range {\r\n    max-width: 300px;\r\n    margin: 0 auto;\r\n    padding: 2% 0;\r\n}\r\n\r\n.e-bigger .control-pane.range .control-section {\r\n    margin-top: 60px;\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { TimePickerComponent } from '@syncfusion/ej2-react-calendars';\r\nimport { CheckBoxComponent } from '@syncfusion/ej2-react-buttons';\r\nimport { SampleBase } from './sample-base';\r\n\r\nexport class Range extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.isStartTimeChange = true;\r\n    }\r\n    rendereComplete() {\r\n        this.endTimeInput = document.getElementById('maxtimepick');\r\n    }\r\n    changeTime() {\r\n        /*To determine whether we have selected business hours or not*/\r\n        this.isStartTimeChange = false;\r\n        if (this.checkObj.checked) {\r\n            /*Business hours*/\r\n            this.startObject.value = new Date('9/6/2017 9:00');\r\n            this.endObject.enabled = true;\r\n            this.endObject.value = new Date('9/6/2017 18:00');\r\n            this.startObject.readonly = true;\r\n            this.endObject.readonly = true;\r\n        }\r\n        else {\r\n            this.endObject.value = null;\r\n            this.startObject.value = null;\r\n            this.endTimeInput.value = '';\r\n            this.startObject.readonly = false;\r\n            this.endObject.readonly = false;\r\n            this.endObject.enabled = false;\r\n        }\r\n    }\r\n    onEnableEndTime(args) {\r\n        /*Enables end time if start time is selected*/\r\n        if (this.isStartTimeChange) {\r\n            this.endObject.enabled = true;\r\n            this.endObject.value = null;\r\n            this.endTimeInput.value = '';\r\n            this.value = new Date(args.value);\r\n            this.value.setMinutes(this.value.getMinutes() + this.endObject.step);\r\n            this.endObject.min = this.value;\r\n        }\r\n        else {\r\n            this.isStartTimeChange = true;\r\n        }\r\n    }\r\n    render() {\r\n        return (<div className='control-pane range'>\r\n                <div className='control-section'>\r\n                    <div className='timepicker-control-section range'>\r\n                        <TimePickerComponent id=\"mintimepick\" ref={(mintimepick) => { this.startObject = mintimepick; }} change={this.onEnableEndTime.bind(this)}></TimePickerComponent>\r\n                    </div>\r\n                    <div className='timepicker-control-section range'>\r\n                        <TimePickerComponent id=\"maxtimepick\" enabled={false} ref={(maxtimepick) => { this.endObject = maxtimepick; }}></TimePickerComponent>\r\n                    </div>\r\n                    <div className='timepicker-control-section range'>\r\n                        <CheckBoxComponent id=\"checkbox\" ref={(checkbox) => { this.checkObj = checkbox; }} label=\"Business Hours\" change={this.changeTime.bind(this)}></CheckBoxComponent>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<Range />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}