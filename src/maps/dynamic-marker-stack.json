{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Marker cluster map sample\r\n */\r\nimport * as React from \"react\";\r\nimport { NavigationLine, Zoom } from '@syncfusion/ej2-maps';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { ButtonComponent, CheckBoxComponent } from '@syncfusion/ej2-react-buttons';\r\nimport { MapsComponent, Inject, LayersDirective, LayerDirective, Marker, MarkerSettings } from '@syncfusion/ej2-react-maps';\r\nimport { SampleBase } from './sample-base';\r\nimport { PropertyPane } from './property-pane';\r\nimport { TextBoxComponent } from \"@syncfusion/ej2-react-inputs\";\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }\r\n    .property-text {\r\n        font-family: \"Roboto\", \"Segoe UI\", \"GeezaPro\", \"DejaVu Serif\", \"sans-serif\";\r\n        font-size: 13px;\r\n        font-weight: 400;\r\n    }\r\n    .e-input[disabled] {\r\n        border-bottom-color: inherit;\r\n        background-image: none;\r\n    }`;\r\nexport class DynamicMarker extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.markerCheck = true;\r\n        this.navigationLines = [];\r\n        this.latitude = [];\r\n        this.longitude = [];\r\n        this.droplist = [\r\n            { value: 'Image' },\r\n            { value: 'Circle' },\r\n            { value: 'Diamond' },\r\n            { value: 'Star' },\r\n            { value: 'Triangle' }\r\n        ];\r\n        this.emptySavedLinePositions = () => {\r\n            this.latitude = [];\r\n            this.longitude = [];\r\n        };\r\n        this.addMarker = (args) => {\r\n            if (args['latitude'] !== null && args['longitude'] !== null) {\r\n                let layerIndex = (args.target.indexOf('_LayerIndex_') !== -1) ?\r\n                    parseFloat(args.target.split('_LayerIndex_')[1].split('_')[0]) : 0;\r\n                let marker;\r\n                let dynamicMarker = this.mapInstance.layersCollection[layerIndex].markerSettings;\r\n                dynamicMarker.push(new MarkerSettings(this.mapInstance, 'markerSettings', marker));\r\n                let markerIndex = dynamicMarker.length - 1;\r\n                dynamicMarker[markerIndex].visible = true;\r\n                dynamicMarker[markerIndex].dataSource = [\r\n                    { latitude: args['latitude'], longitude: args['longitude'], name: 'dynamicmarker' }\r\n                ];\r\n                dynamicMarker[markerIndex].animationDuration = 0;\r\n                dynamicMarker[markerIndex].fill = '#DB4537';\r\n                dynamicMarker[markerIndex].shape = (this.dropElement.value !== 'Image') ? this.dropElement.value : 'Image';\r\n                dynamicMarker[markerIndex].height = (this.dropElement.value !== 'Image') ? 12 : 20;\r\n                dynamicMarker[markerIndex].width = (this.dropElement.value !== 'Image') ? 12 : 20;\r\n                dynamicMarker[markerIndex].imageUrl = (this.dropElement.value !== 'Image') ? '' : '////npmci.syncfusion.com/development/react/demos/src/maps/images/ballon.png';\r\n            }\r\n        };\r\n        this.addLine = (lineArgs, lineWidth, connectiveLine) => {\r\n            if (lineArgs.latitude != null && lineArgs.longitude != null) {\r\n                this.latitude.push(lineArgs.latitude);\r\n                this.longitude.push(lineArgs.longitude);\r\n            }\r\n            if (this.latitude.length >= 2) {\r\n                this.navigationLines.push({\r\n                    'visible': true,\r\n                    'latitude': [this.latitude[(this.latitude.length - 2)], this.latitude[(this.latitude.length - 1)]],\r\n                    'longitude': [this.longitude[(this.longitude.length - 2)], this.longitude[(this.longitude.length - 1)]],\r\n                    'angle': 0,\r\n                    'color': 'blue',\r\n                    'width': (lineWidth > 5) ? 5 : (((5 >= lineWidth) && (lineWidth >= 1)) ? lineWidth : 1)\r\n                });\r\n                this.mapInstance.layers[0].navigationLineSettings = this.navigationLines;\r\n                if (!connectiveLine) {\r\n                    this.emptySavedLinePositions();\r\n                }\r\n            }\r\n        };\r\n    }\r\n    render() {\r\n        return (<div className='control-panel'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='col-lg-9 control-section'>\r\n                    <MapsComponent id=\"container\" load={this.load} click={this.click.bind(this)} ref={m => this.mapInstance = m} zoomSettings={{\r\n            enable: true\r\n        }}>\r\n                        <Inject services={[Marker, NavigationLine, Zoom]}/>\r\n                        <LayersDirective>\r\n                            <LayerDirective layerType='OSM'>\r\n                            </LayerDirective>\r\n                        </LayersDirective>\r\n                    </MapsComponent>\r\n                    <div>\r\n                        <p>\r\n                            <i>\r\n                                <div>\r\n                                    <p id=\"content\" style={{ fontSize: '16px', color: 'grey', textAlign: 'center' }}>Click on the maps to add marker/navigation line</p>\r\n                                </div>\r\n                            </i>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-lg-3 property-section\">\r\n                    <PropertyPane title='Properties'>\r\n                        <table id=\"property\" title=\"Properties\" style={{ width: '100%' }}>\r\n                            <tbody>\r\n                                <tr style={{ height: '35px' }}>\r\n                                    <td style={{ width: '70%' }}>\r\n                                        <div className=\"property-text\" style={{ padding: '0px', display: 'inline-block' }}>Marker</div>\r\n                                    </td>\r\n                                    <td style={{ width: '50%' }}>\r\n                                        <div>\r\n                                            <CheckBoxComponent id='marker' change={this.markerChange.bind(this)} checked></CheckBoxComponent>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: '35px' }}>\r\n                                    <td style={{ width: '70%' }}>\r\n                                        <div className=\"property-text\" style={{ padding: '0px' }}>Line</div>\r\n                                    </td>\r\n                                    <td style={{ width: '50%' }}>\r\n                                        <div>\r\n                                            <CheckBoxComponent id='line' change={this.lineChange.bind(this)}></CheckBoxComponent>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: '35px' }}>\r\n                                    <td style={{ width: '70%' }}>\r\n                                        <div className=\"property-text\" style={{ padding: '0px' }}>Connecting line</div>\r\n                                    </td>\r\n                                    <td style={{ width: '50%' }}>\r\n                                        <div>\r\n                                            <CheckBoxComponent id='connect' change={this.connectLineChange.bind(this)} ref={d => this.connectLineInstance = d} disabled></CheckBoxComponent>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: '10px' }}></tr>\r\n                                <tr style={{ height: '35px' }}>\r\n                                    <td style={{ width: '70%', padding: '0px' }} className=\"property-text\">\r\n                                        Marker type\r\n                                </td>\r\n                                    <td style={{ width: '10%', marginLeft: '20px' }}>\r\n                                        <DropDownListComponent id='type' fields={{ text: 'value', value: 'value' }} ref={d => this.dropElement = d} style={{ width: '50px', height: '20px' }} dataSource={this.droplist} index={0} placeholder='Select marker shape' width={80}></DropDownListComponent>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: '10px' }}></tr>\r\n                                <tr style={{ height: '35px' }}>\r\n                                    <td style={{ width: '70%' }}>\r\n                                        <div className=\"property-text\" style={{ padding: '0px' }}>Width</div>\r\n                                    </td>\r\n                                    <td style={{ width: '10%' }}>\r\n                                        <TextBoxComponent className=\"e-input\" value='1' style={{ width: '80px' }} id=\"width\" ref={d => this.textElement = d} disabled></TextBoxComponent>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div style={{ marginLeft: '70%' }}>\r\n                                            <ButtonComponent id='togglebtn' cssClass='e-info' isPrimary={true} onClick={this.buttonClick.bind(this)} style={{ textTransform: 'none !important', width: '80px', marginLeft: '-65%', marginTop: '2px' }} ref={d => this.buttonInstance = d}>Clear</ButtonComponent>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </PropertyPane>\r\n                </div>\r\n            </div>);\r\n    }\r\n    click(args) {\r\n        if (this.markerCheck) {\r\n            this.addMarker(args);\r\n        }\r\n        if (this.lineCheck && !this.connectLineCheck) {\r\n            this.addLine(args, this.textElement.value);\r\n        }\r\n        if (this.connectLineCheck) {\r\n            this.addLine(args, this.textElement.value, true);\r\n        }\r\n        if (this.markerCheck || this.lineCheck || this.connectLineCheck) {\r\n            this.mapInstance.refresh();\r\n            if (this.buttonInstance.disabled && (this.mapInstance.layers[0].markerSettings.length ||\r\n                this.mapInstance.layers[0].navigationLineSettings.length)) {\r\n                this.buttonInstance.disabled = false;\r\n            }\r\n        }\r\n    }\r\n    ;\r\n    markerChange(args) {\r\n        this.markerCheck = args.checked;\r\n        this.dropElement.enabled = args.checked;\r\n    }\r\n    ;\r\n    lineChange(args) {\r\n        this.lineCheck = args.checked;\r\n        if (args.checked) {\r\n            this.connectLineInstance.disabled = false;\r\n            this.connectLineInstance.checked = false;\r\n            this.textElement.enabled = true;\r\n        }\r\n        else {\r\n            this.connectLineCheck = args.checked;\r\n            this.emptySavedLinePositions();\r\n            this.connectLineInstance.disabled = true;\r\n            this.connectLineInstance.checked = false;\r\n            this.textElement.enabled = false;\r\n        }\r\n    }\r\n    ;\r\n    connectLineChange(args) {\r\n        this.connectLineCheck = args.checked;\r\n        if (!args.checked) {\r\n            this.emptySavedLinePositions();\r\n        }\r\n    }\r\n    ;\r\n    buttonClick(args) {\r\n        this.mapInstance.layers[0].markerSettings = [];\r\n        this.mapInstance.layers[0].navigationLineSettings = [];\r\n        this.navigationLines = [];\r\n        this.emptySavedLinePositions();\r\n        this.mapInstance.refresh();\r\n        this.buttonInstance.disabled = true;\r\n    }\r\n    ;\r\n}\r\n\nrender(<DynamicMarker />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}