{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for Ranges\r\n */\r\nimport * as React from \"react\";\r\nimport { LinearGaugeComponent, AnnotationsDirective, Annotations, Inject, AnnotationDirective, AxesDirective, AxisDirective, PointersDirective, PointerDirective, RangesDirective, RangeDirective } from '@syncfusion/ej2-react-lineargauge';\r\nimport { PropertyPane } from './property-pane';\r\nimport { SampleBase } from './sample-base';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nexport let range = ['#9ef47a', '#f4f47a', '#ed5e5e'];\r\nexport class Ranges extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.droplist = [\r\n            { value: '0', text: 'Low' },\r\n            { value: '1', text: 'Moderate' },\r\n            { value: '2', text: 'High' },\r\n        ];\r\n        this.modelist = [\r\n            { value: 'font', text: 'Default Color' },\r\n            { value: 'range', text: 'Range Color' }\r\n        ];\r\n    }\r\n    // Code for Property Panel\r\n    indexChange() {\r\n        this.startElement.value = this.gaugeInstance.axes[0].ranges[parseInt(this.indexElement.value, 10)].start.toString();\r\n        this.endElement.value = this.gaugeInstance.axes[0].ranges[parseInt(this.indexElement.value, 10)].end.toString();\r\n        this.startWidthElement.value = this.gaugeInstance.axes[0].ranges[parseInt(this.indexElement.value, 10)].startWidth.toString();\r\n        this.endWidthElement.value = this.gaugeInstance.axes[0].ranges[parseInt(this.indexElement.value, 10)].endWidth.toString();\r\n        this.colorElement.value = this.gaugeInstance.axes[0].ranges[parseInt(this.indexElement.value, 10)].color.toString();\r\n        document.getElementById('startWidthValue').innerHTML = 'Range Start Width <span>&nbsp;&nbsp;&nbsp;' + this.startWidthElement.value;\r\n        document.getElementById('endWidthValue').innerHTML = 'Range End Width <span>&nbsp;&nbsp;&nbsp;' + this.endWidthElement.value;\r\n        document.getElementById('startRangeValue').innerHTML = 'Range Start <span>&nbsp;&nbsp;&nbsp;' + this.startElement.value;\r\n        document.getElementById('endRangeValue').innerHTML = 'Range End <span>&nbsp;&nbsp;&nbsp;' + this.endElement.value;\r\n        this.gaugeInstance.refresh();\r\n    }\r\n    rangeColorChange() {\r\n        this.gaugeInstance.axes[0].labelStyle.useRangeColor = (this.rangeColorElement.value === 'range') ? true : false;\r\n        this.gaugeInstance.refresh();\r\n    }\r\n    startChange() {\r\n        this.gaugeInstance.axes[0].ranges[parseInt(this.indexElement.value, 10)].start = parseInt(this.startElement.value, 10);\r\n        document.getElementById('startRangeValue').innerHTML = 'Range Start <span>&nbsp;&nbsp;&nbsp;' + this.startElement.value;\r\n        this.gaugeInstance.refresh();\r\n    }\r\n    endChange() {\r\n        this.gaugeInstance.axes[0].ranges[parseInt(this.indexElement.value, 10)].end = parseInt(this.endElement.value, 10);\r\n        document.getElementById('endRangeValue').innerHTML = 'Range End <span>&nbsp;&nbsp;&nbsp;' + this.endElement.value;\r\n        this.gaugeInstance.refresh();\r\n    }\r\n    startWidthChange() {\r\n        this.gaugeInstance.axes[0].ranges[parseInt(this.indexElement.value, 10)].startWidth = parseInt(this.startWidthElement.value, 10);\r\n        document.getElementById('startWidthValue').innerHTML = 'Range Start Width <span>&nbsp;&nbsp;&nbsp;' + this.startWidthElement.value;\r\n        this.gaugeInstance.refresh();\r\n    }\r\n    colorChange() {\r\n        this.gaugeInstance.axes[0].ranges[parseInt(this.indexElement.value, 10)].color = this.colorElement.value;\r\n        this.gaugeInstance.refresh();\r\n    }\r\n    endWidthChange() {\r\n        this.gaugeInstance.axes[0].ranges[parseInt(this.indexElement.value, 10)].endWidth = parseInt(this.endWidthElement.value, 10);\r\n        document.getElementById('endWidthValue').innerHTML = 'Range End Width <span>&nbsp;&nbsp;&nbsp;' + this.endWidthElement.value;\r\n        this.gaugeInstance.refresh();\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className='control-section row'>\r\n                    <div className='col-lg-8'>\r\n                        <LinearGaugeComponent load={this.load.bind(this)} id='gauge' ref={gauge => this.gaugeInstance = gauge} orientation='Horizontal'>\r\n                            <Inject services={[Annotations]}/>\r\n                            <AxesDirective>\r\n                                <AxisDirective majorTicks={{ height: 0 }} minorTicks={{ height: 0 }} line={{ width: 0 }} labelStyle={{ format: '{value}%', offset: 30 }}>\r\n                                    <PointersDirective>\r\n                                        <PointerDirective value={35} height={10} width={10} offset={-40} markerType='Triangle' placement='Near'>\r\n                                        </PointerDirective>\r\n                                    </PointersDirective>\r\n                                    <RangesDirective>\r\n                                        <RangeDirective start={0} end={32} startWidth={15} endWidth={15} color='#30B32D'>\r\n                                        </RangeDirective>\r\n                                        <RangeDirective start={32} end={68} startWidth={15} endWidth={15} color='#FFDF00'>\r\n                                        </RangeDirective>\r\n                                        <RangeDirective start={68} end={100} startWidth={15} endWidth={15} color='#F03E3E'>\r\n                                        </RangeDirective>\r\n                                    </RangesDirective>\r\n                                </AxisDirective>\r\n                            </AxesDirective>\r\n                            <AnnotationsDirective>\r\n                                <AnnotationDirective content='<div id=\"pointer\" style=\"width:20px\"><h1 style=\"font-size:18px;\">35</h1></div>' axisIndex={0} axisValue={35} zIndex='1' y={-50}>\r\n                                </AnnotationDirective>\r\n                            </AnnotationsDirective>\r\n                        </LinearGaugeComponent>\r\n                    </div>\r\n                    \r\n                    <div className='col-lg-4 property-section'>\r\n                        <PropertyPane title='Properties'>\r\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div>Range Index</div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <DropDownListComponent width={120} id=\"rangeIndex\" style={{ \"width\": \"auto\" }} change={this.indexChange.bind(this)} ref={d => this.indexElement = d} dataSource={this.droplist} fields={{ text: 'text', value: 'value' }} text=\"Low\" value=\"0\"/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div>Range Color</div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div className=\"e-float-input\" style={{ 'margin-top': '0px' }}>\r\n                                            <input id=\"color\" onChange={this.colorChange.bind(this)} ref={d => this.colorElement = d} type=\"text\" defaultValue=\"#F03E3E\" style={{ \"width\": \"90%\" }}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div>Range Font Color</div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <DropDownListComponent width={120} id=\"rangeColor\" style={{ \"width\": \"auto\" }} change={this.rangeColorChange.bind(this)} ref={d => this.rangeColorElement = d} dataSource={this.modelist} fields={{ text: 'text', value: 'value' }} text=\"Default Color\" value=\"font\"/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td style={{ width: '30%' }}>\r\n                                        <div id='startRangeValue'>Range Start <span>&nbsp;&nbsp;&nbsp;0</span> </div>\r\n                                    </td>\r\n                                    <td style={{ width: '70%' }}>\r\n                                        <div data-role='rangeslider'>\r\n                                            <input type=\"range\" onChange={this.startChange.bind(this)} ref={d => this.startElement = d} name=\"range-min\" id=\"start\" defaultValue=\"0\" min=\"0\" max=\"100\" style={{ width: '100px' }}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td style={{ width: '30%' }}>\r\n                                        <div id='endRangeValue'>Range End <span>&nbsp;&nbsp;&nbsp;32</span> </div>\r\n                                    </td>\r\n                                    <td style={{ width: '70%' }}>\r\n                                        <div data-role='rangeslider'>\r\n                                            <input type=\"range\" onChange={this.endChange.bind(this)} ref={d => this.endElement = d} id=\"end\" defaultValue=\"732\" min=\"0\" max=\"100\" style={{ width: '100px' }}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td style={{ width: '30%' }}>\r\n                                        <div id='startWidthValue'>Range Start Width <span>&nbsp;&nbsp;&nbsp;10</span> </div>\r\n                                    </td>\r\n                                    <td style={{ width: '70%' }}>\r\n                                        <div data-role='rangeslider'>\r\n                                            <input type=\"range\" onChange={this.startWidthChange.bind(this)} ref={d => this.startWidthElement = d} name=\"range-min\" id=\"startWidth\" defaultValue=\"15\" min=\"0\" max=\"30\" style={{ width: '100px' }}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td style={{ width: '30%' }}>\r\n                                        <div id='endWidthValue'>Range End Width <span>&nbsp;&nbsp;&nbsp;10</span> </div>\r\n                                    </td>\r\n                                    <td style={{ width: '70%' }}>\r\n                                        <div data-role='rangeslider'>\r\n                                            <input type=\"range\" onChange={this.endWidthChange.bind(this)} ref={d => this.endWidthElement = d} id=\"endWidth\" defaultValue=\"0\" min=\"0\" max=\"30\" style={{ width: '100px' }}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<Ranges />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}