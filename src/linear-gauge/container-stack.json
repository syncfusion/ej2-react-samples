{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for containers\r\n */\r\nimport * as React from \"react\";\r\nimport { LinearGaugeComponent, AxesDirective, AxisDirective, PointersDirective, PointerDirective } from '@syncfusion/ej2-react-lineargauge';\r\nimport { PropertyPane } from './property-pane';\r\nimport { SampleBase } from './sample-base';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nexport class Container extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.droplist = [\r\n            { value: 'Vertical' },\r\n            { value: 'Horizontal' }\r\n        ];\r\n        this.modelist = [\r\n            { value: 'Thermometer' },\r\n            { value: 'Normal' },\r\n            { value: 'RoundedRectangle' }\r\n        ];\r\n    }\r\n    orienatationChange() {\r\n        this.gaugeInstance.orientation = this.orientationElement.value;\r\n        this.gaugeInstance.refresh();\r\n    }\r\n    containerChange() {\r\n        this.gaugeInstance.container.type = this.containerElement.value;\r\n        this.gaugeInstance.refresh();\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className='control-section row'>\r\n                    <div className='col-lg-8'>\r\n                        <LinearGaugeComponent load={this.load.bind(this)} id='gauge' ref={gauge => this.gaugeInstance = gauge} title='Temperature Measure' container={{ width: 13, type: 'Thermometer', roundedCornerRadius: 5 }}>\r\n                            <AxesDirective>\r\n                                <AxisDirective minimum={0} maximum={180} line={{ width: 0 }} minorTicks={{ color: '#9e9e9e' }} majorTicks={{ interval: 20, color: '#9e9e9e' }}>\r\n                                    <PointersDirective>\r\n                                        <PointerDirective value={90} height={13} width={13} type='Bar' roundedCornerRadius={5} color='#f02828'>\r\n                                        </PointerDirective>\r\n                                    </PointersDirective>\r\n                                </AxisDirective>\r\n                                <AxisDirective minimum={0} maximum={180} opposedPosition={true} line={{ width: 0 }} majorTicks={{ interval: 20 }}>\r\n                                    <PointersDirective>\r\n                                        <PointerDirective width={0}>\r\n                                        </PointerDirective>\r\n                                    </PointersDirective>\r\n                                </AxisDirective>\r\n                            </AxesDirective>\r\n                        </LinearGaugeComponent>\r\n                    </div>\r\n                    <div className='col-lg-4 property-section'>\r\n                    \r\n                        <PropertyPane title='Properties'>\r\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td>\r\n                                        <div>Orientation</div>\r\n                                    </td>\r\n                                    <td>\r\n                                    <div>\r\n                                    <DropDownListComponent width={120} id=\"orientationMode\" style={{ \"width\": \"90%\" }} change={this.orienatationChange.bind(this)} className=\"form-control\" ref={d => this.orientationElement = d} dataSource={this.droplist} fields={{ text: 'value', value: 'value' }} value=\"Vertical\"/>\r\n                                    </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td>\r\n                                        <div>Container Type</div>\r\n                                    </td>\r\n                                    <td>\r\n                                    <div style={{ paddingBottom: '20px', width: '90%' }}>\r\n                                    <DropDownListComponent width={120} id=\"containerMode\" style={{ \"width\": \"90%\" }} change={this.containerChange.bind(this)} className=\"form-control\" ref={d => this.containerElement = d} dataSource={this.modelist} fields={{ text: 'value', value: 'value' }} value=\"Thermometer\"/>\r\n                                    </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<Container />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}