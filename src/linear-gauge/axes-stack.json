{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for Axes\r\n */\r\nimport * as React from \"react\";\r\nimport { LinearGaugeComponent, AxesDirective, Annotations, AxisDirective, PointersDirective, PointerDirective, AnnotationDirective, AnnotationsDirective, Inject } from '@syncfusion/ej2-react-lineargauge';\r\nimport { PropertyPane } from './property-pane';\r\nimport { SampleBase } from './sample-base';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nexport class Axes extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.droplist = [\r\n            { value: 'Marker' },\r\n            { value: 'Bar' }\r\n        ];\r\n        this.placelist = [\r\n            { value: 'Near' },\r\n            { value: 'Center' },\r\n            { value: 'Far' }\r\n        ];\r\n    }\r\n    // Code for Property Panel\r\n    minChange() {\r\n        this.gaugeInstance.axes[0].minimum = parseInt(this.rangeMinElement.value, 10);\r\n        document.getElementById('minValue').innerHTML = 'Axis Minimum <span>&nbsp;&nbsp;&nbsp;' + this.rangeMinElement.value;\r\n        this.gaugeInstance.annotations[0].axisValue = this.gaugeInstance.axes[0].pointers[0].currentValue;\r\n        this.gaugeInstance.refresh();\r\n    }\r\n    maxChange() {\r\n        this.gaugeInstance.axes[0].maximum = parseInt(this.rangeMaxElement.value, 10);\r\n        document.getElementById('maxValue').innerHTML = 'Axis Maximum <span>&nbsp;&nbsp;&nbsp;' + this.rangeMaxElement.value;\r\n        this.gaugeInstance.annotations[0].axisValue = this.gaugeInstance.axes[0].pointers[0].currentValue;\r\n        this.gaugeInstance.refresh();\r\n    }\r\n    inverseChange() {\r\n        this.gaugeInstance.axes[0].isInversed = this.inversedElement.checked;\r\n        this.gaugeInstance.refresh();\r\n    }\r\n    opposedChange() {\r\n        this.gaugeInstance.axes[0].opposedPosition = this.opposedElement.checked;\r\n        if (this.opposedElement.checked) {\r\n            this.gaugeInstance.axes[0].pointers[0].placement = 'Near';\r\n            this.gaugeInstance.axes[0].pointers[0].markerType = 'Triangle';\r\n            this.gaugeInstance.axes[0].pointers[0].offset = -20;\r\n            this.gaugeInstance.axes[0].labelStyle.offset = 0;\r\n            this.gaugeInstance.annotations[0].x = 10;\r\n            this.gaugeInstance.annotations[0].y = -60;\r\n        }\r\n        else {\r\n            this.gaugeInstance.axes[0].pointers[0].placement = 'Far';\r\n            this.gaugeInstance.axes[0].pointers[0].offset = 0;\r\n            this.gaugeInstance.axes[0].pointers[0].offset = 30;\r\n            this.gaugeInstance.axes[0].pointers[0].markerType = 'InvertedTriangle';\r\n            this.gaugeInstance.axes[0].labelStyle.offset = 38;\r\n            this.gaugeInstance.annotations[0].x = 10;\r\n            this.gaugeInstance.annotations[0].y = 60;\r\n        }\r\n        this.gaugeInstance.refresh();\r\n    }\r\n    labelChange() {\r\n        this.gaugeInstance.axes[0].labelStyle.format = this.labelElement.value.indexOf('{value}') > -1 ? this.labelElement.value : this.gaugeInstance.axes[0].labelStyle.format;\r\n        this.gaugeInstance.refresh();\r\n    }\r\n    typeChange() {\r\n        this.gaugeInstance.axes[0].pointers[0].type = this.typeElement.value;\r\n        this.placeElement.enabled = (this.typeElement.value === 'Marker');\r\n        this.gaugeInstance.refresh();\r\n    }\r\n    placeChange() {\r\n        this.gaugeInstance.axes[0].pointers[0].placement = this.placeElement.value;\r\n        this.gaugeInstance.refresh();\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className='control-section row'>\r\n                    <div className='col-lg-8'>\r\n                        <LinearGaugeComponent load={this.load.bind(this)} id='gauge' ref={gauge => this.gaugeInstance = gauge} orientation='Horizontal'>\r\n                            <Inject services={[Annotations]}/>\r\n                            <AxesDirective>\r\n                                <AxisDirective line={{ color: '#9E9E9E' }} majorTicks={{ color: '#9E9E9E', interval: 10 }} minorTicks={{ color: '#9E9E9E', interval: 2 }} labelStyle={{ offset: 48 }}>\r\n                                    <PointersDirective>\r\n                                        <PointerDirective value={10} height={15} width={15} color='#757575' offset={30}>\r\n                                        </PointerDirective>\r\n                                    </PointersDirective>\r\n                                </AxisDirective>\r\n                            </AxesDirective>\r\n                            <AnnotationsDirective>\r\n                                <AnnotationDirective content='<div id=\"pointer\" style=\"width:70px\"><h1 style=\"font-size:14px;\">${axes[0].pointers[0].currentValue} MPH</h1></div>' axisIndex={0} axisValue={10} x={10} y={60} zIndex='1'>\r\n                                </AnnotationDirective>\r\n                            </AnnotationsDirective>\r\n                        </LinearGaugeComponent>\r\n                    </div>\r\n                    \r\n                    <div className='col-lg-4 property-section'>\r\n                        <PropertyPane title='Properties'>\r\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%', marginBottom: '20px' }}>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td style={{ width: '30%' }}>\r\n                                        <div id='minValue'>Axis Minimum <span>&nbsp;&nbsp;&nbsp;40</span> </div>\r\n                                    </td>\r\n                                    <td style={{ width: '70%' }}>\r\n                                        <div data-role='rangeslider'>\r\n                                            <input type=\"range\" onChange={this.minChange.bind(this)} ref={d => this.rangeMinElement = d} name=\"range-min\" step='5' id=\"min\" defaultValue=\"0\" min=\"0\" max=\"100\" style={{ width: '100px' }}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td style={{ width: '30%' }}>\r\n                                        <div id='maxValue'>Axis Maximum <span>&nbsp;&nbsp;&nbsp;80</span> </div>\r\n                                    </td>\r\n                                    <td style={{ width: '70%' }}>\r\n                                        <div data-role='rangeslider'>\r\n                                            <input type=\"range\" onChange={this.maxChange.bind(this)} ref={d => this.rangeMaxElement = d} step='5' id=\"max\" defaultValue=\"80\" min=\"0\" max=\"100\" style={{ width: '100px' }}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div>Axis Inversed</div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <input type=\"checkbox\" onChange={this.inverseChange.bind(this)} ref={d => this.inversedElement = d} id='axisInversed'/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div>Axis Opposed</div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <input type=\"checkbox\" onChange={this.opposedChange.bind(this)} ref={d => this.opposedElement = d} id='opposed'/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div>Label Format</div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div className=\"e-float-input\" style={{ 'margin-top': '0px' }}>\r\n                                            <input id=\"format\" onChange={this.labelChange.bind(this)} ref={d => this.labelElement = d} type=\"text\" defaultValue=\"{value}\" style={{ \"width\": \"100px\" }}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div>Pointer type</div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <DropDownListComponent width={120} id=\"pointerType\" style={{ \"width\": \"auto\" }} change={this.typeChange.bind(this)} ref={d => this.typeElement = d} dataSource={this.droplist} fields={{ text: 'value', value: 'value' }} value=\"Marker\"/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div>Marker Placement</div>\r\n                                    </td>\r\n                                    <td>\r\n                                    <div>\r\n                                            <DropDownListComponent width={120} id=\"pointerPlace\" style={{ \"width\": \"auto\" }} change={this.placeChange.bind(this)} ref={d => this.placeElement = d} dataSource={this.placelist} fields={{ text: 'value', value: 'value' }} value=\"Far\"/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<Axes />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}