{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from \"react\";\r\nimport { LinearGaugeComponent, GaugeTooltip, AnnotationsDirective, Annotations, Inject, AnnotationDirective, AxesDirective, AxisDirective, PointersDirective, PointerDirective } from '@syncfusion/ej2-react-lineargauge';\r\nimport { SampleBase } from './sample-base';\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }`;\r\n/**\r\n * Linear gauge tooltip sample\r\n */\r\nexport class Tooltip extends SampleBase {\r\n    render() {\r\n        return (<div className='control-pane'>\r\n\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n\r\n                </style>\r\n                <div className='control-section'>\r\n                    <LinearGaugeComponent id='tooltipContainer' ref={gauge => this.gaugeInstance = gauge} orientation='Horizontal' axisLabelRender={this.labelRender.bind(this)} load={this.gaugeLoad.bind(this)} loaded={this.gaugeLoaded.bind(this)} resized={this.gaugeResized.bind(this)} tooltipRender={this.tooltipRender.bind(this)} container={{ width: 140, border: { width: 2, color: '#a6a6a6' } }} tooltip={{ enable: true }}>\r\n                        <Inject services={[Annotations, GaugeTooltip]}/>\r\n                        <AxesDirective>\r\n                            <AxisDirective minimum={0} maximum={10} majorTicks={{ interval: 1 }} minorTicks={{ interval: 0.2 }} line={{ offset: 140 }} labelStyle={{ font: { color: '#000000' } }}>\r\n                                <PointersDirective>\r\n                                    <PointerDirective type='Bar' value={5.4} color='#ff66b3' offset={15}>\r\n                                    </PointerDirective>\r\n                                </PointersDirective>\r\n                            </AxisDirective>\r\n                            <AxisDirective opposedPosition={true} minimum={0} maximum={25} majorTicks={{ interval: 1 }} minorTicks={{ interval: 0.2 }} line={{ offset: -140 }} labelStyle={{ font: { color: '#000000' } }}>\r\n                                <PointersDirective>\r\n                                    <PointerDirective type='Bar' value={16.5} color='#4d94ff' offset={-15}>\r\n                                    </PointerDirective>\r\n                                </PointersDirective>\r\n                            </AxisDirective>\r\n                        </AxesDirective>\r\n                        <AnnotationsDirective>\r\n                            <AnnotationDirective content='<div id=\"first\"><h1 style=\"font-size:15px;color: #686868\"\">Inches</h1></div>' axisIndex={0} axisValue={5.4} x={35} y={-58} zIndex='1'>\r\n                            </AnnotationDirective>\r\n                            <AnnotationDirective content='<div id=\"second\"><h1 style=\"font-size:15px;color: #686868\"\">Centimeters</h1></div>' axisIndex={1} axisValue={16.5} x={50} y={52} zIndex='1'>\r\n                            </AnnotationDirective>\r\n                        </AnnotationsDirective>\r\n                    </LinearGaugeComponent>\r\n                </div>\r\n            </div>);\r\n    }\r\n    tooltipRender(args) {\r\n        args.content = (args.axis.visibleRange.max === 25) ? Number(args.content).toFixed(1) + ' cm' : Number(args.content).toFixed(1) + ' in';\r\n    }\r\n    gaugeLoad(args) {\r\n        let selectedTheme = location.hash.split('/')[1];\r\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\r\n        args.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\r\n        if (args.gauge.theme.toLowerCase().indexOf('dark') > 1 || args.gauge.theme.toLowerCase() === 'highcontrast') {\r\n            args.gauge.annotations[0].content = '<div id=\"first\"><h1 style=\"font-size:15px; color: #DADADA\">Inches</h1></div>';\r\n            args.gauge.annotations[1].content = '<div id=\"second\"><h1 style=\"font-size:15px; color: #DADADA\">Centimeters</h1></div>';\r\n        }\r\n        let width = Number(document.getElementById('tooltipContainer').offsetWidth);\r\n        if (width < 500) {\r\n            args.gauge.axes[1].majorTicks.interval = 2;\r\n            args.gauge.axes[1].minorTicks.interval = 1;\r\n            args.gauge.orientation = 'Vertical';\r\n            args.gauge.annotations[0].x = -57;\r\n            args.gauge.annotations[0].y = -30;\r\n            args.gauge.annotations[1].x = 50;\r\n            args.gauge.annotations[1].y = -45;\r\n        }\r\n        else {\r\n            args.gauge.axes[1].majorTicks.interval = 1;\r\n            args.gauge.axes[1].minorTicks.interval = 0.5;\r\n            args.gauge.orientation = 'Horizontal';\r\n            args.gauge.annotations[0].x = 35;\r\n            args.gauge.annotations[0].y = -58;\r\n            args.gauge.annotations[1].x = 50;\r\n            args.gauge.annotations[1].y = 52;\r\n        }\r\n    }\r\n    gaugeLoaded(args) {\r\n        if (document.getElementById('tooltipContainer')) {\r\n            if (args.gauge.availableSize.width < 500) {\r\n                document.getElementById('tooltipContainer_Annotation_0').style.transform = 'rotate(270deg)';\r\n                document.getElementById('tooltipContainer_Annotation_1').style.transform = 'rotate(270deg)';\r\n            }\r\n            else {\r\n                document.getElementById('tooltipContainer_Annotation_0').style.transform = '';\r\n                document.getElementById('tooltipContainer_Annotation_1').style.transform = '';\r\n            }\r\n        }\r\n    }\r\n    labelRender(args) {\r\n        if (args.axis.visibleRange.min === args.value || args.axis.visibleRange.max === args.value) {\r\n            args.text = '';\r\n        }\r\n    }\r\n    gaugeResized(args) {\r\n        if (args.currentSize.width < 500) {\r\n            this.gaugeInstance.axes[1].majorTicks.interval = 2;\r\n            this.gaugeInstance.axes[1].minorTicks.interval = 1;\r\n            this.gaugeInstance.orientation = 'Vertical';\r\n            this.gaugeInstance.annotations[0].x = -57;\r\n            this.gaugeInstance.annotations[0].y = -30;\r\n            this.gaugeInstance.annotations[1].x = 50;\r\n            this.gaugeInstance.annotations[1].y = -45;\r\n        }\r\n        else {\r\n            this.gaugeInstance.axes[1].majorTicks.interval = 1;\r\n            this.gaugeInstance.axes[1].minorTicks.interval = 0.5;\r\n            this.gaugeInstance.orientation = 'Horizontal';\r\n            this.gaugeInstance.annotations[0].x = 35;\r\n            this.gaugeInstance.annotations[0].y = -58;\r\n            this.gaugeInstance.annotations[1].x = 50;\r\n            this.gaugeInstance.annotations[1].y = 52;\r\n        }\r\n    }\r\n}\r\n\nrender(<Tooltip />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}