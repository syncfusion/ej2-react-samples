{"index.css":".e-btn-hide {\r\n    display: none;\r\n}\r\n\r\n.dlgbtn {\r\n    margin-right: 20px;\r\n}\r\n\r\n.control-section {\r\n    height: 100%;\r\n}\r\n\r\n#target{\r\n    height: 100%;\r\n}\r\n\r\n#promptDialog table {\r\n    border-collapse: separate;\r\n    border-spacing: 10px;\r\n    width: 85%;\r\n    margin: 0px -5px 0px;\r\n}\r\n\r\n.control-pane .dialog-target {\r\n    min-height: 350px;\r\n}","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { DialogComponent } from '@syncfusion/ej2-react-popups';\r\nimport { SampleBase } from './sample-base';\r\n\r\nexport class Basic extends SampleBase {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hideAlertDialog: false,\r\n            hideConfirmDialog: false,\r\n            hidePromptDialog: false\r\n        };\r\n        this.alertButtonRef = element => {\r\n            this.alertButtonEle = element;\r\n        };\r\n        this.confirmButtonRef = element => {\r\n            this.confirmButtonEle = element;\r\n        };\r\n        this.promptButtonRef = element => {\r\n            this.promptButtonEle = element;\r\n        };\r\n        this.spanRef = element => {\r\n            this.spanEle = element;\r\n        };\r\n        this.alertButtons = [{\r\n                // Click the footer buttons to hide the Dialog\r\n                click: () => {\r\n                    this.setState({ hideAlertDialog: false });\r\n                },\r\n                buttonModel: { content: 'Dismiss', isPrimary: true }\r\n            }];\r\n        this.confirmButton = [{\r\n                click: () => {\r\n                    this.setState({ hideConfirmDialog: false });\r\n                },\r\n                buttonModel: { content: 'Yes', isPrimary: true }\r\n            },\r\n            {\r\n                click: () => {\r\n                    this.setState({ hideConfirmDialog: false });\r\n                },\r\n                buttonModel: { content: 'No' }\r\n            }];\r\n        this.promptButtons = [{\r\n                click: () => {\r\n                    this.setState({ hidePromptDialog: false });\r\n                },\r\n                buttonModel: { content: 'Connect', isPrimary: true }\r\n            },\r\n            {\r\n                click: () => {\r\n                    this.setState({ hidePromptDialog: false });\r\n                },\r\n                buttonModel: { content: 'Cancel' }\r\n            }];\r\n        this.animationSettings = { effect: 'None' };\r\n    }\r\n    buttonClick(args) {\r\n        if (args.target.innerHTML.toLowerCase() == 'alert') {\r\n            this.setState({ hideAlertDialog: true });\r\n        }\r\n        else if (args.target.innerHTML.toLowerCase() == 'confirm') {\r\n            this.setState({ hideConfirmDialog: true });\r\n        }\r\n        else if (args.target.innerHTML.toLowerCase() == 'prompt')\r\n            this.setState({ hidePromptDialog: true });\r\n    }\r\n    dialogClose() {\r\n        this.setState({\r\n            hideAlertDialog: false,\r\n            hideConfirmDialog: false,\r\n            hidePromptDialog: false\r\n        });\r\n        this.alertButtonEle.style.display = 'inline-block';\r\n        this.confirmButtonEle.style.display = 'inline-block';\r\n        this.promptButtonEle.style.display = 'inline-block';\r\n    }\r\n    dialogOpen() {\r\n        this.alertButtonEle.style.display = 'none';\r\n        this.confirmButtonEle.style.display = 'none';\r\n        this.promptButtonEle.style.display = 'none';\r\n    }\r\n    onFocus(args) {\r\n        this.spanEle.classList.add('e-input-focus');\r\n    }\r\n    onBlur(args) {\r\n        this.spanEle.classList.remove('e-input-focus');\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div id='target' className='col-lg-12 control-section dialog-target'>\r\n                    \r\n                    <button className=\"e-control e-btn dlgbtn\" ref={this.alertButtonRef} onClick={this.buttonClick.bind(this)} id=\"alertBtn\">Alert</button>\r\n                    <button className=\"e-control e-btn dlgbtn\" ref={this.confirmButtonRef} onClick={this.buttonClick.bind(this)} id=\"confirmBtn\">Confirm</button>\r\n                    <button className=\"e-control e-btn dlgbtn\" ref={this.promptButtonRef} onClick={this.buttonClick.bind(this)} id=\"promptBtn\">Prompt</button>\r\n                    \r\n                    <DialogComponent id=\"alertDialog\" header='Low Battery' visible={this.state.hideAlertDialog} animationSettings={this.animationSettings} width='250px' content='10% of battery remaining' ref={alertdialog => this.alertDialogInstance = alertdialog} target='#target' buttons={this.alertButtons} open={this.dialogOpen.bind(this)} close={this.dialogClose.bind(this)}></DialogComponent>\r\n                    \r\n                    <DialogComponent id=\"confirmDialog\" header='Delete Multiple Items' visible={this.state.hideConfirmDialog} showCloseIcon={true} animationSettings={this.animationSettings} width='400px' content='Are you sure you want to permanently delete these items ?' ref={dialog => this.confirmDialogInstance = dialog} target='#target' buttons={this.confirmButton} open={this.dialogOpen.bind(this)} close={this.dialogClose.bind(this)}></DialogComponent>\r\n                    \r\n                    <DialogComponent id=\"promptDialog\" header='Join Wi-Fi network' visible={this.state.hidePromptDialog} showCloseIcon={true} animationSettings={this.animationSettings} width='330px' ref={dialog => this.promptDialogInstance = dialog} target='#target' buttons={this.promptButtons} open={this.dialogOpen.bind(this)} close={this.dialogClose.bind(this)}>\r\n                        \r\n                        <table>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>SSID:</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><b>AndroidAP</b></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Password:</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <span id='password' ref={this.spanRef} className=\"e-input-group\">\r\n                                            <input type=\"password\" onFocus={this.onFocus.bind(this)} onBlur={this.onBlur.bind(this)} name=\"Required\" className=\"e-input\"/>\r\n                                        </span></td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </DialogComponent>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<Basic />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}