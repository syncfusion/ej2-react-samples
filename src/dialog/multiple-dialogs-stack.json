{"index.css":".control-pane .dialog-target {\r\n    min-height: 350px;\r\n}","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { DialogComponent } from '@syncfusion/ej2-react-popups';\r\nimport { SampleBase } from './sample-base';\r\n\r\nexport class MultipleDialogs extends SampleBase {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hideDialog1: true,\r\n            hideDialog2: false\r\n        };\r\n        this.buttonRef = element => {\r\n            this.buttonEle = element;\r\n        };\r\n        this.dlgButton = [{\r\n                click: () => {\r\n                    this.setState({ hideDialog2: true });\r\n                },\r\n                buttonModel: { content: 'Next', isPrimary: true }\r\n            }];\r\n        this.dlg2Button = [{\r\n                click: () => {\r\n                    this.setState({ hideDialog2: false });\r\n                },\r\n                buttonModel: { content: 'Close', isPrimary: true }\r\n            }];\r\n        this.animationSettings = { effect: 'None' };\r\n    }\r\n    buttonClick(args) {\r\n        this.setState({ hideDialog1: true });\r\n    }\r\n    dialogClose() {\r\n        this.setState({ hideDialog1: false });\r\n        this.buttonEle.style.display = 'inline-block';\r\n    }\r\n    dialogClose2() {\r\n        this.setState({ hideDialog2: false });\r\n        this.buttonEle.style.display = 'none';\r\n    }\r\n    dialogOpen() {\r\n        this.buttonEle.style.display = 'none';\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div id='target' className='col-lg-12 control-section dialog-target'>\r\n                    <button className='e-control e-btn dlgbtn' ref={this.buttonRef} onClick={this.buttonClick.bind(this)} id='dialogBtn'>Open Dialog</button>\r\n                    \r\n                    <DialogComponent id='multipleDialog' header='First Dialog' visible={this.state.hideDialog1} showCloseIcon={true} animationSettings={this.animationSettings} width='330px' ref={defaultDialog => this.defaultDialogInstance = defaultDialog} target='#target' buttons={this.dlgButton} open={this.dialogOpen.bind(this)} close={this.dialogClose.bind(this)}>\r\n                        <p>\r\n                            This is the first dialog and acts as a parent dialog, you can open the second (child) dialog by clicking \"Next\".\r\n            </p>\r\n                    </DialogComponent>\r\n                    \r\n                    <DialogComponent id='secondDialog' isModal={true} header='Second Dialog' showCloseIcon={true} visible={this.state.hideDialog2} animationSettings={this.animationSettings} width='285px' ref={secondDialog => this.secondDialogInstance = secondDialog} target='#target' buttons={this.dlg2Button} open={this.dialogOpen.bind(this)} close={this.dialogClose2.bind(this)}>\r\n                        <p>\r\n                            This is the second dialog and act as a child dialog.\r\n            </p>\r\n                    </DialogComponent>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<MultipleDialogs />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}