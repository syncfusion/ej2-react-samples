{"index.css":".template{\r\n    height: 100%;\r\n    width: 100%;\r\n}\r\n\r\n#edit_target #dialogBtn {\r\n    display: none;\r\n}\r\n\r\n#edit_target .dialog-text {\r\n    height: 35px;\r\n    border: 1px solid #80808029;\r\n    vertical-align: middle;\r\n    line-height: 35px;\r\n    border-radius: 4px;\r\n    padding-left: 12px;\r\n    margin-bottom: 5%;\r\n    cursor: pointer;\r\n}\r\n\r\n@media (max-width: 650px) {\r\n    #togglebtn{\r\n        display: none;\r\n    }\r\n}\r\n\r\n#edit_target .add-widget-button {\r\n    padding: 10px;\r\n    text-align: center;\r\n    margin-bottom: 10px;\r\n    cursor: pointer;\r\n    font-size: 15px;\r\n}\r\n\r\n#edit_dashboard.e-dashboardlayout.e-control .e-panel:hover span {\r\n    display: block;\r\n}\r\n\r\n#edit_dashboard.e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header {\r\n    padding: 10px;\r\n    height: 35px;\r\n    margin: 0 15px 0 15px;\r\n    border-bottom: 2px solid #e6e9ed !important;\r\n}\r\n\r\n\r\n#edit_dashboard .e-panel-content {\r\n    height: calc(100% - 35px) !important;\r\n    overflow: hidden;\r\n    width:100%;\r\n}\r\n\r\n#edit_dashboard.e-dashboardlayout.e-control .e-panel,\r\n#edit_dashboard.e-dashboardlayout.e-control .e-panel:hover,\r\n#edit_dashboard.e-dashboardlayout.e-control .e-panel:active {\r\n    border: 1px solid #bbb;\r\n}\r\n\r\n#edit_target .e-dialog .e-dlg-header-content {\r\n    border-bottom: none;\r\n    padding: 18px 18px 18px 20px;\r\n}\r\n\r\n#edit_target .edit::before {\r\n    content: '\\e501';\r\n    font-family: 'e-sb-icons';\r\n    margin-left: -7px;\r\n    vertical-align: middle;\r\n}\r\n\r\n#edit_target .save::before {\r\n    content: '\\e500';\r\n    font-family: 'e-sb-icons';\r\n    margin-left: -7px;\r\n    vertical-align: middle;\r\n}\r\n/* custom code start*/\r\n@font-face {\r\n    font-family: 'e-sb-icons';\r\n    src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMjttR/MAAAEoAAAAVmNtYXDlEOVaAAABjAAAADhnbHlmAM1kuQAAAcwAAAD8aGVhZBRipc8AAADQAAAANmhoZWEIUQQEAAAArAAAACRobXR4DAAAAAAAAYAAAAAMbG9jYQA6AH4AAAHEAAAACG1heHABEQA4AAABCAAAACBuYW1lWD3y/QAAAsgAAAIlcG9zdNvk7cwAAATwAAAANQABAAAEAAAAAFwEAAAAAAAD9AABAAAAAAAAAAAAAAAAAAAAAwABAAAAAQAApr5cCV8PPPUACwQAAAAAANioMG8AAAAA2KgwbwAAAAAD9AP0AAAACAACAAAAAAAAAAEAAAADACwABAAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5QDlAQQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAEAAAAAAAAAgAAAAMAAAAUAAMAAQAAABQABAAkAAAABAAEAAEAAOUB//8AAOUA//8AAAABAAQAAAABAAIAAAAAADoAfgAEAAAAAAP0A/MAAwALABkAIwAAAREhEQEVMzUzFSE1IxEhETMVMxEjESERIxEjERUhESM1IzUhAx79xAEeR0j+m0gB9I9HR/02SEcD6EdI/KcBcf7iAR4CPI+P19f+4gEeSPzuAWb+mgNa/KZHA1lIRwAAAAMAAAAAA/QD9AADAAgAKwAACQEnCQEDJQEnNwcXPwc1Lw8PBgLH/ko2Abb9uT4BGQJC2m0/2z8HBgUFAwMCAQIEBQcICQoLDA0NDw8PEA0NDQwLCwsCkf5KNgG2/l7+5z4CQ9puP9s/CgsLCwwNDQ0QDw8PDQ0MCwoJCAcFBAIBAQEDAwUFBgAAABIA3gABAAAAAAAAAAEAAAABAAAAAAABAAcAAQABAAAAAAACAAcACAABAAAAAAADAAcADwABAAAAAAAEAAcAFgABAAAAAAAFAAsAHQABAAAAAAAGAAcAKAABAAAAAAAKACwALwABAAAAAAALABIAWwADAAEECQAAAAIAbQADAAEECQABAA4AbwADAAEECQACAA4AfQADAAEECQADAA4AiwADAAEECQAEAA4AmQADAAEECQAFABYApwADAAEECQAGAA4AvQADAAEECQAKAFgAywADAAEECQALACQBIyBlai1pY29uUmVndWxhcmVqLWljb25lai1pY29uVmVyc2lvbiAxLjBlai1pY29uRm9udCBnZW5lcmF0ZWQgdXNpbmcgU3luY2Z1c2lvbiBNZXRybyBTdHVkaW93d3cuc3luY2Z1c2lvbi5jb20AIABlAGoALQBpAGMAbwBuAFIAZQBnAHUAbABhAHIAZQBqAC0AaQBjAG8AbgBlAGoALQBpAGMAbwBuAFYAZQByAHMAaQBvAG4AIAAxAC4AMABlAGoALQBpAGMAbwBuAEYAbwBuAHQAIABnAGUAbgBlAHIAYQB0AGUAZAAgAHUAcwBpAG4AZwAgAFMAeQBuAGMAZgB1AHMAaQBvAG4AIABNAGUAdAByAG8AIABTAHQAdQBkAGkAbwB3AHcAdwAuAHMAeQBuAGMAZgB1AHMAaQBvAG4ALgBjAG8AbQAAAAACAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMBAgEDAQQABHNhdmUEZWRpdAAAAAAA) format('truetype');\r\n    font-weight: normal;\r\n    font-style: normal;\r\n}\r\n\r\n[class^=\"sf-icon-\"],\r\n[class*=\" sf-icon-\"] {\r\n    font-family: 'e-sb-icons' !important;\r\n    speak: none;\r\n    font-size: 55px;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-variant: normal;\r\n    text-transform: none;\r\n    line-height: 1;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n}\r\n/* custom code end*/\r\n#edit_dashboard{\r\n    display: block;\r\n}","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from \"react\";\r\nimport { SampleBase } from './sample-base';\r\nimport { DashboardLayoutComponent, PanelsDirective, PanelDirective } from \"@syncfusion/ej2-react-layouts\";\r\nimport { ButtonComponent } from \"@syncfusion/ej2-react-buttons\";\r\nimport { DialogComponent } from '@syncfusion/ej2-react-popups';\r\nimport { AccumulationChartComponent, AccumulationSeriesCollectionDirective, AccumulationSeriesDirective, Inject, AccumulationLegend, PieSeries, AccumulationTooltip, ColumnSeries, SeriesCollectionDirective, SeriesDirective, AccumulationDataLabel, ChartComponent, Legend, Category, Tooltip, DataLabel, SplineAreaSeries, DateTime, } from \"@syncfusion/ej2-react-charts\";\r\n\r\nexport class DynamicWidget extends SampleBase {\r\n    constructor(props) {\r\n        super(props);\r\n        this.count = 4;\r\n        this.cellSpacing = [10, 10];\r\n        this.state = {\r\n            hideDialog: false\r\n        };\r\n    }\r\n    btnClick() {\r\n        if (this.btnobj.element.classList.contains('e-active')) {\r\n            this.dashboardObj.allowDragging = true;\r\n            this.dashboardObj.allowResizing = true;\r\n            this.btnobj.content = \"Save\";\r\n            this.btnobj.iconCss = 'save';\r\n            document.getElementById('dialogBtn').style.display = 'block';\r\n        }\r\n        else {\r\n            this.dashboardObj.allowDragging = false;\r\n            this.dashboardObj.allowResizing = false;\r\n            this.btnobj.content = \"Edit\";\r\n            this.btnobj.iconCss = 'edit';\r\n            document.getElementById('dialogBtn').style.display = 'none';\r\n        }\r\n    }\r\n    onPanelResize(args) {\r\n        if (args.element && args.element.querySelector('.e-panel-container .e-panel-content div div')) {\r\n            let chartObj = (args.element.querySelector('.e-panel-container .e-panel-content div div')).ej2_instances[0];\r\n            chartObj.height = '95%';\r\n            chartObj.width = '100%';\r\n            chartObj.refresh();\r\n        }\r\n    }\r\n    content(data) {\r\n        return (<div id=\"dialogcontent\">\r\n                <div>\r\n                    <div id=\"linetemplate\">\r\n                        <p className=\"dialog-text\">Linechart (1x1) </p>\r\n                    </div>\r\n                    <div id=\"pietemplate\">\r\n                        <p className=\"dialog-text\">Piechart (1x1) </p>\r\n                    </div>\r\n                    <div id=\"splinetemplate\">\r\n                        <p className=\"dialog-text\">Splinechart (2x1) </p>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n    onAdd() {\r\n        let proxy = this;\r\n        let panel = [{\r\n                \"id\": this.count.toString() + \"_layout\", \"sizeX\": 2, \"sizeY\": 2, \"row\": 0, \"col\": 0,\r\n                header: \"<div>Panel\" + this.count.toString() + \"</div>\", content: \"<div></div>\"\r\n            }];\r\n        this.count = this.count + 1;\r\n        proxy.dashboardObj.addPanel(panel[0]);\r\n    }\r\n    splineTemplate() {\r\n        let splineData1 = [\r\n            { x: new Date(2002, 0, 1), y: 2.2 }, { x: new Date(2003, 0, 1), y: 3.4 },\r\n            { x: new Date(2004, 0, 1), y: 2.8 }, { x: new Date(2005, 0, 1), y: 1.6 },\r\n            { x: new Date(2006, 0, 1), y: 2.3 }, { x: new Date(2007, 0, 1), y: 2.5 },\r\n            { x: new Date(2008, 0, 1), y: 2.9 }, { x: new Date(2009, 0, 1), y: 3.8 },\r\n            { x: new Date(2010, 0, 1), y: 1.4 }, { x: new Date(2011, 0, 1), y: 3.1 }\r\n        ];\r\n        let splineData2 = [\r\n            { x: new Date(2002, 0, 1), y: 2 }, { x: new Date(2003, 0, 1), y: 1.7 },\r\n            { x: new Date(2004, 0, 1), y: 1.8 }, { x: new Date(2005, 0, 1), y: 2.1 },\r\n            { x: new Date(2006, 0, 1), y: 2.3 }, { x: new Date(2007, 0, 1), y: 1.7 },\r\n            { x: new Date(2008, 0, 1), y: 1.5 }, { x: new Date(2009, 0, 1), y: 2.8 },\r\n            { x: new Date(2010, 0, 1), y: 1.5 }, { x: new Date(2011, 0, 1), y: 2.3 }\r\n        ];\r\n        return (<div className=\"template\">\r\n            <ChartComponent style={{ \"height\": \"100%\", \"width\": \"100%\", textAlign: \"center\" }} primaryXAxis={{\r\n            valueType: 'DateTime',\r\n            labelFormat: 'MMM',\r\n            majorGridLines: { width: 0 },\r\n            intervalType: 'Months',\r\n            edgeLabelPlacement: 'Shift'\r\n        }} primaryYAxis={{\r\n            labelFormat: '{value}%',\r\n            lineStyle: { width: 0 },\r\n            maximum: 4, interval: 1,\r\n            majorTickLines: { width: 0 },\r\n            minorTickLines: { width: 0 }\r\n        }} chartArea={{ border: { width: 0 } }}>\r\n                        <Inject services={[SplineAreaSeries, DateTime, Legend]}/>\r\n                        <SeriesCollectionDirective>\r\n                            <SeriesDirective dataSource={splineData1} xName='x' yName='y' name='Jan' opacity={0.5} type='SplineArea' width={2} fill='rgb(239, 183, 202)'>\r\n                            </SeriesDirective>\r\n                            <SeriesDirective dataSource={splineData2} xName='x' yName='y' name='Feb' opacity={0.5} type='SplineArea' width={2} fill='rgb(0, 189, 174)'>\r\n                            </SeriesDirective>\r\n                        </SeriesCollectionDirective>\r\n                    </ChartComponent>\r\n            </div>);\r\n    }\r\n    lineTemplate() {\r\n        let data1 = [{ x: 'Jan', y: 46 }, { x: 'Feb', y: 27 }, { x: 'Mar', y: 26 }];\r\n        let data2 = [{ x: 'Jan', y: 37 }, { x: 'Feb', y: 23 }, { x: 'Mar', y: 18 }];\r\n        let data3 = [{ x: 'Jan', y: 38 }, { x: 'Feb', y: 17 }, { x: 'Mar', y: 26 }];\r\n        return (<div className=\"template\">\r\n             <ChartComponent style={{ \"height\": \"100%\", \"width\": \"100%\" }} primaryXAxis={{ valueType: 'Category', interval: 1, majorGridLines: { width: 0 } }} primaryYAxis={{\r\n            majorGridLines: { width: 0 },\r\n            majorTickLines: { width: 0 }, lineStyle: { width: 0 }, labelStyle: { color: 'transparent' }\r\n        }} chartArea={{ border: { width: 0 } }} tooltip={{ enable: true }}>\r\n                        <Inject services={[ColumnSeries, Legend, Tooltip, Category, DataLabel]}/>\r\n                        <SeriesCollectionDirective>\r\n                            <SeriesDirective dataSource={data1} xName='x' yName='y' name='Jan' type='Column' marker={{ dataLabel: { visible: false } }} fill='#00bdae'>\r\n                            </SeriesDirective>\r\n                            <SeriesDirective dataSource={data2} xName='x' yName='y' name='Feb' type='Column' marker={{ dataLabel: { visible: false } }} fill='#e56691'>\r\n                            </SeriesDirective>\r\n                            <SeriesDirective dataSource={data3} xName='x' yName='y' name='Mar' type='Column' marker={{ dataLabel: { visible: false } }} fill='#357cd2'>\r\n                            </SeriesDirective>\r\n                        </SeriesCollectionDirective>\r\n                    </ChartComponent>\r\n            </div>);\r\n    }\r\n    pieTemplate() {\r\n        let pieData = [\r\n            { \"x\": \"Jan\", y: 12.5, text: \"January\" },\r\n            { \"x\": \"Feb\", y: 25, text: \"February\" },\r\n            { \"x\": \"Mar\", y: 50, text: \"March\" },\r\n        ];\r\n        let piePalette = [\"#00bdaed1\", \"#357cd2bf\", \"#e56691e8\"];\r\n        return (<div className=\"template\">\r\n            <AccumulationChartComponent style={{ \"height\": \"100%\", \"width\": \"100%\" }} legendSettings={{ visible: false }} enableSmartLabels={true} enableAnimation={true} center={{ x: '50%', y: '50%' }} tooltip={{ enable: true, header: '<b>${point.x}</b>', format: 'Composition : <b>${point.y}%</b>' }}>\r\n              <Inject services={[AccumulationLegend, PieSeries, AccumulationTooltip, AccumulationDataLabel]}/>\r\n              <AccumulationSeriesCollectionDirective>\r\n                <AccumulationSeriesDirective dataSource={pieData} name='Earnings' xName='x' yName='y' dataLabel={{ visible: true, position: 'Inside', name: 'value', font: { fontWeight: '600' } }} radius='100%' innerRadius=\"40%\" palettes={['#00bdae', '#357cd2', '#e56691']}>\r\n                </AccumulationSeriesDirective>\r\n              </AccumulationSeriesCollectionDirective>\r\n            </AccumulationChartComponent>\r\n        </div>);\r\n    }\r\n    render() {\r\n        return (<div>\r\n                <div id='edit_target' className=\"control-section\">\r\n                <div>\r\n                    <div style={{ \"width\": \"100%\", \"height\": \"30px\" }}>\r\n                        <ButtonComponent cssClass='e-outline e-flat e-primary' ref={(scope) => { this.btnobj = scope; }} iconCss='edit' isToggle={true} onClick={this.btnClick.bind(this)} style={{ \"float\": \"right\", \"width\": \"75px\" }}>\r\n                            Edit\r\n                        </ButtonComponent>\r\n                    </div>\r\n                    <div style={{ \"padding\": \"5px\", \"text-align\": \"end\" }}>\r\n                        <div id=\"dialogBtn\" className=\"add-widget-button e-control e-btn e-lib\" onClick={this.dlgClick.bind(this)}>\r\n                            Add New Widget\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <DashboardLayoutComponent id=\"edit_dashboard\" columns={2} cellSpacing={this.cellSpacing} ref={(scope) => { this.dashboardObj = scope; }} resizeStop={this.onPanelResize.bind(this)} allowResizing={false} allowDragging={false}>\r\n                <PanelsDirective>\r\n                    <PanelDirective sizeX={1} sizeY={1} row={0} col={0} content={this.lineTemplate} header=\"<div>Line Chart</div>\"></PanelDirective>\r\n                    <PanelDirective sizeX={1} sizeY={1} row={0} col={1} content={this.pieTemplate} header=\"<div>Pie Chart</div>\"></PanelDirective>\r\n                    <PanelDirective sizeX={2} sizeY={1} row={1} col={0} content={this.splineTemplate} header=\"<div>Spline Chart</div>\"></PanelDirective>\r\n                </PanelsDirective>\r\n                </DashboardLayoutComponent>\r\n                </div>\r\n                <DialogComponent id=\"listdialog\" width=\"500px\" height=\"260px\" visible={this.state.hideDialog} header={\"Add a widget\"} showCloseIcon={true} animationSettings={{ effect: 'Zoom' }} isModal={true} target='#edit_target' ref={(scope) => { this.dialogObj = scope; }} content={this.content}>\r\n                </DialogComponent>\r\n            </div>);\r\n    }\r\n    dlgClick() {\r\n        this.setState({ hideDialog: true });\r\n        document.getElementById('linetemplate').onclick = () => {\r\n            let countValue = this.count.toString();\r\n            let panel = [{\r\n                    'id': '_layout' + countValue, 'sizeX': 1, 'sizeY': 1, 'row': 0, 'col': 0,\r\n                    header: '<div>Line Chart</div>', content: this.lineTemplate\r\n                }];\r\n            this.count = this.count + 1;\r\n            this.dashboardObj.addPanel(panel[0]);\r\n            this.setState({ hideDialog: false });\r\n        };\r\n        document.getElementById('pietemplate').onclick = () => {\r\n            let countValue = this.count.toString();\r\n            let panel = [{\r\n                    'id': '_layout' + countValue, 'sizeX': 1, 'sizeY': 1, 'row': 0, 'col': 0,\r\n                    header: '<div>Pie Chart</div>', content: this.pieTemplate\r\n                }];\r\n            this.count = this.count + 1;\r\n            this.dashboardObj.addPanel(panel[0]);\r\n            this.setState({ hideDialog: false });\r\n        };\r\n        document.getElementById('splinetemplate').onclick = () => {\r\n            let countValue = this.count.toString();\r\n            let panel = [{\r\n                    'id': '_layout' + countValue, 'sizeX': 2, 'sizeY': 1, 'row': 0, 'col': 0,\r\n                    header: '<div>Spline Chart</div>', content: this.splineTemplate\r\n                }];\r\n            this.count = this.count + 1;\r\n            this.dashboardObj.addPanel(panel[0]);\r\n            this.setState({ hideDialog: false });\r\n        };\r\n    }\r\n}\r\n\nrender(<DynamicWidget />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}