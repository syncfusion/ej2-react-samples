{"index.css":"/* custom code start*/\r\n#EventLog b {\r\n  color: #388e3c;\r\n}\r\n\r\nhr {\r\n  margin: 1px 10px 1px 0px;\r\n  border-top: 1px solid #eee;\r\n}\r\n/* custom code end*/\r\n\r\n.e-schedule .e-schedule-toolbar .e-icon-schedule-print::before {\r\n  content: '\\e973';\r\n}\r\n\r\n.e-schedule .e-schedule-toolbar .e-icon-schedule-pdf::before {\r\n  content: '\\e7c8';\r\n}\r\n\r\n.custom-field-row {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.multi-prop div {\r\n  padding-left: 0;\r\n  padding-top: 0;\r\n}","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","helper.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Schedule util\n */\nfunction applyCategoryColor(args, currentView) {\n    var categoryColor = args.data.CategoryColor;\n    if (!args.element || !categoryColor) {\n        return;\n    }\n    if (currentView === 'Agenda') {\n        args.element.firstChild.style.borderLeftColor = categoryColor;\n    }\n    else {\n        args.element.style.backgroundColor = categoryColor;\n    }\n}\nexports.applyCategoryColor = applyCategoryColor;\nfunction generateObject(start, end) {\n    if (start === void 0) { start = new Date(2017, 6, 1).getTime(); }\n    if (end === void 0) { end = new Date(2018, 6, 31).getTime(); }\n    var data = [];\n    var names = [\n        'Story Time for Kids', 'Camping with Turtles', 'Wildlife Warriors', 'Parrot Talk', 'Birds of Prey', 'Croco World',\n        'Venomous Snake Hunt', 'Face Painting & Drawing events', 'Pony Rides', 'Feed the Giants', 'Jungle Treasure Hunt',\n        'Endangered Species Program', 'Black Cockatoos Playtime', 'Walk with Jungle King', 'Trained Climbers', 'Playtime with Chimpanzees',\n        'Meet a small Mammal', 'Amazon Fish Feeding', 'Elephant Ride'\n    ];\n    var dayCount = 1000 * 60 * 60;\n    for (var a = start, id = 1; a < end; a += (dayCount * 24) * 2) {\n        var count = Math.floor((Math.random() * 9) + 1);\n        for (var b = 0; b < count; b++) {\n            var hour = Math.floor(Math.random() * 100) % 24;\n            var minutes = Math.round((Math.floor(Math.random() * 100) % 60) / 5) * 5;\n            var nCount = Math.floor(Math.random() * names.length);\n            var startDate = new Date(new Date(a).setHours(hour, minutes));\n            var endDate = new Date(startDate.getTime() + (dayCount * 2.5));\n            data.push({\n                Id: id,\n                Subject: names[nCount],\n                StartTime: startDate,\n                EndTime: endDate,\n                IsAllDay: (id % 10) ? false : true\n            });\n            id++;\n        }\n    }\n    return data;\n}\nexports.generateObject = generateObject;\nfunction getReadOnlyEventsData() {\n    var msPerDay = 86400000;\n    var msPerHour = 3600000;\n    var currentTime = new Date().setMinutes(0, 0, 0);\n    var readonlyEventsData = [\n        {\n            Id: 1,\n            Subject: 'Project Workflow Analysis',\n            StartTime: new Date(currentTime + msPerDay * -2 + msPerHour * 2),\n            EndTime: new Date(currentTime + msPerDay * -2 + msPerHour * 4),\n            IsReadonly: true\n        }, {\n            Id: 2,\n            Subject: 'Project Requirement Planning',\n            StartTime: new Date(currentTime + msPerDay * -1 + msPerHour * 2),\n            EndTime: new Date(currentTime + msPerDay * -1 + msPerHour * 4),\n            IsReadonly: true\n        }, {\n            Id: 3,\n            Subject: 'Meeting with Developers',\n            StartTime: new Date(currentTime + msPerDay * -1 + msPerHour * -3),\n            EndTime: new Date(currentTime + msPerDay * -1 + msPerHour * -1),\n            IsReadonly: true\n        }, {\n            Id: 4,\n            Subject: 'Team Fun Activities',\n            StartTime: new Date(currentTime + msPerHour * -4),\n            EndTime: new Date(currentTime + msPerHour * -2),\n            IsReadonly: true\n        }, {\n            Id: 5,\n            Subject: 'Quality Analysis',\n            StartTime: new Date(currentTime + msPerHour * 1),\n            EndTime: new Date(currentTime + msPerHour * 3),\n            IsReadonly: false\n        }, {\n            Id: 6,\n            Subject: 'Customer meeting â€“ John Mackenzie',\n            StartTime: new Date(currentTime + msPerHour * 5),\n            EndTime: new Date(currentTime + msPerHour * 6),\n            IsReadonly: false\n        }, {\n            Id: 7,\n            Subject: 'Meeting with Core team',\n            StartTime: new Date(currentTime + msPerHour * 9),\n            EndTime: new Date(currentTime + msPerHour * 10),\n            IsReadonly: false\n        }, {\n            Id: 8,\n            Subject: 'Project Review',\n            StartTime: new Date(currentTime + msPerDay * 1 + msPerHour * 3),\n            EndTime: new Date(currentTime + msPerDay * 1 + msPerHour * 5),\n            IsReadonly: false\n        }, {\n            Id: 9,\n            Subject: 'Project demo meeting with Andrew',\n            StartTime: new Date(currentTime + msPerDay * 1 + msPerHour * -4),\n            EndTime: new Date(currentTime + msPerDay * 1 + msPerHour * -3),\n            IsReadonly: false\n        }, {\n            Id: 10,\n            Subject: 'Online Hosting of Project',\n            StartTime: new Date(currentTime + msPerDay * 2 + msPerHour * 4),\n            EndTime: new Date(currentTime + msPerDay * 2 + msPerHour * 6),\n            IsReadonly: false\n        }\n    ];\n    return readonlyEventsData;\n}\nexports.getReadOnlyEventsData = getReadOnlyEventsData;\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { ScheduleComponent, ViewsDirective, ViewDirective, Agenda, Inject } from '@syncfusion/ej2-react-schedule';\r\nimport { generateObject } from './helper';\r\nimport { NumericTextBoxComponent } from '@syncfusion/ej2-react-inputs';\r\n\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { SampleBase } from './sample-base';\r\nimport { PropertyPane } from './property-pane';\r\n/**\r\n * Schedule agenda sample\r\n */\r\nexport class AgendaView extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.virtualScrollOptions = [\r\n            { text: 'True', value: true },\r\n            { text: 'False', value: false }\r\n        ];\r\n        this.hideEmptyAgendaDaysOptions = [\r\n            { text: 'True', value: true },\r\n            { text: 'False', value: false }\r\n        ];\r\n        this.fields = { text: 'text', value: 'value' };\r\n    }\r\n    onVitrualChange(args) {\r\n        this.scheduleObj.views = [{ option: 'Agenda', allowVirtualScrolling: args.value }];\r\n    }\r\n    onEmptyAgendaDaysChange(args) {\r\n        this.scheduleObj.hideEmptyAgendaDays = args.value;\r\n    }\r\n    onCountChange(args) {\r\n        this.scheduleObj.agendaDaysCount = args.value !== null ? args.value : 7;\r\n    }\r\n    render() {\r\n        return (<div className='schedule-control-section'>\r\n        <div className='col-lg-9 control-section'>\r\n          <div className='control-wrapper'>\r\n            <ScheduleComponent width='100%' height='650px' ref={schedule => this.scheduleObj = schedule} currentView='Agenda' selectedDate={new Date(2018, 1, 15)} eventSettings={{ dataSource: generateObject() }}>\r\n              <ViewsDirective>\r\n                <ViewDirective option='Agenda' allowVirtualScrolling={false}/>\r\n              </ViewsDirective>\r\n              <Inject services={[Agenda]}/>\r\n            </ScheduleComponent>\r\n          </div>\r\n        </div>\r\n        <div className='col-lg-3 property-section'>\r\n          <PropertyPane title='Properties'>\r\n            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n              <tbody>\r\n                <tr style={{ height: '50px' }}>\r\n                  <td style={{ width: '30%' }}>\r\n                    <div className='col-md-4' style={{ paddingTop: '8px' }}>Allow Virtual Scrolling</div>\r\n                  </td>\r\n                  <td style={{ width: '70%' }}>\r\n                    <div>\r\n                      <DropDownListComponent style={{ padding: '6px' }} value={false} dataSource={this.virtualScrollOptions} fields={this.fields} change={this.onVitrualChange.bind(this)}></DropDownListComponent>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n                <tr style={{ height: '50px' }}>\r\n                  <td style={{ width: '30%' }}>\r\n                    <div className='col-md-4' style={{ paddingTop: '8px' }}>Hide empty Days</div>\r\n                  </td>\r\n                  <td style={{ width: '70%' }}>\r\n                    <div>\r\n                      <DropDownListComponent style={{ padding: '6px' }} value={true} dataSource={this.hideEmptyAgendaDaysOptions} fields={this.fields} change={this.onEmptyAgendaDaysChange.bind(this)}></DropDownListComponent>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n                <tr style={{ height: '50px' }}>\r\n                  <td style={{ width: '30%' }}>\r\n                    <div className='col-md-4' style={{ paddingTop: '8px' }}>Days Count</div>\r\n                  </td>\r\n                  <td style={{ width: '70%' }}>\r\n                    <div>\r\n                      <NumericTextBoxComponent format='n0' value={7} min={1} max={15} change={this.onCountChange.bind(this)}></NumericTextBoxComponent>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </PropertyPane>\r\n        </div>\r\n      </div>);\r\n    }\r\n}\r\n\nrender(<AgendaView />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}