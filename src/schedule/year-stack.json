{"index.css":"/* custom code start*/\r\n#EventLog b {\r\n  color: #388e3c;\r\n}\r\n\r\nhr {\r\n  margin: 1px 10px 1px 0px;\r\n  border-top: 1px solid #eee;\r\n}\r\n/* custom code end*/\r\n\r\n.e-schedule .e-schedule-toolbar .e-icon-schedule-print::before {\r\n  content: '\\e973';\r\n}\r\n\r\n.e-schedule .e-schedule-toolbar .e-icon-schedule-pdf::before {\r\n  content: '\\e7c8';\r\n}\r\n\r\n.custom-field-row {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.multi-prop div {\r\n  padding-left: 0;\r\n  padding-top: 0;\r\n}","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { ScheduleComponent, ViewsDirective, ViewDirective, Inject, TimelineYear } from '@syncfusion/ej2-react-schedule';\r\n\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { SampleBase } from './sample-base';\r\nimport { PropertyPane } from './property-pane';\r\n/**\r\n * Schedule Year view sample\r\n */\r\nexport class Year extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.data = this.generateEvents();\r\n        this.orientationOptions = [\r\n            { text: 'Horizontal', value: 'Horizontal' },\r\n            { text: 'Vertical', value: 'Vertical' }\r\n        ];\r\n        this.fields = { text: 'text', value: 'value' };\r\n    }\r\n    orientationChange(args) {\r\n        this.scheduleObj.views = [{ option: 'TimelineYear', orientation: args.value }];\r\n        this.scheduleObj.dataBind();\r\n    }\r\n    onEventRendered(args) {\r\n        this.applyEventColor(args);\r\n    }\r\n    generateEvents(count = 250, yearCount = 5, date = new Date()) {\r\n        let names = [\r\n            'Bering Sea Gold', 'Technology', 'Maintenance', 'Meeting', 'Travelling', 'Annual Conference', 'Birthday Celebration',\r\n            'Farewell Celebration', 'Wedding Aniversary', 'Alaska: The Last Frontier', 'Deadest Catch', 'Sports Day',\r\n            'MoonShiners', 'Close Encounters', 'HighWay Thru Hell', 'Daily Planet', 'Cash Cab', 'Basketball Practice',\r\n            'Rugby Match', 'Guitar Class', 'Music Lessons', 'Doctor checkup', 'Brazil - Mexico', 'Opening ceremony', 'Final presentation'\r\n        ];\r\n        let colors = [\r\n            '#ff8787', '#9775fa', '#748ffc', '#3bc9db', '#69db7c',\r\n            '#fdd835', '#748ffc', '#9775fa', '#df5286', '#7fa900',\r\n            '#fec200', '#5978ee', '#00bdae', '#ea80fc'\r\n        ];\r\n        let startDate = new Date(date.getFullYear() - 2, 0, 1);\r\n        let endDate = new Date(date.getFullYear() + 2, 11, 31);\r\n        let dateCollections = [];\r\n        for (let a = 0, id = 1; a < count; a++) {\r\n            let start = new Date(Math.random() * (endDate.getTime() - startDate.getTime()) + startDate.getTime());\r\n            let end = new Date(new Date(start.getTime()).setHours(start.getHours() + 1));\r\n            let nCount = Math.floor(Math.random() * names.length);\r\n            let n = Math.floor(Math.random() * colors.length);\r\n            dateCollections.push({\r\n                Id: id,\r\n                Subject: names[nCount],\r\n                StartTime: new Date(start.getTime()),\r\n                EndTime: new Date(end.getTime()),\r\n                IsAllDay: (id % 10) ? true : false,\r\n                EventColor: colors[n]\r\n            });\r\n            id++;\r\n        }\r\n        return dateCollections;\r\n    }\r\n    applyEventColor(args) {\r\n        let eventColor = args.data.EventColor;\r\n        if (!args.element || !eventColor) {\r\n            return;\r\n        }\r\n        else {\r\n            args.element.style.backgroundColor = eventColor;\r\n        }\r\n    }\r\n    render() {\r\n        return (<div className='schedule-control-section'>\r\n                <div className='col-lg-9 control-section'>\r\n                    <div className='control-wrapper'>\r\n                        <ScheduleComponent width='100%' height='555px' ref={schedule => this.scheduleObj = schedule} currentView='WorkWeek' eventSettings={{ dataSource: this.data }} eventRendered={this.onEventRendered.bind(this)}>\r\n                            <ViewsDirective>\r\n                                <ViewDirective option='TimelineYear' displayName='Horizontal Year'/>\r\n                            </ViewsDirective>\r\n                            <Inject services={[TimelineYear]}/>\r\n                        </ScheduleComponent>\r\n                    </div>\r\n                </div>\r\n                <div className='col-lg-3 property-section'>\r\n                    <PropertyPane title='Properties'>\r\n                        <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                            <tbody>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td style={{ width: '30%' }}>\r\n                                        <div className='col-md-4' style={{ paddingTop: '8px' }}>Orientation</div>\r\n                                    </td>\r\n                                    <td style={{ width: '70%' }}>\r\n                                        <div>\r\n                                            <DropDownListComponent style={{ padding: '6px' }} value={'Horizontal'} dataSource={this.orientationOptions} fields={this.fields} change={this.orientationChange.bind(this)} popupWidth='180px'>\r\n                                            </DropDownListComponent>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </PropertyPane>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<Year />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}