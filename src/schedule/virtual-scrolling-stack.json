{"index.css":".virtual-scrolling.e-schedule .template-wrap .subject {\r\n    padding: 10px 25px;\r\n}\r\n\r\n.virtual-scrolling.e-schedule .template-wrap {\r\n    width: 100%;\r\n}\r\n\r\n.virtual-scrolling.e-schedule .e-timeline-month-view .e-resource-left-td {\r\n    width: 150px;\r\n}","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { ScheduleComponent, ViewsDirective, ViewDirective, Inject, ResourcesDirective, ResourceDirective, Resize, DragAndDrop, TimelineMonth } from '@syncfusion/ej2-react-schedule';\r\n\r\nimport { SampleBase } from './sample-base';\r\n/**\r\n * schedule virtual scrolling sample\r\n */\r\nexport class VirtualScrolling extends SampleBase {\r\n    timelineEventTemplate(props) {\r\n        return (<div className=\"template-wrap\" style={{ background: props.PrimaryColor }}>\r\n            <div className=\"subject\" style={{ background: props.SecondaryColor }}>{props.Subject}</div>\r\n        </div>);\r\n    }\r\n    generateResourceData(startId, endId, text) {\r\n        let data = [];\r\n        let colors = [\r\n            '#ff8787', '#9775fa', '#748ffc', '#3bc9db', '#69db7c',\r\n            '#fdd835', '#748ffc', '#9775fa', '#df5286', '#7fa900',\r\n            '#fec200', '#5978ee', '#00bdae', '#ea80fc'\r\n        ];\r\n        for (let a = startId; a <= endId; a++) {\r\n            let n = Math.floor(Math.random() * colors.length);\r\n            data.push({\r\n                Id: a,\r\n                Text: text + ' ' + a,\r\n                Color: colors[n]\r\n            });\r\n        }\r\n        return data;\r\n    }\r\n    render() {\r\n        return (<div className='schedule-control-section'>\r\n                <div className='col-lg-12 control-section'>\r\n                    <div className='control-wrapper'>\r\n                        <ScheduleComponent cssClass='virtual-scrolling' ref={schedule => this.scheduleObj = schedule} width='100%' height='650px' selectedDate={new Date(2018, 4, 1)} eventSettings={{\r\n            dataSource: this.generateStaticEvents(new Date(2018, 4, 1), 300, 12),\r\n        }} group={{ resources: ['Resources'] }}>\r\n                            <ResourcesDirective>\r\n                                <ResourceDirective field='ResourceId' title='Resource' name='Resources' allowMultiple={true} dataSource={this.generateResourceData(1, 300, 'Resource')} textField='Text' idField='Id' colorField='Color'>\r\n                                </ResourceDirective>\r\n                            </ResourcesDirective>\r\n                            <ViewsDirective>\r\n                                <ViewDirective option='TimelineMonth' eventTemplate={this.timelineEventTemplate.bind(this)} allowVirtualScrolling={true}/>\r\n                            </ViewsDirective>\r\n                            <Inject services={[TimelineMonth, Resize, DragAndDrop]}/>\r\n                        </ScheduleComponent>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<VirtualScrolling />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}