export const ScheduleSampleOrder = [
    { 'path': 'schedule/default', 'component': 'Default', 'name': 'Default Functionalities', 'order': '01', 'category': 'Scheduler', 'api': '{"ScheduleComponent": [ "height", "eventSettings", "selectedDate" ] }', 'description': 'This demo shows how the Scheduler control functionalities work with the default set of minimal configurations in a React application.' },
    { 'path': 'schedule/local-data', 'component': 'LocalData', 'name': 'Local Data', 'order': '02', 'category': 'Data Binding', 'api': '{"ScheduleComponent": [ "eventSettings", "selectedDate" ] }', 'description': 'This demo shows how to populate appointments in the React Scheduler through local data sources like JSON data types with the proper date format.' },
    { 'path': 'schedule/remote-data', 'component': 'RemoteData', 'name': 'Remote Data', 'order': '02', 'category': 'Data Binding', 'api': '{"ScheduleComponent": [ "eventSettings", "selectedDate" ] }', 'description': 'This demo shows how to populate appointments or events in the React Scheduler through remote data sources such as web services, web API, URL, and OData.' },
    { 'path': 'schedule/calendar-integration', 'component': 'CalendarIntegration', 'name': 'Sync Google Calendar', 'order': '02', 'category': 'Appointments', 'api': '{"ScheduleComponent": [ "eventSettings", "dataBinding","selectedDate" ] }', 'description': 'This example shows how to synchronously work with React Scheduler and Google Calendar by converting Scheduler events to the required format.' },
    { 'path': 'schedule/recurrence-events', 'component': 'RecurrenceEvents', 'name': 'Recurring Events', 'order': '03', 'category': 'Appointments', 'api': '{"ScheduleComponent": [ "width", "height", "currentView", "selectedDate", "eventSettings" ] }', 'description': 'This demo shows how to define recurring events (appointments) with different patterns and rules that meet iCalendar specifications in the React Scheduler.' },
    { 'path': 'schedule/block-events', 'component': 'BlockEvents', 'name': 'Blocking Dates and Time', 'order': '03', 'category': 'Appointments', 'api': '{"ScheduleComponent": [ "width", "height", "currentView", "selectedDate", "eventSettings","group","resources" ] }', 'description': 'This example shows how to block specific days or time intervals on the React Scheduler that helps to mark unavailable time or days in Calendar. ' },
    { 'path': 'schedule/search-events', 'component': 'SearchEvents', 'name': 'Search Events', 'order': '03', 'category': 'Appointments', 'api': '{"ScheduleComponent": [ "height", "eventSettings", "selectedDate" ] }', 'description': 'This example shows how to filter the appointments or events of the React Scheduler based on a search string in a particular field or all fields.' },
    { 'path': 'schedule/timezone', 'component': 'TimeZone', 'name': 'Timezone', 'order': '03', 'category': 'Appointments', 'api': '{"ScheduleComponent": [ "timezone", "selectedDate", "eventSettings", "eventRendered" ] }', 'description': 'This demo shows how the React Scheduler works with different time zones. The events in the Scheduler automatically adapt to the selected time zone.' },
    { 'path': 'schedule/external-drag-drop', 'component': 'ExternalDragDrop', 'name': 'External Drag and Drop', 'order': '03', 'category': 'Appointments', 'api': '{"ScheduleComponent": [ "currentView", "eventSettings","resourceHeaderTemplate", "cssClass", "workHours", "views", "group", "resources", "actionBegin", "drag" ] }', 'description': 'This demo shows the ability to drag and drop appointments from an external source (such as the DataGrid, ListView, etc.)  into the React Scheduler.' },
    { 'path': 'schedule/virtual-scrolling', 'component': 'VirtualScrolling', 'name': 'Virtual Scrolling', 'hideOnDevice': 'true', 'order': '04', 'category': 'Scrolling', 'api': '{"ScheduleComponent": ["views", "group", "resources", "eventSettings" ] }', 'description': 'This example illustrates how to achieve high performance in the React Scheduler using virtual scrolling to load resources and events on demand.' },
    { 'path': 'schedule/views', 'component': 'Views', 'name': 'Basic Views', 'order': '05', 'category': 'Views', 'api': '{"ScheduleComponent": [ "currentView", "views", "selectedDate", "eventSettings" ] }', 'description': 'This example demonstrates the basic views (day, week, workweek, and month) of the React Scheduler control with their default configurations.' },
    { 'path': 'schedule/timeline', 'component': 'TimelineView', 'name': 'Timeline Views', 'order': '05', 'category': 'Views', 'api': '{"ScheduleComponent": [ "height", "eventSettings", "selectedDate"  ] }', 'description': 'This example presents timeline views (day, week, workweek, and month) of the React Scheduler with their default configurations.' },
    { 'path': 'schedule/agenda', 'component': 'AgendaView', 'name': 'Agenda View', 'order': '05', 'category': 'Views', 'api': '{"ScheduleComponent": [ "agendaDaysCount", "hideEmptyAgendaDays", "currentView", "views", "eventSettings", "selectedDate" ] }', 'description': 'This demo shows the agenda view of the React Schedule that displays events as a list with virtual scrolling, with a number of initially loaded days.' },
    { 'path': 'schedule/month-agenda', 'component': 'MonthAgendaView', 'name': 'Month Agenda View', 'order': '05', 'category': 'Views', 'api': '{"ScheduleComponent": [ "currentView", "views",  "selectedDate", "eventSettings" ] }', 'description': 'This demo presents the React Scheduler month-agenda view, which follows the month-view layout while displaying events for a selected date.' },
    { 'path': 'schedule/year', 'component': 'Year', 'name': 'Year View', 'order': '05', 'category': 'Views', 'api': '{"ScheduleComponent": [ "views", "eventSettings" ] }', 'description': 'This example presents a year view of the React Scheduler that displays appointments or events for an entire year with a horizontal or vertical layout.' },
    { 'path': 'schedule/views-configuration', 'component': 'ViewConfigurations', 'name': 'Individual View Settings', 'order': '05', 'category': 'Views', 'api': '{"ScheduleComponent": [ "currentView", "views", "selectedDate", "eventSettings" ] }', 'description': 'This demo shows how to configure different settings for each view in the React Scheduler, like applying event templates to the month view alone.' },
    { 'path': 'schedule/extended-views', 'component': 'ExtendedViews', 'name': 'View Intervals', 'order': '05', 'category': 'Views', 'api': '{"ScheduleComponent": [ "currentView", "views", "selectedDate", "eventSettings" ] }', 'description': 'This demo shows how to design own custom views like 3 days, 2 weeks, 4 months apart from the default day, work week, month in React Event Scheduler.' },
    { 'path': 'schedule/timeline-resources', 'component': 'TimelineResource', 'name': 'Room Scheduler', 'order': '06', 'category': 'Multiple Resources', 'api': '{"ScheduleComponent": [ "currentView", "views", "selectedDate", "eventSettings", "resourceHeaderTemplate" ] }', 'description': 'This demo shows how to design a meeting room calendar, conference room calendar, and cabin room manager using our React event calendar control.' },
    { 'path': 'schedule/resources', 'component': 'Resources', 'name': 'Fare Calendar', 'order': '06', 'category': 'Multiple Resources', 'api': '{"ScheduleComponent": [ "currentView", "views", "selectedDate", "eventSettings" ] }', 'description': 'This demo is a real-time airfare calendar showcase application with flight and airfare details using the React Scheduler control.' },
    { 'path': 'schedule/resource', 'component': 'Resource', 'name': 'Resources', 'order': '06', 'category': 'Multiple Resources', 'api': '{"ScheduleComponent": [ "height", "eventSettings", "selectedDate" ] }', 'description': 'This React Scheduler control example depicts how to show or hide appointments or events based on selected resources among multiple resources.' },
    { 'path': 'schedule/group-editing', 'component': 'GroupEditing', 'name': 'Shared Events', 'order': '06', 'category': 'Multiple Resources', 'api': '{"ScheduleComponent": [ "resourceHeaderTemplate", "group", "resources", "eventSettings" ] }', 'description': 'This demo presents event (appointment) sharing, which enables a single event to be shared by multiple resources in the React Scheduler event calendar.' },
    { 'path': 'schedule/group-custom-work-days', 'component': 'GroupCustomWorkDays', 'name': 'Different Work Days', 'order': '06', 'category': 'Multiple Resources', 'api': '{"ScheduleComponent": [ "resourceHeaderTemplate", "group", "resources", "eventSettings" ] }', 'description': 'This demo shows how to set different workdays for each resource in a group to build a doctor availability application in the React event calendar.' },
    { 'path': 'schedule/add-remove-resources', 'component': 'AddRemoveResources', 'name': 'Show/Hide Resources', 'order': '06', 'category': 'Multiple Resources', 'api': '{"ScheduleComponent": [ "currentView", "views", "selectedDate", "eventSettings" ] }', 'description': 'This demo shows how to dynamically add or remove resources from the React Scheduler layout along with their appointments (events).' },
    { 'path': 'schedule/adaptive-rows', 'component': 'AdaptiveRows', 'name': 'Row Auto Height', 'order': '06', 'category': 'Multiple Resources', 'api': '{"ScheduleComponent": [ "rowAutoHeight", "currentView", "views", "selectedDate", "eventSettings" ] }', 'description': 'This demo shows how the work cells of the React Scheduler adjust their height automatically based on the number of events present in those time ranges.' },
    { 'path': 'schedule/resource-grouping', 'component': 'Group', 'name': 'Horizontal Grouping', 'order': '07', 'category': 'Resource Grouping', 'api': '{"ScheduleComponent": [ "resourceHeaderTemplate", "group", "resources", "eventSettings" ] }', 'description': 'This demo shows how to group multiple resources (e.g., airlines) in the React Scheduler. The resource header can be customized using a template.' },
    { 'path': 'schedule/timeline-resource-grouping', 'component': 'TimelineGrouping', 'name': 'Timeline Grouping', 'order': '07', 'category': 'Resource Grouping', 'api': '{"ScheduleComponent": [ "group", "resources", "eventSettings" ] }', 'description': 'This demo shows how to group multiple resources with timeline views in the React Schedule and how to display resources with expanded and collapsed headers.' },
    { 'path': 'schedule/group-by-date', 'component': 'GroupByDate', 'name': 'Date-wise Grouping', 'order': '07', 'category': 'Resource Grouping', 'api': '{"ScheduleComponent": [  "group", "resources", "eventSettings" ] }', 'description': 'This demo shows how to group multiple resources by date in the React Scheduler. The resource row is rendered under each date in the header.' },
    { 'path': 'schedule/group-by-child', 'component': 'GroupByChild', 'name': 'Hierarchical Grouping', 'order': '07', 'category': 'Resource Grouping', 'api': '{"ScheduleComponent": [ "startHour", "endHour", "group", "resources", "eventSettings" ] }', 'description': 'This demo shows how to group resources in a hierarchical structure for parent-child resources in the React Scheduler control.' },
    { 'path': 'schedule/cell-template', 'component': 'CellTemplate', 'name': 'Cell', 'order': '08', 'category': 'Template', 'api': '{"ScheduleComponent": [ "width", "height", "cellTemplate", "views", "eventSettings", "selectedDate" ] }', 'description': 'This demo shows how to customize the default appearance of work cells with images, links, and coloring styles using cell templates in the React Scheduler.' },
    { 'path': 'schedule/date-header-template', 'component': 'DateHeaderTemplate', 'name': 'Date Header', 'order': '08', 'category': 'Template', 'api': '{"ScheduleComponent": [ "cssClass", "dateHeaderTemplate", "eventRendered", "eventSettings", "renderCell" ] }', 'description': 'This demo shows how to customize the default appearance of date header cells with images and links using the template option in the React Scheduler.' },
    { 'path': 'schedule/event-template', 'component': 'EventTemplate', 'name': 'Events', 'order': '08', 'category': 'Template', 'api': '{"ScheduleComponent": [ "width", "height", "cellTemplate", "views", "eventSettings", "selectedDate" ] }', 'description': 'This demo shows how to customize the look and feel of appointments (events) in the React Shceduler with images and links by using an event template.' },
    { 'path': 'schedule/tooltip', 'component': 'Tooltip', 'name': 'Tooltip', 'order': '08', 'category': 'Template', 'api': '{"ScheduleComponent": [ "width", "height", "eventSettings", "selectedDate" ] }', 'description': 'This demo shows how to enable tooltips (popovers) in React Scheduler appointments (events) and customize them using a tooltip template.' },
    { 'path': 'schedule/editor-validation', 'component': 'EditorFieldValidation', 'name': 'Field Validation', 'order': '09', 'category': 'Editor Window', 'api': '{"ScheduleComponent": [ "width", "height", "eventSettings", "selectedDate" ] }', 'description': 'This demo covers the Appointment field validation that adds default and custom validation rules to the editor fields of the React Scheduler.' },
    { 'path': 'schedule/editor-custom-field', 'component': 'EditorCustomField', 'name': 'Additional Fields', 'order': '09', 'category': 'Editor Window', 'api': '{"ScheduleComponent": [ "selectedDate", "eventSettings", "popupOpen" ] }', 'description': 'This demo shows how to customize appointment editor (event window) with additional fields using pop-up open events in the React event calendar.' },
    { 'path': 'schedule/editor-template', 'component': 'EditorTemplate', 'name': 'Editor Template', 'order': '09', 'category': 'Editor Window', 'api': '{"ScheduleComponent": [ "editorTemplate", "showQuickInfo", "eventRendered", "popupOpen", "actionBegin" ] }', 'description': 'This demo shows how to design custom appointment (event) editor windows by adding or removing fields from the React Scheduler appointment window.' },
    { 'path': 'schedule/header-rows', 'component': 'HeaderRows', 'name': 'Header Rows', 'order': '10', 'category': 'Customization', 'api': '{"ScheduleComponent": [  "height",  "eventSettings", "selectedDate" ,"headerRows" ] }', 'description': 'This demo shows how to include additional header rows like week number and month number on the timeline view in the React event calendar.' },
    { 'path': 'schedule/time-scale', 'component': 'Timescale', 'name': 'Timescale', 'order': '10', 'category': 'Customization', 'api': '{"ScheduleComponent": [ "width", "height", "views", "timeScale" ] }', 'description': 'This demo shows how to customize the default timescale with interval, show/hide gridlines, slots count, and template in React Scheduler.' },
    { 'path': 'schedule/context-menu', 'component': 'ContextMenu', 'name': 'Context Menu', 'order': '10', 'category': 'Schedule', 'api': '{"ScheduleComponent": [ "height", "eventSettings", "selectedDate" ] }', 'description': 'This example shows how to integrate the context menu within the React Scheduler and control the related functionalities using menu options.' },
    { 'path': 'schedule/header-bar', 'component': 'HeaderBar', 'name': 'Header Bar', 'order': '10', 'category': 'Customization', 'api': '{"ScheduleComponent": [ "width", "height", "workHours", "views", "eventSettings", "selectedDate" ] }', 'description': 'This demo shows how to use templating to customize the header bar of the React Scheduler with images, links, styles, and other UI controls.' },
    { 'path': 'schedule/scroll-to', 'component': 'ScrollTo', 'name': 'Scroll Time', 'order': '10', 'category': 'Customization', 'api': '{"ScheduleComponent": [ "width", "height", "eventSettings", "eventRendered", "scrollTo" ] }', 'description': 'This example demonstrates how to scroll to a specific time programmatically based on the selected time in the React Scheduler control.' },
    { 'path': 'schedule/work-days', 'component': 'WorkDays', 'name': 'Work Days', 'order': '10', 'category': 'Customization', 'api': '{"ScheduleComponent": [ "workDays", "views", "eventSettings", "selectedDate" ] }', 'description': 'This demo shows how to customize the workdays and the first day of the week to fit different work schedules in the React Scheduler.' },
    { 'path': 'schedule/hide-weekend', 'component': 'HideWeekend', 'name': 'Hide Non-Working Days', 'order': '10', 'category': 'Customization', 'api': '{"ScheduleComponent": [ "showWeekend" ] }', 'description': 'This demo shows how to show or hide weekend days in the React Scheduler, which is similar to the workweek view, but with customizable workdays.' },
    { 'path': 'schedule/work-hours', 'component': 'WorkHours', 'name': 'Work Hours', 'order': '10', 'category': 'Customization', 'api': '{"ScheduleComponent": [ "workHours", "views", "eventSettings", "selectedDate" ] }', 'description': 'This demo shows how to customize the work hour range on the React Scheduler calendar, allowing business hours other than 9 AM to 6 PM.' },
    { 'path': 'schedule/start-end-hour', 'component': 'DayHourLimit', 'name': 'Day Hour Limit', 'order': '10', 'category': 'Customization', 'api': '{"ScheduleComponent": [ "startHour", "endHour", "workHours", "eventRendered" ] }', 'description': 'This demo shows how to limit the start and end hours in the React Scheduler which is applicable for all views and used here to render business hours only.' },
    { 'path': 'schedule/cell-dimension', 'component': 'CellDimension', 'name': 'Cell Dimension', 'order': '10', 'category': 'Customization', 'api': '{"ScheduleComponent": [ "cssClass", "showTimeIndicator", "eventRendered", "created",  "actionComplete" ] }', 'description': 'This demo shows how to change the default width and height of work cells, allowing the React Scheduler to be viewable zoomed in or zoomed out.' },
    { 'path': 'schedule/read-only-events', 'component': 'ReadonlyEvents', 'name': 'Read-only Events', 'order': '10', 'category': 'Customization', 'api': '{"ScheduleComponent": [ "eventSettings", "eventRendered", "eventClick", "popupOpen", "eventRendered"] }', 'description': 'This demo shows how to make specific events in the React Scheduler read-only, making them viewable but not editable by end users.' },
    { 'path': 'schedule/excel-export', 'component': 'ExportToExcel', 'name': 'Excel Exporting', 'order': '13', 'category': 'Exporting', 'api': '{"ScheduleComponent": [ "height", "eventSettings", "selectedDate" ] }', 'description': 'This example demonstrates how to export React Scheduler events (appointments) to the Microsoft Excel file format on the client side.' },
    { 'path': 'schedule/calendar-export-import', 'component': 'CalendarImportExport', 'name': 'Export and Import ICS', 'order': '13', 'category': 'Exporting', 'api': '{"ScheduleComponent": [ "importICalendar", "exportToICalendar"] }', 'description': 'This demo shows how to handle exporting to ICS and importing from ICS in the React Scheduler. The ICS file must come from Google Calendar or MS Outlook.' },
    { 'path': 'schedule/print', 'component': 'PrintSchedule', 'name': 'Print', 'order': '13', 'category': 'Exporting', 'api': '{"ScheduleComponent": [ "height", "eventSettings", "selectedDate" ] }', 'description': 'This sample demonstrates how to print all the appointments (events) in the React Scheduler on the client side using the Print Library.' },
    { 'path': 'schedule/recurrence-editor-generate-rule', 'component': 'RuleGenerate', 'name': 'Rule Generator', 'order': '11', 'category': 'Recurrence Editor', 'description': 'This demo showcases how to generate various recurrence pattern rules, such as daily, weekly, monthly, and yearly, using the Recurrence Editor.' },
    { 'path': 'schedule/recurrence-editor-populate-rule', 'component': 'PopulateRule', 'name': 'Populate Rule', 'order': '11', 'category': 'Recurrence Editor', 'description': 'This demo shows how to populate a predefined set of recurrence rules in the Recurrence Editor fields to help users create recurring events.' },
    { 'path': 'schedule/keyboard-interaction', 'component': 'KeyboardInteraction', 'name': 'Keyboard Interaction', 'hideOnDevice': 'true', 'order': '12', 'category': 'Miscellaneous', 'api': '{"ScheduleComponent": [ "width", "height", "eventSettings", "selectedDate", "allowKeyboardInteraction" ] }', 'description': 'This demo showcases all the available keyboard shortcuts that help users perform actions using only the keyboard in the React Scheduler control.' },
    { 'path': 'schedule/events', 'component': 'Events', 'name': 'Events', 'order': '12', 'category': 'Miscellaneous', 'api': '{"ScheduleComponent": [ "width", "height", "eventSettings",  "eventRendered", "created", "actionBegin", "actionComplete", "actionFailure", "cellClick", "cellDoubleClick", "destroyed", "navigating", "eventClick", "popupOpen" ] }', 'description': 'This demo lists the client-side events triggered on React Scheduler actions in the Event Tracer. The Event Tracer also includes a Clear option.' }
];
