{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for Chart performance\r\n */\r\nimport * as React from \"react\";\r\nimport { PropertyPane } from './property-pane';\r\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\r\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, LineSeries, Legend } from '@syncfusion/ej2-react-charts';\r\nimport { SampleBase } from './sample-base';\r\nexport class Performance extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.dt1 = 0;\r\n    }\r\n    change() {\r\n        let series1 = [];\r\n        let point1;\r\n        let value = 0;\r\n        let i;\r\n        for (i = 0; i < 100000; i++) {\r\n            value += (Math.random() * 10 - 5);\r\n            point1 = { x: i, y: value };\r\n            series1.push(point1);\r\n        }\r\n        this.dt1 = new Date().getTime();\r\n        this.chart.series[0].animation.enable = false;\r\n        this.chart.series[0].dataSource = series1;\r\n        this.chart.series[0].xName = 'x';\r\n        this.chart.series[0].yName = 'y';\r\n        this.chart.refresh();\r\n    }\r\n    onChartLoad(args) {\r\n        let dt2;\r\n        dt2 = new Date().getTime();\r\n        if (this.dt1) {\r\n            document.getElementById('performanceTime').innerHTML = (dt2 - this.dt1) + 'ms';\r\n        }\r\n        this.dt1 = 0;\r\n    }\r\n    ;\r\n    load(args) {\r\n        let selectedTheme = location.hash.split('/')[1];\r\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\r\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\r\n    }\r\n    ;\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className='control-section row'>\r\n                    <div className='col-lg-9'>\r\n                        <ChartComponent id='charts' ref={chart => this.chart = chart} loaded={this.onChartLoad.bind(this)} primaryXAxis={{\r\n            majorGridLines: { color: 'transparent' }\r\n        }} enableCanvas={true} load={this.load.bind(this)} legendSettings={{ visible: false }}>\r\n                            <Inject services={[LineSeries, Legend]}/>\r\n                            <SeriesCollectionDirective>\r\n                                <SeriesDirective name='Series1' type='Line' animation={{ enable: false }}>\r\n                                </SeriesDirective>\r\n                            </SeriesCollectionDirective>\r\n                        </ChartComponent>\r\n                    </div>\r\n                    <div className='col-lg-3 property-section'>\r\n                        <PropertyPane title='Properties'>\r\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                                <tr style={{ height: \"50px\" }}>\r\n                                    <td style={{ width: '50%' }}>\r\n                                        <ButtonComponent cssClass='e-info' onClick={this.change.bind(this)} isPrimary={true} style={{ textTransform: 'None', width: 140, textAlign: 'center' }}>Load 100K Points</ButtonComponent>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: \"50px\" }}>\r\n                                    <td style={{ width: '30%' }}>\r\n                                        <div>Time Taken</div>\r\n                                    </td>\r\n                                    <td style={{ width: '70%' }}>\r\n                                        <div>\r\n                                            <span id=\"performanceTime\">0ms</span>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<Performance />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}