{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { SampleBase } from './sample-base';\r\nimport { PropertyPane } from './property-pane';\r\nimport { AccumulationChartComponent, AccumulationSeriesCollectionDirective, AccumulationSeriesDirective, Inject, FunnelSeries, AccumulationTooltip, AccumulationDataLabel } from '@syncfusion/ej2-react-charts';\r\nexport let data1 = [{ x: \"China\", y: 1409517397, text: \"China\" },\r\n    { x: \"India\", y: 1339180127, text: \"India\" },\r\n    { x: \"United States\", y: 324459463, text: \"United States\" },\r\n    { x: \"Indonesia\", y: 263991379, text: \"Indonesia\" },\r\n    { x: \"Brazil\", y: 209288278, text: \"Brazil\" },\r\n    { x: \"Pakistan\", y: 197015955, text: \"Pakistan\" },\r\n    { x: \"Nigeria\", y: 190886311, text: \"Nigeria\" },\r\n    { x: \"Bangladesh\", y: 164669751, text: \"Bangladesh\" },\r\n    { x: \"Russia\", y: 143989754, text: \"Russia\" },\r\n    { x: \"Mexico\", y: 129163276, text: \"Mexico\" },\r\n    { x: \"Japan\", y: 127484450, text: \" Japan\" },\r\n    { x: \"Ethiopia\", y: 104957438, text: \"Ethiopia\" },\r\n    { x: \"Philippines\", y: 104918090, text: \"Philippines\" },\r\n    { x: \"Egypt\", y: 97553151, text: \"Egypt\" },\r\n    { x: \"Vietnam\", y: 95540800, text: \"Vietnam\" },\r\n    { x: \"Germany\", y: 82114224, text: \"Germany\" }];\r\nexport class Funnel extends SampleBase {\r\n    render() {\r\n        return (<div className='control-pane'>\r\n        <div className='control-section row'>\r\n          <div className='col-lg-9'>\r\n            <AccumulationChartComponent id='funnel-chart' ref={funnel => this.funnel = funnel} title='Top populated countries in 2017' load={this.load.bind(this)} tooltip={{ enable: true, format: '${point.x} : <b>${point.y}</b>' }} resized={this.onChartResized.bind(this)} loaded={this.onChartLoad.bind(this)}>\r\n              <Inject services={[FunnelSeries, AccumulationTooltip, AccumulationDataLabel]}/>\r\n              <AccumulationSeriesCollectionDirective>\r\n                <AccumulationSeriesDirective dataSource={data1} xName='x' yName='y' type='Funnel' width='60%' height='80%' neckWidth='15%' gapRatio={0.03} neckHeight='18%' explode={false} dataLabel={{\r\n            name: 'text', visible: true, position: 'Outside', connectorStyle: { length: \"6%\" }\r\n        }}>\r\n                </AccumulationSeriesDirective>\r\n              </AccumulationSeriesCollectionDirective>\r\n            </AccumulationChartComponent>\r\n          </div>\r\n          <div className='col-lg-3 property-section'>\r\n            <PropertyPane title='Properties'>\r\n              <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                <tr style={{ height: '50px' }}>\r\n                  <td style={{ width: '30%' }}>\r\n                    <div>Neck Width:\r\n                        <p id=\"neckWidth\" style={{ fontWeight: 'normal' }}>15%</p>\r\n                    </div>\r\n                  </td>\r\n                  <td style={{ width: '70%' }}>\r\n                    <div data-role=\"rangeslider\">\r\n                      <input type=\"range\" name=\"range-min\" onChange={this.pyramidneckWidth.bind(this)} ref={s => this.slider = s} id=\"pyramidNeckWidth\" defaultValue=\"15\" min=\"0\" max=\"45\" style={{ width: '90%' }}/>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n                <tr style={{ height: '50px' }}>\r\n                  <td style={{ width: '30%' }}>\r\n                    <div>Neck Height:\r\n                                <p id=\"neckHeight\" style={{ fontWeight: 'normal' }}>18%</p>\r\n                    </div>\r\n                  </td>\r\n                  <td style={{ width: '70%' }}>\r\n                    <div data-role=\"rangeslider\">\r\n                      <input type=\"range\" name=\"range-min\" onChange={this.pyramidneckHeight.bind(this)} ref={s => this.slider = s} id=\"pyramidNeckHeight\" defaultValue=\"18\" min=\"0\" max=\"50\" style={{ marginLeft: '-5px' }}/>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              </table>\r\n            </PropertyPane>\r\n          </div>\r\n        </div>\r\n      </div>);\r\n    }\r\n    pyramidneckWidth(e) {\r\n        let neckWidth = document.getElementById('pyramidNeckWidth').value;\r\n        this.funnel.series[0].neckWidth = neckWidth + '%';\r\n        document.getElementById('neckWidth').innerHTML = neckWidth + '%';\r\n        this.funnel.removeSvg();\r\n        this.funnel.refreshSeries();\r\n        this.funnel.refreshChart();\r\n    }\r\n    ;\r\n    pyramidneckHeight(e) {\r\n        let neckHeight = document.getElementById('pyramidNeckHeight').value;\r\n        this.funnel.series[0].neckHeight = neckHeight + '%';\r\n        document.getElementById('neckHeight').innerHTML = neckHeight + '%';\r\n        this.funnel.series[0].animation.enable = false;\r\n        this.funnel.removeSvg();\r\n        this.funnel.refreshSeries();\r\n        this.funnel.refreshChart();\r\n    }\r\n    ;\r\n    onChartLoad(args) {\r\n        document.getElementById('funnel-chart').setAttribute('title', '');\r\n    }\r\n    ;\r\n    load(args) {\r\n        let selectedTheme = location.hash.split('/')[1];\r\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\r\n        args.accumulation.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\r\n        if (args.accumulation.availableSize.width < args.accumulation.availableSize.height) {\r\n            args.accumulation.series[0].width = '80%';\r\n            args.accumulation.series[0].height = '70%';\r\n        }\r\n    }\r\n    ;\r\n    onChartResized(args) {\r\n        let bounds = document.getElementById('funnel-chart').getBoundingClientRect();\r\n        if (bounds.width < bounds.height) {\r\n            args.accumulation.series[0].width = '80%';\r\n            args.accumulation.series[0].height = '70%';\r\n        }\r\n        else {\r\n            args.accumulation.series[0].width = '60%';\r\n            args.accumulation.series[0].height = '80%';\r\n        }\r\n    }\r\n}\r\n\nrender(<Funnel />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}