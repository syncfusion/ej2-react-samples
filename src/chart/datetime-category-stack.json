{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for smart axis labels\r\n */\r\nimport * as React from \"react\";\r\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Tooltip, DateTimeCategory, ColumnSeries, Inject, AnnotationDirective, AnnotationsDirective, ChartAnnotation, StripLine } from '@syncfusion/ej2-react-charts';\r\nimport { Browser } from '@syncfusion/ej2-base';\r\nimport { SampleBase } from './sample-base';\r\nexport let pointRender = (args) => {\r\n    let materialColors = ['#00bdae', '#404041', '#357cd2', '#e56590', '#f8b883', '#70ad47', '#dd8abd', '#7f84e8', '#7bb4eb',\r\n        '#ea7a57', '#404041', '#00bdae'];\r\n    let fabricColors = ['#4472c4', '#ed7d31', '#ffc000', '#70ad47', '#5b9bd5',\r\n        '#c1c1c1', '#6f6fe2', '#e269ae', '#9e480e', '#997300', '#4472c4', '#70ad47', '#ffc000', '#ed7d31'];\r\n    let selectedTheme = location.hash.split('/')[1];\r\n    if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\r\n        args.fill = fabricColors[args.point.index];\r\n    }\r\n    else {\r\n        args.fill = materialColors[args.point.index];\r\n    }\r\n};\r\nexport let data1 = [{ x: new Date(2017, 11, 20), y: 21 }, { x: new Date(2017, 11, 21), y: 24 },\r\n    { x: new Date(2017, 11, 22), y: 24 }, { x: new Date(2017, 11, 26), y: 70 },\r\n    { x: new Date(2017, 11, 27), y: 75 }, { x: new Date(2018, 0, 2), y: 82 },\r\n    { x: new Date(2018, 0, 3), y: 53 }, { x: new Date(2018, 0, 4), y: 54 },\r\n    { x: new Date(2018, 0, 5), y: 53 }, { x: new Date(2018, 0, 8), y: 45 }];\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n\t}`;\r\nexport class DatetimeCategoryAxis extends SampleBase {\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section row'>\r\n                    <div>\r\n                        <ChartComponent id='charts' style={{ textAlign: \"center\" }} primaryXAxis={{\r\n            valueType: 'DateTimeCategory',\r\n            intervalType: 'Days',\r\n            skeleton: 'Ed',\r\n            edgeLabelPlacement: 'Shift',\r\n            majorGridLines: { width: 0 },\r\n            stripLines: [\r\n                { visible: true, start: new Date(2017, 11, 20), end: new Date(2017, 11, 27), color: 'skyblue', opacity: 0.5, },\r\n                { visible: true, start: new Date(2018, 0, 2), end: new Date(2018, 0, 8), color: 'pink', opacity: 0.5 },\r\n            ],\r\n            title: 'Business Days'\r\n        }} chartArea={{ border: { width: 0 } }} primaryYAxis={{\r\n            labelFormat: '{value}M',\r\n            rangePadding: 'None',\r\n            minimum: 0,\r\n            maximum: 100,\r\n            interval: 20,\r\n            lineStyle: { width: 0 },\r\n            majorTickLines: { width: 0 },\r\n            minorTickLines: { width: 0 },\r\n        }} load={this.load.bind(this)} pointRender={pointRender} title=\"Sales Comparison of a Product\" loaded={this.onChartLoad.bind(this)} legendSettings={{ visible: false }} width={Browser.isDevice ? '100%' : '60%'} tooltip={{ enable: true }}>\r\n                            <Inject services={[DateTimeCategory, ColumnSeries, Tooltip, ChartAnnotation, StripLine]}/>\r\n                            <AnnotationsDirective>\r\n                            <AnnotationDirective content='<div style=\"color:#FF0000;font-family: bold; font-weight: 600\">Christmas Offer<br> Dec 2017</div>' x={new Date(2017, 11, 22)} y={90} coordinateUnits='Point'>\r\n                </AnnotationDirective>\r\n                <AnnotationDirective content='<div style=\"color:#FF0000;font-family: bold; font-weight: 800\">New Year Offer<br> Jan 2018</div>' x={new Date(2018, 0, 4)} y={90} coordinateUnits='Point'>\r\n                </AnnotationDirective>\r\n                </AnnotationsDirective>\r\n                            <SeriesCollectionDirective>\r\n                                <SeriesDirective dataSource={data1} xName='x' yName='y' name=\"Product\" type='Column'>\r\n                                </SeriesDirective>\r\n                            </SeriesCollectionDirective>\r\n                        </ChartComponent>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n    onChartLoad(args) {\r\n        let chart = document.getElementById('charts');\r\n        chart.setAttribute('title', '');\r\n    }\r\n    ;\r\n}\r\n\nrender(<DatetimeCategoryAxis />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}