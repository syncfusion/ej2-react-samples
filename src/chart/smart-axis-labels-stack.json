{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","theme-color.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Initialize the Theme colors\n */\nexports.materialColors = ['#00bdae', '#404041', '#357cd2', '#e56590', '#f8b883', '#70ad47', '#dd8abd', '#7f84e8', '#7bb4eb',\n    '#ea7a57', '#404041', '#00bdae'];\nexports.fabricColors = ['#4472c4', '#ed7d31', '#ffc000', '#70ad47', '#5b9bd5',\n    '#c1c1c1', '#6f6fe2', '#e269ae', '#9e480e', '#997300', '#4472c4', '#70ad47', '#ffc000', '#ed7d31'];\nexports.bootstrapColors = ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e', '#ff6ea6',\n    '#7953ac', '#b99b4f', '#407c92', '#5ea716', '#b91c52'];\nexports.highContrastColors = ['#79ECE4', '#E98272', '#DFE6B6', '#C6E773', '#BA98FF',\n    '#FA83C3', '#00C27A', '#43ACEF', '#D681EF', '#D8BC6E'];\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for smart axis labels\r\n */\r\nimport * as React from \"react\";\r\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Tooltip, DataLabel, Category, ColumnSeries, Inject } from '@syncfusion/ej2-react-charts';\r\nimport { PropertyPane } from './property-pane';\r\nimport { Browser } from '@syncfusion/ej2-base';\r\nimport { SampleBase } from './sample-base';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { fabricColors, bootstrapColors, materialColors, highContrastColors } from './theme-color';\r\nimport { NumericTextBoxComponent } from \"@syncfusion/ej2-react-inputs\";\r\nexport let pointRender = (args) => {\r\n    let selectedTheme = location.hash.split('/')[1];\r\n    selectedTheme = selectedTheme ? selectedTheme : 'material';\r\n    if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\r\n        args.fill = fabricColors[args.point.index % 10];\r\n    }\r\n    else if (selectedTheme === 'material') {\r\n        args.fill = materialColors[args.point.index % 10];\r\n    }\r\n    else if (selectedTheme === 'highcontrast') {\r\n        args.fill = highContrastColors[args.point.index % 10];\r\n    }\r\n    else {\r\n        args.fill = bootstrapColors[args.point.index % 10];\r\n    }\r\n};\r\nexport let data1 = [{ x: 'South Korea', y: 39 }, { x: 'India', y: 61 },\r\n    { x: 'Pakistan', y: 20 }, { x: 'Germany', y: 65 },\r\n    { x: 'Australia', y: 16 }, { x: 'Italy', y: 29 },\r\n    { x: 'France', y: 45 }, { x: 'United Arab Emirates', y: 10 },\r\n    { x: 'Russia', y: 41 }, { x: 'Mexico', y: 31 },\r\n    { x: 'Brazil', y: 76 }, { x: 'China', y: 51 }];\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n\t}`;\r\nexport class SmartAxisLabels extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.droplist = [\r\n            { value: 'Hide' },\r\n            { value: 'Trim' },\r\n            { value: 'Wrap' },\r\n            { value: 'MultipleRows' },\r\n            { value: 'Rotate45' },\r\n            { value: 'Rotate90' },\r\n            { value: 'None' }\r\n        ];\r\n        this.modelist = [\r\n            { value: 'None' },\r\n            { value: 'Hide' },\r\n            { value: 'Shift' }\r\n        ];\r\n        this.poslist = [\r\n            { value: 'Inside' },\r\n            { value: 'Outside' }\r\n        ];\r\n    }\r\n    change() {\r\n        this.chartInstance.primaryXAxis.labelIntersectAction = this.dropElement.value;\r\n        this.chartInstance.series[0].animation.enable = false;\r\n        this.chartInstance.refresh();\r\n    }\r\n    ;\r\n    mode() {\r\n        this.chartInstance.primaryXAxis.edgeLabelPlacement = this.modeElement.value;\r\n        this.chartInstance.series[0].animation.enable = false;\r\n        this.chartInstance.refresh();\r\n    }\r\n    ;\r\n    trim() {\r\n        this.chartInstance.primaryXAxis.enableTrim = this.checkElement.checked;\r\n        this.chartInstance.refresh();\r\n    }\r\n    ;\r\n    xwid() {\r\n        this.chartInstance.primaryXAxis.maximumLabelWidth = this.widthElement.value;\r\n        this.chartInstance.series[0].animation.enable = false;\r\n        this.chartInstance.refresh();\r\n    }\r\n    xpos() {\r\n        this.chartInstance.primaryXAxis.labelPosition = this.posElement.value;\r\n        this.chartInstance.refresh();\r\n    }\r\n    ;\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section row'>\r\n                    <div className='col-md-8'>\r\n                        <ChartComponent id='charts' ref={chart => this.chartInstance = chart} style={{ textAlign: \"center\" }} primaryXAxis={{\r\n            valueType: 'Category',\r\n            interval: 1,\r\n            majorGridLines: { width: 0 },\r\n            labelIntersectAction: 'Hide'\r\n        }} chartArea={{ border: { width: 0 } }} primaryYAxis={{\r\n            labelStyle: { size: '0px' },\r\n            majorTickLines: { width: 0 },\r\n            majorGridLines: { width: 0 },\r\n            lineStyle: { width: 0 },\r\n        }} load={this.load.bind(this)} pointRender={pointRender} title=\"Internet Users in Millions\" loaded={this.onChartLoad.bind(this)} legendSettings={{ visible: false }} tooltip={{ enable: true }}>\r\n                            <Inject services={[Category, Category, ColumnSeries, Tooltip, DataLabel]}/>\r\n                            <SeriesCollectionDirective>\r\n                                <SeriesDirective dataSource={data1} xName='x' yName='y' name=\"Users\" type='Column' marker={{ dataLabel: { visible: true, position: Browser.isDevice ? 'Outer' : 'Top', font: { fontWeight: '600', color: Browser.isDevice ? '#404041' : '#ffffff' } } }}>\r\n                                </SeriesDirective>\r\n                            </SeriesCollectionDirective>\r\n                        </ChartComponent>\r\n                    </div>\r\n                    <div className='col-md-4 property-section'>\r\n                        <PropertyPane title='Properties'>\r\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td>\r\n                                        <div>Intersect Action: </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <DropDownListComponent width=\"120px\" id=\"selmode\" change={this.change.bind(this)} ref={d => this.dropElement = d} dataSource={this.droplist} fields={{ text: 'value', value: 'value' }} value=\"Hide\"/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td>\r\n                                        <div>Edge Label<br />Placement: </div></td>\r\n                                    <td style={{ padding: 10 }}>\r\n                                        <DropDownListComponent width=\"120px\" id=\"selmode\" change={this.mode.bind(this)} ref={d => this.modeElement = d} dataSource={this.modelist} fields={{ text: 'value', value: 'value' }} value=\"None\"/>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td>\r\n                                        <div>Label Position: </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <DropDownListComponent width=\"120px\" id=\"labmode\" change={this.xpos.bind(this)} ref={d => this.posElement = d} dataSource={this.poslist} fields={{ text: 'value', value: 'value' }} value=\"Outside\"/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td style={{ width: '60%' }}>\r\n                                        <div>Enable Trim:</div>\r\n                                    </td>\r\n                                    <td style={{ width: '40%' }}>\r\n                                        <div>\r\n                                            <input type=\"checkbox\" id=\"trimmode\" defaultChecked={false} onChange={this.trim.bind(this)} style={{ marginLeft: '-5px' }} ref={d => this.checkElement = d}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td style={{ width: '60%' }}>\r\n                                        <div>Maximum Label Width:</div>\r\n                                    </td>\r\n                                    <td style={{ padding: 10, width: '40%' }}>\r\n                                        <NumericTextBoxComponent width={120} value={34} min={1} change={this.xwid.bind(this)} ref={d => this.widthElement = d}/>\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n    onChartLoad(args) {\r\n        let chart = document.getElementById('charts');\r\n        chart.setAttribute('title', '');\r\n    }\r\n    ;\r\n}\r\n\nrender(<SmartAxisLabels />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}