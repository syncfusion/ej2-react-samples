{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for stripline\r\n */\r\nimport * as React from \"react\";\r\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, Legend, Category, LineSeries, Tooltip, StripLine } from '@syncfusion/ej2-react-charts';\r\nimport { PropertyPane } from './property-pane';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { SampleBase } from './sample-base';\r\nlet xAxisStripLine = [\r\n    {\r\n        start: -1, end: 1.5, text: 'Winter', color: 'url(#winter)',\r\n        textStyle: { size: '18px', color: '#ffffff', fontWeight: '600' },\r\n        border: { width: 0 }, rotation: -90, visible: true\r\n    }, {\r\n        start: 1.5, end: 3.5, text: 'Summer', color: 'url(#summer)',\r\n        textStyle: { size: '18px', color: '#ffffff', fontWeight: '600' },\r\n        border: { width: 0 }, rotation: -90, visible: true\r\n    }, {\r\n        start: 3.5, end: 4.5, text: 'Spring', color: 'url(#spring)',\r\n        textStyle: { size: '18px', color: '#ffffff', fontWeight: '600' },\r\n        border: { width: 0 }, rotation: -90, visible: true\r\n    }, {\r\n        start: 4.5, end: 5.5, text: 'Autumn', color: 'url(#autumn)',\r\n        textStyle: { size: '18px', color: '#ffffff', fontWeight: '600' },\r\n        border: { width: 0 }, rotation: -90, visible: true\r\n    }, {\r\n        start: 5.5, end: 7, text: 'Winter', color: 'url(#winter)',\r\n        textStyle: { size: '18px', color: '#ffffff', fontWeight: '600' },\r\n        border: { width: 0 }, rotation: -90, visible: true\r\n    }, {\r\n        startFromAxis: true, size: 2, isSegmented: true, segmentStart: 22.5, text: 'Average Temperature',\r\n        segmentEnd: 27.5, visible: false, color: '#fc902a',\r\n        textStyle: { size: '18px', color: '#ffffff', fontWeight: '600' }, border: { width: 0 }, rotation: 0\r\n    }, {\r\n        start: 3.5, size: 3, isSegmented: true, segmentStart: 22.5, text: 'Average Temperature',\r\n        segmentEnd: 27.5, visible: false, color: '#fc902a',\r\n        textStyle: { size: '18px', color: '#ffffff', fontWeight: '600' }, border: { width: 0 }, rotation: 0\r\n    }, {\r\n        start: 1.5, size: 2, isSegmented: true, segmentStart: 32.5, text: 'High Temperature',\r\n        segmentEnd: 37.5, visible: false, color: '#ff512f',\r\n        textStyle: { size: '18px', color: '#ffffff', fontWeight: '600' }, border: { width: 0 }, rotation: 0\r\n    }\r\n];\r\nexport let data = [\r\n    { x: 'Sun', y: 25 }, { x: 'Mon', y: 27 }, { x: 'Tue', y: 33 }, { x: 'Wed', y: 36 },\r\n    { x: 'Thu', y: 26 }, { x: 'Fri', y: 27.5 }, { x: 'Sat', y: 23 }\r\n];\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }\r\n    #winter stop {\r\n        stop-color: #4ca1af;\r\n    }\r\n\r\n    #winter stop[offset=\"0\"] {\r\n        stop-color: #c4e0e5;\r\n    }\r\n\r\n    #winter stop[offset=\"1\"] {\r\n        stop-color: #4ca1af;\r\n    }\r\n\r\n    #summer stop {\r\n        stop-color: #ffa751;\r\n    }\r\n\r\n    #summer stop[offset=\"0\"] {\r\n        stop-color: #ffe259;\r\n    }\r\n\r\n    #summer stop[offset=\"1\"] {\r\n        stop-color: #ffa751;\r\n    }\r\n\r\n    #spring stop {\r\n        stop-color: #1d976c;\r\n    }\r\n\r\n    #spring stop[offset=\"0\"] {\r\n        stop-color: #93f9b9;\r\n    }\r\n\r\n    #spring stop[offset=\"1\"] {\r\n        stop-color: #1d976c;\r\n    }\r\n\r\n    #autumn stop {\r\n        stop-color: #603813;\r\n    }\r\n\r\n    #autumn stop[offset=\"0\"] {\r\n        stop-color: #b29f94;\r\n    }\r\n\r\n    #autumn stop[offset=\"1\"] {\r\n        stop-color: #603813;\r\n    }`;\r\nexport class Stripline extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.droplist = [\r\n            { value: 'Vertical' },\r\n            { value: 'Horizontal' },\r\n            { value: 'Segment' }\r\n        ];\r\n    }\r\n    change() {\r\n        this.chartInstance.series[0].fill = 'white';\r\n        this.chartInstance.series[0].marker.fill = 'black';\r\n        this.chartInstance.series[0].marker.border.color = 'white';\r\n        for (let i = 0; i < 3; i++) {\r\n            this.chartInstance.primaryYAxis.stripLines[i].visible = false;\r\n        }\r\n        if (this.dropElement.value === 'Vertical') {\r\n            for (let i = 0; i <= 7; i++) {\r\n                this.chartInstance.primaryXAxis.stripLines[i].visible = !this.chartInstance.primaryXAxis.stripLines[i].isSegmented;\r\n            }\r\n        }\r\n        else if (this.dropElement.value === 'Horizontal') {\r\n            for (let i = 0; i < 3; i++) {\r\n                this.chartInstance.primaryYAxis.stripLines[i].visible = true;\r\n            }\r\n            for (let i = 0; i <= 7; i++) {\r\n                this.chartInstance.primaryXAxis.stripLines[i].visible = false;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i <= 7; i++) {\r\n                this.chartInstance.primaryXAxis.stripLines[i].visible = this.chartInstance.primaryXAxis.stripLines[i].isSegmented;\r\n            }\r\n            this.chartInstance.series[0].fill = 'black';\r\n            this.chartInstance.series[0].marker.fill = 'white';\r\n            this.chartInstance.series[0].marker.border.color = 'black';\r\n        }\r\n        this.chartInstance.refresh();\r\n    }\r\n    ;\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n\r\n                <svg style={{ height: 0 }}>\r\n                    <defs>\r\n                        <linearGradient id=\"winter\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\r\n                            <stop offset=\"0\"/>\r\n                            <stop offset=\"1\"/>\r\n                        </linearGradient>\r\n                        <linearGradient id=\"summer\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\r\n                            <stop offset=\"0\"/>\r\n                            <stop offset=\"1\"/>\r\n                        </linearGradient>\r\n                        <linearGradient id=\"spring\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\r\n                            <stop offset=\"0\"/>\r\n                            <stop offset=\"1\"/>\r\n                        </linearGradient>\r\n                        <linearGradient id=\"autumn\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\r\n                            <stop offset=\"0\"/>\r\n                            <stop offset=\"1\"/>\r\n                        </linearGradient>\r\n                    </defs>\r\n                </svg>\r\n                <div className='control-section row'>\r\n                    <div className='col-md-8'>\r\n                        <ChartComponent id='charts' ref={chart => this.chartInstance = chart} primaryXAxis={{\r\n            valueType: 'Category', majorGridLines: { width: 0 },\r\n            stripLines: xAxisStripLine\r\n        }} load={this.load.bind(this)} primaryYAxis={{\r\n            minimum: 10, maximum: 40, interval: 5,\r\n            lineStyle: { color: '#808080' }, labelFormat: '{value} Â°C', rangePadding: 'None',\r\n            stripLines: [\r\n                {\r\n                    start: 30, end: 40, text: 'High Temperature', color: '#ff512f', visible: false,\r\n                    textStyle: { size: '18px', color: '#ffffff', fontWeight: '600' }, border: { width: 0 },\r\n                }, {\r\n                    start: 20, end: 30, text: 'Average Temperature', color: '#fc902a', visible: false,\r\n                    textStyle: { size: '18px', color: '#ffffff', fontWeight: '600' }, border: { width: 0 },\r\n                }, {\r\n                    start: 10, end: 20, text: 'Low Temperature', visible: false,\r\n                    textStyle: { size: '18px', color: '#ffffff', fontWeight: '600' }, border: { width: 0 }, color: '#f9d423'\r\n                }\r\n            ]\r\n        }} tooltip={{\r\n            enable: true\r\n        }} legendSettings={{ visible: false }} loaded={this.onChartLoad.bind(this)} title='Weather Report'>\r\n                            <Inject services={[LineSeries, Category, Legend, Tooltip, StripLine]}/>\r\n                            <SeriesCollectionDirective>\r\n                                <SeriesDirective dataSource={data} xName='x' yName='y' width={2} fill='white' type='Line' name='Weather' marker={{ visible: true, width: 10, height: 10, border: { width: 2, color: 'white' }, fill: '#666666' }}>\r\n                                </SeriesDirective>\r\n                            </SeriesCollectionDirective>\r\n                        </ChartComponent>\r\n                    </div>\r\n                    <div className='col-md-4 property-section'>\r\n                        <PropertyPane title='Properties'>\r\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td style={{ width: '60%' }}>\r\n                                        <div>StripLine Types:</div>\r\n                                    </td>\r\n                                    <td style={{ width: '40%' }}>\r\n                                        <div>\r\n                                            <DropDownListComponent width={120} id=\"selmode\" style={{ \"width\": \"auto\" }} change={this.change.bind(this)} ref={d => this.dropElement = d} dataSource={this.droplist} fields={{ text: 'value', value: 'value' }} value=\"Vertical\"/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n    onChartLoad(args) {\r\n        document.getElementById('charts').setAttribute('title', '');\r\n    }\r\n    ;\r\n}\r\n\nrender(<Stripline />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}