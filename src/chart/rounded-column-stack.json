{"index.css":"/* css */","theme-color.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Initialize the Theme colors\n */\nexports.materialColors = ['#00bdae', '#404041', '#357cd2', '#e56590', '#f8b883', '#70ad47', '#dd8abd', '#7f84e8', '#7bb4eb',\n    '#ea7a57', '#404041', '#00bdae'];\nexports.fabricColors = ['#4472c4', '#ed7d31', '#ffc000', '#70ad47', '#5b9bd5',\n    '#c1c1c1', '#6f6fe2', '#e269ae', '#9e480e', '#997300', '#4472c4', '#70ad47', '#ffc000', '#ed7d31'];\nexports.bootstrapColors = ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e', '#ff6ea6',\n    '#7953ac', '#b99b4f', '#407c92', '#5ea716', '#b91c52'];\nexports.highContrastColors = ['#79ECE4', '#E98272', '#DFE6B6', '#C6E773', '#BA98FF',\n    '#FA83C3', '#00C27A', '#43ACEF', '#D681EF', '#D8BC6E'];\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for column series with rounded corner\r\n */\r\nimport * as React from \"react\";\r\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, Category, ColumnSeries, DataLabel, Tooltip } from '@syncfusion/ej2-react-charts';\r\nimport { Browser } from '@syncfusion/ej2-base';\r\nimport { fabricColors, bootstrapColors, materialColors, highContrastColors } from './theme-color';\r\nimport { SampleBase } from './sample-base';\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }`;\r\nexport let data1 = [\r\n    { x: 'Egg', y: 106 },\r\n    { x: 'Fish', y: 103 },\r\n    { x: 'Misc', y: 198 },\r\n    { x: 'Tea', y: 189 },\r\n    { x: 'Fruits', y: 250 }\r\n];\r\nexport let labelRender = (args) => {\r\n    let selectedTheme = location.hash.split('/')[1];\r\n    selectedTheme = selectedTheme ? selectedTheme : 'material';\r\n    if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\r\n        args.fill = fabricColors[args.point.index % 10];\r\n    }\r\n    else if (selectedTheme === 'material') {\r\n        args.fill = materialColors[args.point.index % 10];\r\n    }\r\n    else if (selectedTheme === 'highcontrast') {\r\n        args.fill = highContrastColors[args.point.index % 10];\r\n    }\r\n    else {\r\n        args.fill = bootstrapColors[args.point.index % 10];\r\n    }\r\n};\r\nlet count = 0;\r\nexport class RoundedColumn extends SampleBase {\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section'>\r\n                    <ChartComponent id='charts2' style={{ textAlign: \"center\" }} primaryXAxis={{ valueType: 'Category', interval: 1, majorGridLines: { width: 0 }, tickPosition: 'Inside',\r\n            labelPosition: 'Inside', labelStyle: { color: '#ffffff' } }} primaryYAxis={{ minimum: 0, maximum: 300, interval: 50, majorGridLines: { width: 0 }, majorTickLines: { width: 0 }, lineStyle: { width: 0 }, labelStyle: { color: 'transparent' } }} chartArea={{ border: { width: 0 } }} load={this.load.bind(this)} title='Trade in Food Groups' loaded={this.onChartLoad.bind(this)} legendSettings={{ visible: false }} width={Browser.isDevice ? '100%' : '60%'} tooltip={{ enable: false }} pointRender={labelRender}>\r\n                        <Inject services={[ColumnSeries, DataLabel, Category, Tooltip]}/>\r\n                        <SeriesCollectionDirective>\r\n                            <SeriesDirective dataSource={data1} type='Column' xName='x' width={2} yName='y' name='Tiger' cornerRadius={{ bottomLeft: 10, bottomRight: 10, topLeft: 10, topRight: 10 }} marker={{ dataLabel: { visible: true, position: 'Top', font: { fontWeight: '600', color: '#ffffff' } } }}>\r\n                            </SeriesDirective>\r\n                        </SeriesCollectionDirective>\r\n                    </ChartComponent>\r\n                     </div>\r\n            </div>);\r\n    }\r\n    onChartLoad(args) {\r\n        let chart = document.getElementById('charts2');\r\n        chart.setAttribute('title', '');\r\n        args.chart.loaded = null;\r\n        let columninterval = setInterval(() => {\r\n            if (document.getElementById('charts2')) {\r\n                if (count === 0) {\r\n                    args.chart.series[0].dataSource = [\r\n                        { x: 'Egg', y: 206 },\r\n                        { x: 'Fish', y: 123 },\r\n                        { x: 'Misc', y: 48 },\r\n                        { x: 'Tea', y: 240 },\r\n                        { x: 'Fruits', y: 170 }\r\n                    ];\r\n                    args.chart.animate();\r\n                    count++;\r\n                }\r\n                else if (count === 1) {\r\n                    args.chart.series[0].dataSource = [\r\n                        { x: 'Egg', y: 86 },\r\n                        { x: 'Fish', y: 173 },\r\n                        { x: 'Misc', y: 188 },\r\n                        { x: 'Tea', y: 109 },\r\n                        { x: 'Fruits', y: 100 }\r\n                    ];\r\n                    args.chart.animate();\r\n                    count++;\r\n                }\r\n                else if (count === 2) {\r\n                    args.chart.series[0].dataSource = [\r\n                        { x: 'Egg', y: 156 },\r\n                        { x: 'Fish', y: 33 },\r\n                        { x: 'Misc', y: 260 },\r\n                        { x: 'Tea', y: 200 },\r\n                        { x: 'Fruits', y: 30 }\r\n                    ];\r\n                    args.chart.animate();\r\n                    count = 0;\r\n                }\r\n            }\r\n            else {\r\n                clearInterval(columninterval);\r\n            }\r\n        }, 2000);\r\n    }\r\n    ;\r\n}\r\n\nrender(<RoundedColumn />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}