{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { SampleBase } from './sample-base';\r\nimport { PropertyPane } from './property-pane';\r\nimport { AccumulationChartComponent, AccumulationSeriesCollectionDirective, AccumulationSeriesDirective, AccumulationLegend, PieSeries, AccumulationTooltip, Inject, AccumulationDataLabel } from '@syncfusion/ej2-react-charts';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nexport let data1 = [\r\n    { 'x': 'China', y: 26, text: 'China: 26' },\r\n    { 'x': 'Russia', y: 19, text: 'Russia: 19' },\r\n    { 'x': 'Germany', y: 17, text: 'Germany: 17' },\r\n    { 'x': 'Japan', y: 12, text: 'Japan: 12' },\r\n    { 'x': 'France', y: 10, text: 'France: 10' },\r\n    { 'x': 'South Korea', y: 9, text: 'South Korea: 9' },\r\n    { 'x': 'Great Britain', y: 27, text: 'Great Britain: 27' },\r\n    { 'x': 'Italy', y: 8, text: 'Italy: 8' },\r\n    { 'x': 'Australia', y: 8, text: 'Australia: 8' },\r\n    { 'x': 'Netherlands', y: 8, text: 'Netherlands: 8' },\r\n    { 'x': 'Hungary', y: 8, text: 'Hungary: 8' },\r\n    { 'x': 'Brazil', y: 7, text: 'Brazil: 7' },\r\n    { 'x': 'Spain', y: 7, text: 'Spain: 7' },\r\n    { 'x': 'Kenya', y: 6, text: 'Kenya: 6' },\r\n];\r\nexport class Grouping extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.droplist = [\r\n            { value: 'Point' },\r\n            { value: 'Value' }\r\n        ];\r\n    }\r\n    change() {\r\n        this.pie.series[0].groupMode = this.dropElement.value;\r\n        let currentValue = this.dropElement.value === 'Point' ? 9 : 8;\r\n        this.pie.series[0].groupTo = currentValue.toString();\r\n        this.pie.series[0].animation.enable = false;\r\n        document.getElementById('clubtext').innerHTML = currentValue.toString();\r\n        this.pie.removeSvg();\r\n        this.pie.refreshSeries();\r\n        this.pie.refreshChart();\r\n    }\r\n    ;\r\n    render() {\r\n        return (<div className='control-pane'>\r\n        <div className='control-section row'>\r\n          <div className='col-lg-9'>\r\n            <AccumulationChartComponent id='pie-chart' ref={pie => this.pie = pie} title='RIO Olympics Gold' load={this.load.bind(this)} tooltip={{ enable: false }} legendSettings={{ visible: false }} textRender={this.onTextRender.bind(this)} pointRender={this.onPointRender.bind(this)} enableSmartLabels={true} loaded={this.onChartLoad.bind(this)}>\r\n              <Inject services={[AccumulationLegend, PieSeries, AccumulationTooltip, AccumulationDataLabel]}/>\r\n              <AccumulationSeriesCollectionDirective>\r\n                <AccumulationSeriesDirective name='RIO' dataSource={data1} xName='x' yName='y' animation={{ enable: true }} explode={true} radius='70%' groupTo='9' groupMode='Point' startAngle={0} endAngle={360} innerRadius='0%' dataLabel={{\r\n            visible: true,\r\n            position: 'Outside',\r\n            connectorStyle: { type: 'Line', length: '5%' },\r\n            font: {\r\n                size: '14px'\r\n            }\r\n        }}>\r\n                </AccumulationSeriesDirective>\r\n              </AccumulationSeriesCollectionDirective>\r\n            </AccumulationChartComponent>\r\n          </div>\r\n          <div className='col-lg-3 property-section'>\r\n            <PropertyPane title='Properties'>\r\n              <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                <tr style={{ height: '50px' }}>\r\n                  <td style={{ width: '50%' }}>\r\n                    <div>Mode: </div>\r\n                  </td>\r\n                  <td style={{ padding: 10, width: '50%' }}>\r\n                    <DropDownListComponent width={120} id=\"modes\" change={this.change.bind(this)} ref={d => this.dropElement = d} dataSource={this.droplist} fields={{ text: 'value', value: 'value' }} value=\"Point\"/>\r\n                  </td>\r\n                </tr>\r\n                <tr style={{ height: '50px' }}>\r\n                  <td style={{ width: '60%' }}>\r\n                    <div>Group To:\r\n                        <p id=\"clubtext\" style={{ fontWeight: 'normal' }}>9</p>\r\n                    </div>\r\n                  </td>\r\n                  <td style={{ width: '40%' }}>\r\n                    <div>\r\n                      <input type=\"range\" name=\"clubvalue\" onChange={this.onClubvalue.bind(this)} ref={slider => this.slider = slider} defaultValue=\"9\" min=\"0\" max=\"27\" id=\"clubvalue\" style={{ marginLeft: '-5px' }}/>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              </table>\r\n            </PropertyPane>\r\n          </div>\r\n        </div>\r\n      </div>);\r\n    }\r\n    onTextRender(args) {\r\n        args.text = args.point.x + ' ' + args.point.y;\r\n    }\r\n    ;\r\n    onPointRender(args) {\r\n        if (args.point.isClubbed || args.point.isSliced) {\r\n            args.fill = '#D3D3D3';\r\n        }\r\n    }\r\n    ;\r\n    onChartLoad(args) {\r\n        document.getElementById('pie-chart').setAttribute('title', '');\r\n    }\r\n    ;\r\n    onClubvalue(e) {\r\n        let clubvalue = document.getElementById('clubvalue').value;\r\n        this.pie.series[0].groupTo = clubvalue;\r\n        this.pie.series[0].animation.enable = false;\r\n        document.getElementById('clubtext').innerHTML = clubvalue;\r\n        this.pie.removeSvg();\r\n        this.pie.refreshSeries();\r\n        this.pie.refreshChart();\r\n    }\r\n    ;\r\n}\r\n\nrender(<Grouping />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}