{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","theme-color.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Initialize the Theme colors\n */\nexports.materialColors = ['#00bdae', '#404041', '#357cd2', '#e56590', '#f8b883', '#70ad47', '#dd8abd', '#7f84e8', '#7bb4eb',\n    '#ea7a57', '#404041', '#00bdae'];\nexports.fabricColors = ['#4472c4', '#ed7d31', '#ffc000', '#70ad47', '#5b9bd5',\n    '#c1c1c1', '#6f6fe2', '#e269ae', '#9e480e', '#997300', '#4472c4', '#70ad47', '#ffc000', '#ed7d31'];\nexports.bootstrapColors = ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e', '#ff6ea6',\n    '#7953ac', '#b99b4f', '#407c92', '#5ea716', '#b91c52'];\nexports.highContrastColors = ['#79ECE4', '#E98272', '#DFE6B6', '#C6E773', '#BA98FF',\n    '#FA83C3', '#00C27A', '#43ACEF', '#D681EF', '#D8BC6E'];\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for smart axis labels\r\n */\r\nimport * as React from \"react\";\r\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Tooltip, DataLabel, MultiLevelLabel, Category, ColumnSeries, Inject } from '@syncfusion/ej2-react-charts';\r\nimport { Browser } from '@syncfusion/ej2-base';\r\nimport { SampleBase } from './sample-base';\r\nimport { fabricColors, materialColors, bootstrapColors, highContrastColors } from './theme-color';\r\nexport let pointRender = (args) => {\r\n    let selectedTheme = location.hash.split('/')[1];\r\n    selectedTheme = selectedTheme ? selectedTheme : 'material';\r\n    if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\r\n        args.fill = fabricColors[args.point.index % 10];\r\n    }\r\n    else if (selectedTheme === 'material') {\r\n        args.fill = materialColors[args.point.index % 10];\r\n    }\r\n    else if (selectedTheme === 'highcontrast') {\r\n        args.fill = highContrastColors[args.point.index % 10];\r\n    }\r\n    else {\r\n        args.fill = bootstrapColors[args.point.index % 10];\r\n    }\r\n};\r\nexport let data1 = [{ x: 'Grapes', y: 28 }, { x: 'Apples', y: 87 },\r\n    { x: 'Pears', y: 42 }, { x: 'Grapes', y: 13 },\r\n    { x: 'Apples', y: 13 }, { x: 'Pears', y: 10 },\r\n    { x: 'Tomato', y: 31 }, { x: 'Potato', y: 96 },\r\n    { x: 'Cucumber', y: 41 }, { x: 'Onion', y: 59 }];\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n\t}`;\r\nexport class Multilevellabels extends SampleBase {\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section row'>\r\n                    <div>\r\n                        <ChartComponent id='charts' primaryXAxis={{\r\n            valueType: 'Category', labelRotation: 90,\r\n            border: { width: 1, type: 'Rectangle' },\r\n            isIndexed: true, interval: 1, majorGridLines: { width: 0 },\r\n            multiLevelLabels: (Browser.isDevice ? ([\r\n                {\r\n                    border: { type: 'Rectangle' },\r\n                    categories: [\r\n                        { start: -0.5, end: 2.5, text: 'In Season', },\r\n                        { start: 2.5, end: 5.5, text: 'Out of Season', },\r\n                        { start: 5.5, end: 7.5, text: 'In Season', },\r\n                        { start: 7.5, end: 9.5, text: 'Out of Season', },\r\n                    ]\r\n                }, {\r\n                    border: { type: 'Rectangle' },\r\n                    textStyle: { fontWeight: 'Bold' },\r\n                    categories: [\r\n                        { start: -0.5, end: 5.5, text: 'Fruits', },\r\n                        { start: 5.5, end: 9.5, text: 'Vegetables', },\r\n                    ]\r\n                }\r\n            ]) : [\r\n                {\r\n                    border: { type: 'Rectangle' },\r\n                    categories: [\r\n                        { start: -0.5, end: 0.5, text: 'Seedless', },\r\n                        { start: 0.5, end: 2.5, text: 'Seeded', },\r\n                        { start: 2.5, end: 3.5, text: 'Seedless', },\r\n                        { start: 3.5, end: 5.5, text: 'Seeded', },\r\n                        { start: 5.5, end: 6.5, text: 'Seedless', },\r\n                        { start: 6.5, end: 7.5, text: 'Seeded', },\r\n                        { start: 7.5, end: 8.5, text: 'Seedless', },\r\n                        { start: 8.5, end: 9.5, text: 'Seeded', }\r\n                    ]\r\n                }, {\r\n                    border: { type: 'Rectangle' },\r\n                    categories: [\r\n                        { start: -0.5, end: 2.5, text: 'In Season', },\r\n                        { start: 2.5, end: 5.5, text: 'Out of Season', },\r\n                        { start: 5.5, end: 7.5, text: 'In Season', },\r\n                        { start: 7.5, end: 9.5, text: 'Out of Season', },\r\n                    ]\r\n                }, {\r\n                    border: { type: 'Rectangle' },\r\n                    textStyle: { fontWeight: 'Bold' },\r\n                    categories: [\r\n                        { start: -0.5, end: 5.5, text: 'Fruits', },\r\n                        { start: 5.5, end: 9.5, text: 'Vegetables', },\r\n                    ]\r\n                }\r\n            ])\r\n        }} width={Browser.isDevice ? '100%' : '80%'} chartArea={{ border: { width: 0 } }} primaryYAxis={{\r\n            minimum: 0, maximum: 120, interval: 30,\r\n            majorTickLines: { width: 0 }, lineStyle: { width: 0 }, labelStyle: { color: 'transparent' }\r\n        }} load={this.load.bind(this)} pointRender={pointRender} title=\"Fruits and Vegetables - Season\" loaded={this.onChartLoad.bind(this)} legendSettings={{ visible: false }} tooltip={{ enable: true }}>\r\n                            <Inject services={[Category, Category, ColumnSeries, Tooltip, DataLabel, MultiLevelLabel]}/>\r\n                            <SeriesCollectionDirective>\r\n                                <SeriesDirective dataSource={data1} xName='x' yName='y' type='Column' marker={{ dataLabel: { visible: true, position: 'Outer' } }}>\r\n                                </SeriesDirective>\r\n                            </SeriesCollectionDirective>\r\n                        </ChartComponent>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n    onChartLoad(args) {\r\n        let chart = document.getElementById('charts');\r\n        chart.setAttribute('title', '');\r\n    }\r\n    ;\r\n}\r\n\nrender(<Multilevellabels />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}