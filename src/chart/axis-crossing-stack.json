{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for smart axis labels\r\n */\r\nimport * as React from \"react\";\r\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, LineSeries, ScatterSeries, SplineSeries, Tooltip, Legend, Inject } from '@syncfusion/ej2-react-charts';\r\nimport { PropertyPane } from './property-pane';\r\nimport { SampleBase } from './sample-base';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { NumericTextBoxComponent } from '@syncfusion/ej2-react-inputs';\r\nexport let data1 = [{ x: -6, y: 2 }, { x: -3, y: -4 }, { x: 1.5, y: 3.5 }, { x: 6, y: 4.5 }];\r\nexport let data2 = [{ x: -6, y: 2 }, { x: -5, y: 0 }, { x: -4.511, y: -0.977 }, { x: -3, y: -4 }, { x: -1.348, y: -1.247 },\r\n    { x: -0.6, y: 0 }, { x: 0, y: 1 }, { x: 1.5, y: 3.5 }, { x: 6, y: 4.5 }];\r\nexport let data3 = [{ x: -6, y: 2 }, { x: -5.291, y: 0 }, { x: -5, y: -0.774 }, { x: -3, y: -4 }, { x: -0.6, y: -0.965 },\r\n    { x: -0.175, y: 0 }, { x: 0, y: 0.404 }, { x: 1.5, y: 3.5 }, { x: 3.863, y: 5.163 }, { x: 6, y: 4.5 }];\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n\t}`;\r\nexport class AxisCrossing extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.droplist = [\r\n            { value: 'X' },\r\n            { value: 'Y' },\r\n        ];\r\n    }\r\n    change() {\r\n        let target = document.getElementById('axisElements');\r\n        if (this.dropElement.value === 'X') {\r\n            target.checked = this.chartInstance.primaryXAxis.placeNextToAxisLine;\r\n            this.numericValue.value = +this.chartInstance.primaryXAxis.crossesAt;\r\n        }\r\n        else {\r\n            target.checked = this.chartInstance.primaryYAxis.placeNextToAxisLine;\r\n            this.numericValue.value = +this.chartInstance.primaryYAxis.crossesAt;\r\n        }\r\n        this.chartInstance.dataBind();\r\n    }\r\n    ;\r\n    axisElements() {\r\n        let target = document.getElementById('axisElements');\r\n        if (this.dropElement.value === 'X') {\r\n            this.chartInstance.primaryXAxis.placeNextToAxisLine = target.checked;\r\n        }\r\n        else {\r\n            this.chartInstance.primaryYAxis.placeNextToAxisLine = target.checked;\r\n        }\r\n        this.chartInstance.dataBind();\r\n    }\r\n    ;\r\n    crosshingValue() {\r\n        if (this.dropElement.value === 'X') {\r\n            this.chartInstance.primaryXAxis.crossesAt = this.numericValue.value;\r\n        }\r\n        else {\r\n            this.chartInstance.primaryYAxis.crossesAt = this.numericValue.value;\r\n        }\r\n        this.chartInstance.dataBind();\r\n    }\r\n    ;\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section row'>\r\n                    <div className='col-md-8'>\r\n                        <ChartComponent id='charts' ref={chart => this.chartInstance = chart} style={{ textAlign: \"center\" }} primaryXAxis={{\r\n            minimum: -8, maximum: 8, interval: 2,\r\n            valueType: 'Double',\r\n            lineStyle: {\r\n                width: 2\r\n            },\r\n            minorTickLines: { width: 0 },\r\n            majorTickLines: { width: 0 },\r\n            crossesAt: 0,\r\n            minorTicksPerInterval: 3\r\n        }} chartArea={{ border: { width: 0 } }} primaryYAxis={{\r\n            minimum: -8, maximum: 8, interval: 2,\r\n            lineStyle: {\r\n                width: 2\r\n            },\r\n            majorTickLines: { width: 0 },\r\n            minorTickLines: { width: 0 },\r\n            crossesAt: 0,\r\n            minorTicksPerInterval: 3,\r\n        }} load={this.load.bind(this)} title=\"Spline Interpolation\" loaded={this.onChartLoad.bind(this)}>\r\n                            <Inject services={[LineSeries, ScatterSeries, SplineSeries, Tooltip, Legend]}/>\r\n                            <SeriesCollectionDirective>\r\n                                <SeriesDirective dataSource={data1} xName='x' yName='y' name=\"Linear Interpolation\" type='Line' width={2} enableTooltip={false} fill='Blue'>\r\n                                </SeriesDirective>\r\n                                <SeriesDirective dataSource={data1} xName='x' yName='y' name=\"Cubic Spline Interpolation\" type='Spline' width={2} enableTooltip={false} fill='Green'>\r\n                                </SeriesDirective>\r\n                                <SeriesDirective dataSource={data1} xName='x' yName='y' name=\"Data Points\" type='Scatter' width={2} marker={{ visible: false, width: 12, height: 12 }} fill='red'>\r\n                                </SeriesDirective>                                \r\n                            </SeriesCollectionDirective>\r\n                        </ChartComponent>\r\n                    </div>\r\n                    <div className='col-md-4 property-section'>\r\n                        <PropertyPane title='Properties'>\r\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td>\r\n                                        <div>Axis: </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <DropDownListComponent width=\"120px\" id=\"selmode\" change={this.change.bind(this)} ref={d => this.dropElement = d} dataSource={this.droplist} fields={{ text: 'value', value: 'value' }} value=\"X\"/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td style={{ width: '60%' }}>\r\n                                        <div>Crosses Value:</div>\r\n                                    </td>\r\n                                    <td style={{ width: '40%' }}>\r\n                                        <div>\r\n                                            <NumericTextBoxComponent value={0} min={-8} max={8} width={120} step={2} change={this.crosshingValue.bind(this)} style={{ marginLeft: '-5px' }} ref={d => this.numericValue = d}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td style={{ width: '60%' }}>\r\n                                        <div>Placing Label Near to Axis Line:</div>\r\n                                    </td>\r\n                                    <td style={{ width: '40%' }}>\r\n                                        <div>\r\n                                            <input type=\"checkbox\" id=\"axisElements\" onChange={this.axisElements.bind(this)} style={{ marginLeft: '-5px' }} ref={d => this.crossValue = d} checked/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n    onChartLoad(args) {\r\n        let chart = document.getElementById('charts');\r\n        chart.setAttribute('title', '');\r\n    }\r\n    ;\r\n}\r\n\nrender(<AxisCrossing />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}