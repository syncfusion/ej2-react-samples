{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from \"react\";\r\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, StackingColumnSeries, Category, Legend, Selection, ChartAnnotation, AccumulationChart, AccumulationDataLabel, AnnotationsDirective, AnnotationDirective } from '@syncfusion/ej2-react-charts';\r\nimport { SampleBase } from './sample-base';\r\nimport { Browser } from '@syncfusion/ej2-base';\r\nAccumulationChart.Inject(AccumulationDataLabel);\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }`;\r\n/**\r\n * Sample for annotation\r\n */\r\nexport function getValue(series, pointIndex, y) {\r\n    let totalValue = 0;\r\n    for (let ser of series) {\r\n        totalValue += ser.points[pointIndex].y;\r\n    }\r\n    return (Math.round((y / totalValue) * 100)) + '%';\r\n}\r\nexport class Annotation extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.isRender = false;\r\n        this.dataSource = [\r\n            { x: '2014', y0: 51, y1: 77, y2: 66, y3: 34 }, { x: '2015', y0: 67, y1: 49, y2: 19, y3: 38 },\r\n            { x: '2016', y0: 143, y1: 121, y2: 91, y3: 44 }, { x: '2017', y0: 19, y1: 28, y2: 65, y3: 51 },\r\n            { x: '2018', y0: 30, y1: 66, y2: 32, y3: 61 }, { x: '2019', y0: 189, y1: 128, y2: 122, y3: 76 },\r\n            { x: '2020', y0: 72, y1: 97, y2: 65, y3: 82 }\r\n        ];\r\n        this.pieDataSource = [\r\n            { x: 'UK', y: 51, text: '22%' }, { x: 'Germany', y: 77, text: '34%' },\r\n            { x: 'France', y: 66, text: '29%' }, { x: 'Italy', y: 34, text: '15%' }\r\n        ];\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section'>\r\n                    <ChartComponent id='charts' ref={chart => this.chart = chart} style={{ textAlign: \"center\" }} primaryXAxis={{\r\n            title: 'Years', valueType: 'Category', majorGridLines: { width: 0 }, minorGridLines: { width: 1 },\r\n            minorTickLines: { width: 1 }, interval: 1, labelIntersectAction: 'Rotate45',\r\n        }} chartArea={{ border: { width: 0 } }} primaryYAxis={{\r\n            title: 'Sales', lineStyle: { width: 0 },\r\n            minimum: 0, maximum: 700, interval: 100,\r\n            majorGridLines: { width: 1 }, minorGridLines: { width: 1 },\r\n            minorTickLines: { width: 0 }, labelFormat: '{value}B',\r\n            majorTickLines: { width: 0 }\r\n        }} load={this.load.bind(this)} loaded={this.loaded.bind(this)} width={Browser.isDevice ? '100%' : '80%'} animationComplete={this.onChartLoad.bind(this)} chartMouseUp={this.chartMouseUp.bind(this)} selectionMode='Cluster' selectedDataIndexes={[{ series: 0, point: 0 }]} legendSettings={{ visible: true, toggleVisibility: false }} title=\"Mobile Game Market by Country\">\r\n                        <Inject services={[StackingColumnSeries, Category, Legend, Selection, ChartAnnotation]}/>\r\n                        <AnnotationsDirective>\r\n                            <AnnotationDirective content='<div id=\"chart_annotation\" style=\"width: 200px; height: 200px\"></div>' x='20%' y='25%' coordinateUnits='Pixel' region='Series'>\r\n                            </AnnotationDirective>\r\n                        </AnnotationsDirective>\r\n                        <SeriesCollectionDirective>\r\n                            <SeriesDirective dataSource={this.dataSource} type='StackingColumn' xName='x' yName='y0' name='UK'>\r\n                            </SeriesDirective>\r\n                            <SeriesDirective dataSource={this.dataSource} type='StackingColumn' xName='x' yName='y1' name='Germany'>\r\n                            </SeriesDirective>\r\n                            <SeriesDirective dataSource={this.dataSource} type='StackingColumn' xName='x' yName='y2' name='France'>\r\n                            </SeriesDirective>\r\n                            <SeriesDirective dataSource={this.dataSource} type='StackingColumn' xName='x' yName='y3' name='Italy'>\r\n                            </SeriesDirective>\r\n                        </SeriesCollectionDirective>\r\n                    </ChartComponent>\r\n                </div>\r\n            </div>);\r\n    }\r\n    onChartLoad(args) {\r\n        let chart = document.getElementById('charts');\r\n        chart.setAttribute('title', '');\r\n        this.isRender = true;\r\n        this.pie = new AccumulationChart({\r\n            background: 'transparent',\r\n            series: [{\r\n                    radius: '65%', animation: { enable: false },\r\n                    dataSource: this.pieDataSource,\r\n                    xName: 'x', yName: 'y', dataLabel: { visible: true, position: 'Inside', font: { color: 'white' }, name: 'text' },\r\n                }],\r\n            load: (args) => {\r\n                let selectedTheme = location.hash.split('/')[1];\r\n                selectedTheme = selectedTheme ? selectedTheme : 'Material';\r\n                args.accumulation.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\r\n            },\r\n            legendSettings: { visible: false }\r\n        });\r\n        this.pie.appendTo('#chart_annotation');\r\n    }\r\n    ;\r\n    loaded(args) {\r\n        if (this.isRender) {\r\n            this.pie.destroy();\r\n            this.pie = new AccumulationChart({\r\n                background: 'transparent',\r\n                series: [{\r\n                        radius: '65%', animation: { enable: false },\r\n                        dataSource: this.pieDataSource,\r\n                        xName: 'x', yName: 'y', dataLabel: { visible: true, position: 'Inside', font: { color: 'white' }, name: 'text' },\r\n                    }],\r\n                load: (args) => {\r\n                    let selectedTheme = location.hash.split('/')[1];\r\n                    selectedTheme = selectedTheme ? selectedTheme : 'Material';\r\n                    args.accumulation.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\r\n                },\r\n                legendSettings: { visible: false }\r\n            });\r\n            this.pie.appendTo('#chart_annotation');\r\n        }\r\n    }\r\n    ;\r\n    chartMouseUp(args) {\r\n        if (args.target.indexOf('Point') > -1) {\r\n            let pointIndex = parseInt(args.target[args.target.length - 1], 10);\r\n            this.pieDataSource = [];\r\n            for (let series of this.chart.visibleSeries) {\r\n                let value = series.points[pointIndex].y;\r\n                this.pieDataSource.push({\r\n                    'x': series.name, 'y': value, 'text': getValue(this.chart.visibleSeries, pointIndex, value)\r\n                });\r\n            }\r\n            this.pie.series[0].dataSource = this.pieDataSource;\r\n            this.pie.series[0].xName = 'x';\r\n            this.pie.series[0].yName = 'y';\r\n            this.pie.refresh();\r\n        }\r\n    }\r\n    ;\r\n}\r\n\nrender(<Annotation />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}