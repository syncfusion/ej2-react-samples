{"index.css":"/* css */","theme-color.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Initialize the Theme colors\n */\nexports.materialColors = ['#00bdae', '#404041', '#357cd2', '#e56590', '#f8b883', '#70ad47', '#dd8abd', '#7f84e8', '#7bb4eb',\n    '#ea7a57', '#404041', '#00bdae'];\nexports.fabricColors = ['#4472c4', '#ed7d31', '#ffc000', '#70ad47', '#5b9bd5',\n    '#c1c1c1', '#6f6fe2', '#e269ae', '#9e480e', '#997300', '#4472c4', '#70ad47', '#ffc000', '#ed7d31'];\nexports.bootstrapColors = ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e', '#ff6ea6',\n    '#7953ac', '#b99b4f', '#407c92', '#5ea716', '#b91c52'];\nexports.highContrastColors = ['#79ECE4', '#E98272', '#DFE6B6', '#C6E773', '#BA98FF',\n    '#FA83C3', '#00C27A', '#43ACEF', '#D681EF', '#D8BC6E'];\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for Category Axis\r\n */\r\nimport * as React from \"react\";\r\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, DataLabel, Legend, Tooltip, BarSeries, Category } from '@syncfusion/ej2-react-charts';\r\nimport { Browser } from '@syncfusion/ej2-base';\r\nimport { fabricColors, materialColors, bootstrapColors, highContrastColors } from './theme-color';\r\nimport { SampleBase } from './sample-base';\r\nexport let pointRender = (args) => {\r\n    let selectedTheme = location.hash.split('/')[1];\r\n    selectedTheme = selectedTheme ? selectedTheme : 'material';\r\n    if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\r\n        args.fill = fabricColors[args.point.index % 10];\r\n    }\r\n    else if (selectedTheme === 'material') {\r\n        args.fill = materialColors[args.point.index % 10];\r\n    }\r\n    else if (selectedTheme === 'highcontrast') {\r\n        args.fill = highContrastColors[args.point.index % 10];\r\n    }\r\n    else {\r\n        args.fill = bootstrapColors[args.point.index % 10];\r\n    }\r\n};\r\nexport let data = [\r\n    { x: 'Germany', y: 72, country: 'GER: 72' },\r\n    { x: 'Russia', y: 103.1, country: 'RUS: 103.1' },\r\n    { x: 'Brazil', y: 139.1, country: 'BRZ: 139.1' },\r\n    { x: 'India', y: 462.1, country: 'IND: 462.1' },\r\n    { x: 'China', y: 721.4, country: 'CHN: 721.4' },\r\n    { x: 'United States<br>Of America', y: 286.9, country: 'USA: 286.9' },\r\n    { x: 'Great Britain', y: 115.1, country: 'GBR: 115.1' },\r\n    { x: 'Nigeria', y: 97.2, country: 'NGR: 97.2' },\r\n];\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }`;\r\n/**\r\n * Category sample\r\n */\r\nexport class CategoryAxis extends SampleBase {\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section'>\r\n                    <ChartComponent id='charts' style={{ textAlign: \"center\" }} primaryXAxis={{\r\n            title: 'Country',\r\n            valueType: 'Category',\r\n            majorGridLines: { width: 0 },\r\n            enableTrim: false,\r\n        }} primaryYAxis={{\r\n            minimum: 0,\r\n            maximum: 800,\r\n            labelFormat: Browser.isDevice ? '{value}' : '{value}M',\r\n            edgeLabelPlacement: 'Shift',\r\n            majorGridLines: { width: 0 },\r\n            majorTickLines: { width: 0 },\r\n            lineStyle: { width: 0 },\r\n            labelStyle: {\r\n                color: 'transparent'\r\n            }\r\n        }} load={this.load.bind(this)} width={Browser.isDevice ? '100%' : '60%'} chartArea={{ border: { width: 0 } }} legendSettings={{ visible: false }} title={Browser.isDevice ? 'Internet Users in Million – 2016' : 'Internet Users – 2016'} pointRender={pointRender} loaded={this.onChartLoad.bind(this)} tooltip={{ enable: true, format: '${point.tooltip}' }}>\r\n                        <Inject services={[BarSeries, Legend, Tooltip, DataLabel, Category]}/>\r\n                        <SeriesCollectionDirective>\r\n                            <SeriesDirective dataSource={data} xName='x' yName='y' type='Bar' width={2} tooltipMappingName='country' marker={{\r\n            dataLabel: {\r\n                visible: true,\r\n                position: 'Top', font: {\r\n                    fontWeight: '600',\r\n                    color: '#ffffff'\r\n                }\r\n            }\r\n        }} name='Users'>\r\n                            </SeriesDirective>\r\n                        </SeriesCollectionDirective>\r\n                    </ChartComponent>\r\n                    <div style={{ float: 'right', marginRight: '10px' }}>Source: &nbsp;\r\n                         <a href=\"http://www.internetworldstats.com/top20.htm\" target=\"_blank\">www.internetworldstats.com</a>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n    onChartLoad(args) {\r\n        let chart = document.getElementById('charts');\r\n        chart.setAttribute('title', '');\r\n    }\r\n    ;\r\n}\r\n\nrender(<CategoryAxis />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}