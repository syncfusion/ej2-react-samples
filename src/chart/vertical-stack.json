{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Samples for vertical chart\r\n */\r\nimport * as React from \"react\";\r\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, LineSeries, getElement } from '@syncfusion/ej2-react-charts';\r\nimport { SampleBase } from './sample-base';\r\nimport { Browser } from '@syncfusion/ej2-base';\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }`;\r\nexport class VerticalChart extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.count = 0;\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section'>\r\n                    <ChartComponent id='charts-vertical' ref={chart => this.chartInstance = chart} style={{ textAlign: \"center\" }} primaryXAxis={{\r\n            title: 'Time (s)', majorGridLines: { width: 0 }\r\n        }} load={this.load.bind(this)} loaded={this.onChartLoad.bind(this)} primaryYAxis={{\r\n            title: 'Velocity (m/s)', majorGridLines: { width: 0 }, minimum: -15, maximum: 15, interval: 5\r\n        }} chartArea={{ border: { width: 0 } }} isTransposed={true} width={Browser.isDevice ? '100%' : '80%'} title='Indonesia - Seismograph Analysis'>\r\n                        <Inject services={[LineSeries]}/>\r\n                        <SeriesCollectionDirective>\r\n                            <SeriesDirective width={2} dataSource={[{ x: 0, y: 0 }]} xName='x' yName='y' type='Line' animation={{ enable: false }}>\r\n                            </SeriesDirective>\r\n                        </SeriesCollectionDirective>\r\n                    </ChartComponent>\r\n                </div>\r\n            </div>);\r\n    }\r\n    onChartLoad(args) {\r\n        //let chart: Element = document.getElementById('charts-vertical');\r\n        this.chartInstance.loaded = null;\r\n        //chart.setAttribute('title', '');\r\n        this.clrInterval =\r\n            +setInterval(() => {\r\n                args.chart.series[0].dataSource = this.liveData(args.chart.series[0].dataSource, args.chart.series[0]);\r\n                args.chart.refresh();\r\n            }, \r\n            // tslint:disable-next-line:align\r\n            10);\r\n    }\r\n    ;\r\n    liveData(data, series) {\r\n        this.count = this.count + 1;\r\n        let newData = data;\r\n        if (this.count > 350 || getElement('charts-vertical') === null) {\r\n            clearInterval(this.clrInterval);\r\n        }\r\n        else if (this.count > 300) {\r\n            newData.push({ x: this.getXValue(data), y: this.getRandomArbitrary(0, 0) });\r\n        }\r\n        else if (this.count > 250) {\r\n            newData.push({ x: this.getXValue(data), y: this.getRandomArbitrary(-2, 1) });\r\n        }\r\n        else if (this.count > 180) {\r\n            newData.push({ x: this.getXValue(data), y: this.getRandomArbitrary(-3, 2) });\r\n        }\r\n        else if (this.count > 100) {\r\n            newData.push({ x: this.getXValue(data), y: this.getRandomArbitrary(-7, 6) });\r\n        }\r\n        else if (this.count < 50) {\r\n            newData.push({ x: this.getXValue(data), y: this.getRandomArbitrary(-3, 3) });\r\n        }\r\n        else {\r\n            newData.push({ x: this.getXValue(data), y: this.getRandomArbitrary(-9, 9) });\r\n        }\r\n        return newData;\r\n    }\r\n    getRandomArbitrary(min, max) {\r\n        return Math.random() * (max - min) + min;\r\n    }\r\n    getXValue(data) {\r\n        return data.length;\r\n    }\r\n}\r\n\nrender(<VerticalChart />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}