{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Samples for Trendlines\r\n */\r\nimport * as React from \"react\";\r\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, TrendlineDirective, TrendlinesDirective, Inject, Tooltip, LineSeries, ScatterSeries, SplineSeries, Trendlines, Category, Legend } from '@syncfusion/ej2-react-charts';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { NumericTextBoxComponent } from '@syncfusion/ej2-react-inputs';\r\nimport { SampleBase } from './sample-base';\r\nimport { PropertyPane } from './property-pane';\r\nlet series1 = [];\r\nlet yValue = [7.66, 8.03, 8.41, 8.97, 8.77, 8.20, 8.16, 7.89, 8.68, 9.48, 10.11, 11.36, 12.34, 12.60, 12.95,\r\n    13.91, 16.21, 17.50, 22.72, 28.14, 31.26, 31.39, 32.43, 35.52, 36.36,\r\n    41.33, 43.12, 45.00, 47.23, 48.62, 46.60, 45.28, 44.01, 45.17, 41.20, 43.41, 48.32, 45.65, 46.61, 53.34, 58.53];\r\nlet point1;\r\nlet i;\r\nlet j = 0;\r\nfor (i = 1973; i <= 2013; i++) {\r\n    point1 = { x: i, y: yValue[j] };\r\n    series1.push(point1);\r\n    j++;\r\n}\r\nlet powerData = [\r\n    { x: 1, y: 10 }, { x: 2, y: 50 }, { x: 3, y: 80 }, { x: 4, y: 110 },\r\n    { x: 5, y: 180 }, { x: 6, y: 220 }, { x: 7, y: 300 }, { x: 8, y: 370 }, { x: 9, y: 490 }, { x: 10, y: 500 }\r\n];\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }\r\n    #charts_Series_0_TrendLine_0 {\r\n        stroke-dasharray: 10px 10px;\r\n        stroke-linejoin: round; stroke-linecap: round;\r\n        -webkit-animation: dash 1s linear infinite;\r\n        animation: dash 1s linear infinite;\r\n    }\r\n    @-webkit-keyframes dash {\r\n        100% {\r\n            stroke-dashoffset: -20px;\r\n        }\r\n    }\r\n\r\n    @keyframes dash {\r\n        100% {\r\n            stroke-dashoffset: -20px;\r\n        }\r\n    }`;\r\nexport class Trend extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.forwardForecast = false;\r\n        this.backwardForecast = false;\r\n        this.polynomialOrder = true;\r\n        this.period = true;\r\n        this.droplist = [\r\n            { value: 'Linear' },\r\n            { value: 'Exponential' },\r\n            { value: 'Power' },\r\n            { value: 'Logarithmic' },\r\n            { value: 'Polynomial' },\r\n            { value: 'MovingAverage' }\r\n        ];\r\n    }\r\n    change(e) {\r\n        let type = document.getElementById('trendLineType');\r\n        this.chartInstance.series[0].dataSource = [];\r\n        this.chartInstance.series[0].animation.enable = false;\r\n        this.chartInstance.series[0].trendlines[0].type = type.value;\r\n        this.chartInstance.series[0].trendlines[0].name = type.value;\r\n        if (type.value !== 'Power') {\r\n            this.chartInstance.series[0].dataSource = series1;\r\n            this.chartInstance.series[0].name = 'Rupees';\r\n            this.chartInstance.primaryXAxis.title = '';\r\n            this.chartInstance.primaryYAxis.interval = 10;\r\n            this.chartInstance.primaryYAxis.title = 'Rupees against Dollars';\r\n            this.chartInstance.title = 'Historical Indian Rupee Rate (INR USD)';\r\n            if (type.value === 'MovingAverage') {\r\n                this.chartInstance.series[0].trendlines[0].marker.visible = false;\r\n            }\r\n        }\r\n        else {\r\n            this.chartInstance.series[0].dataSource = powerData;\r\n            this.chartInstance.series[0].name = 'Meters';\r\n            this.chartInstance.primaryXAxis.title = 'Seconds';\r\n            this.chartInstance.primaryYAxis.title = 'Meters';\r\n            this.chartInstance.primaryYAxis.interval = 100;\r\n            this.chartInstance.title = 'Distance Measurement';\r\n        }\r\n        if (type.value !== 'Polynomial' && type.value !== 'MovingAverage') {\r\n            this.period = this.polynomialOrder = true;\r\n            this.forwardForecast = this.backwardForecast = false;\r\n        }\r\n        else if (type.value === 'MovingAverage') {\r\n            this.period = false;\r\n            this.forwardForecast = this.backwardForecast = this.polynomialOrder = true;\r\n        }\r\n        else {\r\n            this.forwardForecast = this.backwardForecast = this.polynomialOrder = false;\r\n            this.period = true;\r\n        }\r\n        this.forwardElement.enabled = !this.forwardForecast;\r\n        this.backwardElement.enabled = !this.backwardForecast;\r\n        this.polynomialElement.enabled = !this.polynomialOrder;\r\n        this.periodElement.enabled = !this.period;\r\n        this.chartInstance.refresh();\r\n    }\r\n    checkForwardForecast(e) {\r\n        let value = Number(document.getElementById('forwardForecast').value);\r\n        this.chartInstance.series[0].trendlines[0].forwardForecast = value;\r\n        this.chartInstance.series[0].animation.enable = false;\r\n        this.chartInstance.refresh();\r\n    }\r\n    checkBackwardForecast(e) {\r\n        let value = Number(document.getElementById('backwardForecast').value);\r\n        this.chartInstance.series[0].trendlines[0].backwardForecast = value;\r\n        this.chartInstance.series[0].animation.enable = false;\r\n        this.chartInstance.refresh();\r\n    }\r\n    checkPolynomialOrder(e) {\r\n        let value = Number(document.getElementById('polynomial').value);\r\n        this.chartInstance.series[0].trendlines[0].polynomialOrder = value;\r\n        this.chartInstance.series[0].animation.enable = false;\r\n        this.chartInstance.refresh();\r\n    }\r\n    checkPeriod(e) {\r\n        let value = Number(document.getElementById('period').value);\r\n        this.chartInstance.series[0].trendlines[0].period = value;\r\n        this.chartInstance.series[0].animation.enable = false;\r\n        this.chartInstance.refresh();\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section row'>\r\n                    <div className='col-md-8'>\r\n                        <ChartComponent id='charts' ref={chart => this.chartInstance = chart} load={this.load.bind(this)} primaryXAxis={{\r\n            edgeLabelPlacement: 'Shift',\r\n            majorGridLines: { width: 0 }\r\n        }} primaryYAxis={{\r\n            title: 'Rupees against Dollars',\r\n            interval: 10, lineStyle: { width: 0 }, majorTickLines: { width: 0 }\r\n        }} tooltip={{ enable: true }} chartArea={{ border: { width: 0 } }} title='Historical Indian Rupee Rate (INR USD)' loaded={this.onChartLoad.bind(this)}>\r\n                            <Inject services={[Category, Tooltip, ScatterSeries, SplineSeries, LineSeries, Trendlines, Legend]}/>\r\n                            <SeriesCollectionDirective>\r\n                                <SeriesDirective dataSource={series1} xName='x' yName='y' name='Rupees' type='Spline' marker={{ visible: true }}>\r\n                                    <TrendlinesDirective>\r\n                                        <TrendlineDirective type='Linear' width={3} marker={{ visible: false }} name='Trends' fill='#C64A75'>\r\n                                        </TrendlineDirective>\r\n                                    </TrendlinesDirective>\r\n                                </SeriesDirective>\r\n                            </SeriesCollectionDirective>\r\n                        </ChartComponent>\r\n                    </div>\r\n                    <div className='col-md-4 property-section'>\r\n                        <PropertyPane title='Properties'>\r\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td style={{ width: '60%' }}>\r\n                                        <div>TrendLine Type:</div>\r\n                                    </td>\r\n                                    <td style={{ width: '40%' }}>\r\n                                        <div>\r\n                                            <DropDownListComponent width=\"120px\" id=\"trendLineType\" change={this.change.bind(this)} ref={d => this.dropElement = d} dataSource={this.droplist} fields={{ text: 'value', value: 'value' }} text=\"Linear\" value=\"Linear\"/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr id='' style={{ height: '50px' }}>\r\n                                    <td style={{ width: '80%' }}>\r\n                                        <div>Forward Forecast:</div>\r\n                                    </td>\r\n                                    <td style={{ width: '20%' }}>\r\n                                        <div>\r\n                                            <NumericTextBoxComponent id=\"forwardForecast\" value={0} min={1} max={20} step={1} change={this.checkForwardForecast.bind(this)} ref={d => this.forwardElement = d}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr id='' style={{ height: '50px' }}>\r\n                                    <td style={{ width: '80%' }}>\r\n                                        <div>Backward Forecast:</div>\r\n                                    </td>\r\n                                    <td style={{ width: '20%' }}>\r\n                                        <div>\r\n                                            <NumericTextBoxComponent id=\"backwardForecast\" value={0} min={1} max={20} step={1} change={this.checkBackwardForecast.bind(this)} ref={d => this.backwardElement = d}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr id='' style={{ height: '50px' }}>\r\n                                    <td style={{ width: '80%' }}>\r\n                                        <div>Polynomial Order:</div>\r\n                                    </td>\r\n                                    <td style={{ width: '20%' }}>\r\n                                        <div>\r\n                                            <NumericTextBoxComponent id=\"polynomial\" value={0} min={1} max={20} step={1} enabled={false} change={this.checkPolynomialOrder.bind(this)} ref={d => this.polynomialElement = d}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr id='' style={{ height: '50px' }}>\r\n                                    <td style={{ width: '80%' }}>\r\n                                        <div>Period:</div>\r\n                                    </td>\r\n                                    <td style={{ width: '20%' }}>\r\n                                        <div>\r\n                                            <NumericTextBoxComponent id=\"period\" value={0} min={1} max={20} step={1} enabled={false} change={this.checkPeriod.bind(this)} ref={d => this.periodElement = d}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n    onChartLoad(args) {\r\n        document.getElementById('charts').setAttribute('title', '');\r\n    }\r\n    ;\r\n}\r\n\nrender(<Trend />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}