{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { SampleBase } from './sample-base';\r\nimport { AccumulationChartComponent, AccumulationSeriesCollectionDirective, AccumulationSeriesDirective, AccumulationLegend, PieSeries, AccumulationDataLabel, AccumulationTooltip, AccumulationSelection, Inject, AccumulationChart, Selection } from '@syncfusion/ej2-react-charts';\r\nimport { getInstance } from '@syncfusion/ej2-base';\r\nexport let data1 = [\r\n    { 'x': 'Net-tution and Fees', y: 21, text: '21%' },\r\n    { 'x': 'Self-supporting Operations', y: 21, text: '21%' },\r\n    { 'x': 'Private Gifts', y: 8, text: '8%' },\r\n    { 'x': 'All Other', y: 8, text: '8%' },\r\n    { 'x': 'Local Revenue', y: 4, text: '4%' },\r\n    { 'x': 'State Revenue', y: 21, text: '21%' },\r\n    { 'x': 'Federal Revenue', y: 16, text: '16%' }\r\n];\r\nlet count = 0;\r\nexport class Doughnut extends SampleBase {\r\n    render() {\r\n        return (<div className='control-pane'>\r\n        <div className='control-section'>\r\n          <AccumulationChartComponent id='pie-chart2' ref={pie => this.pie = pie} title='Education Institutional Revenue' legendSettings={{\r\n            visible: true, toggleVisibility: false,\r\n            position: 'Right', height: '28%', width: '44%'\r\n        }} enableSmartLabels={true} selectionMode={'Point'} load={this.load.bind(this)} animationComplete={this.onAnimationComplete.bind(this)} tooltip={{ enable: false, header: '<b>${point.x}</b>', format: 'Composition: <b>${point.y}%</b>' }} textRender={this.onTextRender.bind(this)} loaded={this.onChartLoad.bind(this)}>\r\n            <Inject services={[AccumulationLegend, PieSeries, AccumulationDataLabel, AccumulationTooltip, AccumulationSelection, Selection]}/>\r\n            <AccumulationSeriesCollectionDirective>\r\n              <AccumulationSeriesDirective name='Revenue' dataSource={data1} xName='x' yName='y' innerRadius='40%' startAngle={0} endAngle={360} dataLabel={{\r\n            visible: true, position: 'Inside',\r\n            name: '${point.y}',\r\n            font: { color: 'white', fontWeight: '600', size: '14px' }\r\n        }}>\r\n              </AccumulationSeriesDirective>\r\n            </AccumulationSeriesCollectionDirective>\r\n          </AccumulationChartComponent>\r\n          <div id=\"center_title\" style={{ visibility: 'hidden', position: 'absolute' }}>Expenses in Year</div>\r\n        </div>\r\n      </div>);\r\n    }\r\n    onAnimationComplete(args) {\r\n        let centerTitle = document.getElementById('center_title');\r\n        centerTitle.style.fontSize = this.getFontSize(args.accumulation.initialClipRect.width);\r\n        let rect = centerTitle.getBoundingClientRect();\r\n        centerTitle.style.top = (args.accumulation.origin.y + args.accumulation.element.offsetTop - (rect.height / 2)) + 'px';\r\n        centerTitle.style.left = (args.accumulation.origin.x + args.accumulation.element.offsetLeft - (rect.width / 2)) + 'px';\r\n        centerTitle.style.visibility = 'visible';\r\n        let points = args.accumulation.visibleSeries[0].points;\r\n        for (let point of points) {\r\n            if (point.labelPosition === 'Outside' && point.labelVisible) {\r\n                let label = document.getElementById('pie-chart2_datalabel_Series_0_text_' + point.index);\r\n                label.setAttribute('fill', 'black');\r\n            }\r\n        }\r\n        this.pie.animateSeries = false;\r\n    }\r\n    ;\r\n    getFontSize(width) {\r\n        if (width > 300) {\r\n            return '13px';\r\n        }\r\n        else if (width > 250) {\r\n            return '8px';\r\n        }\r\n        else {\r\n            return '6px';\r\n        }\r\n    }\r\n    ;\r\n    onTextRender(args) {\r\n        let pie = getInstance('#pie-chart2', AccumulationChart);\r\n        args.series.dataLabel.font.size = this.getFontSize(pie.initialClipRect.width);\r\n        args.text = args.text + '%';\r\n    }\r\n    ;\r\n    onChartLoad(args) {\r\n        let pie = getInstance('#pie-chart2', AccumulationChart);\r\n        document.getElementById('pie-chart2').setAttribute('title', '');\r\n        pie.loaded = null;\r\n        let pieinterval = setInterval(() => {\r\n            if (document.getElementById('pie-chart2')) {\r\n                if (count === 0) {\r\n                    pie.series[0].dataSource = [{ 'x': 'Net-tution and Fees', y: 10 }, { 'x': 'Self-supporting Operations', y: 10 },\r\n                        { 'x': 'Private Gifts', y: 13 }, { 'x': 'All Other', y: 14 },\r\n                        { 'x': 'Local Revenue', y: 9 }, { 'x': 'State Revenue', y: 13 },\r\n                        { 'x': 'Federal Revenue', y: 8 }\r\n                    ];\r\n                    pie.animate();\r\n                    count++;\r\n                }\r\n                else if (count === 1) {\r\n                    pie.series[0].dataSource = [\r\n                        { 'x': 'Net-tution and Fees', y: 120 }, { 'x': 'Self-supporting Operations', y: 31 },\r\n                        { 'x': 'Private Gifts', y: 6 }, { 'x': 'All Other', y: 12 },\r\n                        { 'x': 'Local Revenue', y: 25 }, { 'x': 'State Revenue', y: 11 },\r\n                        { 'x': 'Federal Revenue', y: 12 }\r\n                    ];\r\n                    pie.animate();\r\n                    count++;\r\n                }\r\n                else if (count === 2) {\r\n                    pie.series[0].dataSource = [\r\n                        { 'x': 'Net-tution and Fees', y: 6 }, { 'x': 'Self-supporting Operations', y: 22 },\r\n                        { 'x': 'Private Gifts', y: 11 }, { 'x': 'All Other', y: 15 },\r\n                        { 'x': 'Local Revenue', y: 13 }, { 'x': 'State Revenue', y: 10 },\r\n                        { 'x': 'Federal Revenue', y: 8 }\r\n                    ];\r\n                    pie.animate();\r\n                    count++;\r\n                }\r\n                else if (count === 3) {\r\n                    pie.series[0].dataSource = [\r\n                        { 'x': 'Net-tution and Fees', y: 15 }, { 'x': 'Self-supporting Operations', y: 10 },\r\n                        { 'x': 'Private Gifts', y: 18 }, { 'x': 'All Other', y: 20 },\r\n                        { 'x': 'Local Revenue', y: 30 }, { 'x': 'State Revenue', y: 20 },\r\n                        { 'x': 'Federal Revenue', y: 25 }\r\n                    ];\r\n                    pie.animate();\r\n                    count++;\r\n                }\r\n                else if (count === 4) {\r\n                    pie.series[0].dataSource = [\r\n                        { 'x': 'Net-tution and Fees', y: 21 }, { 'x': 'Self-supporting Operations', y: 10 },\r\n                        { 'x': 'Private Gifts', y: 15 }, { 'x': 'All Other', y: 15 },\r\n                        { 'x': 'Local Revenue', y: 11 }, { 'x': 'State Revenue', y: 20 },\r\n                        { 'x': 'Federal Revenue', y: 60 }\r\n                    ];\r\n                    pie.animate();\r\n                    count = 0;\r\n                }\r\n            }\r\n            else {\r\n                clearInterval(pieinterval);\r\n            }\r\n        }, 3000);\r\n    }\r\n    ;\r\n}\r\n\nrender(<Doughnut />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}