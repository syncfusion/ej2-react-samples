{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for stripline recurrence\r\n */\r\nimport * as React from \"react\";\r\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, Legend, Category, ColumnSeries, DateTime, Tooltip, StripLine } from '@syncfusion/ej2-react-charts';\r\nimport { PropertyPane } from './property-pane';\r\nimport { SampleBase } from './sample-base';\r\nexport let data1 = [\r\n    { x: new Date(1970, 1, 1), y: 16500 }, { x: new Date(1975, 1, 1), y: 16000 }, { x: new Date(1980, 1, 1), y: 15400 },\r\n    { x: new Date(1985, 1, 1), y: 15800 }, { x: new Date(1990, 1, 1), y: 14000 }, { x: new Date(1995, 1, 1), y: 10500 },\r\n    { x: new Date(2000, 1, 1), y: 13300 }, { x: new Date(2005, 1, 1), y: 12800 }\r\n];\r\nexport let data2 = [{ x: new Date(1970, 1, 1), y: 8000 }, { x: new Date(1975, 1, 1), y: 7600 }, { x: new Date(1980, 1, 1), y: 6400 },\r\n    { x: new Date(1985, 1, 1), y: 3700 }, { x: new Date(1990, 1, 1), y: 7200 }, { x: new Date(1995, 1, 1), y: 2300 },\r\n    { x: new Date(2000, 1, 1), y: 4000 }, { x: new Date(2005, 1, 1), y: 4800 }];\r\nconst SAMPLE_CSS = `\r\n    .control-container {\r\n\t\tpadding: 0px !important;\r\n    }`;\r\nexport class Striplinerecurrence extends SampleBase {\r\n    xIndex() {\r\n        this.chartInstance.primaryXAxis.stripLines[0].visible = this.xcheckElement.checked;\r\n    }\r\n    ;\r\n    yIndex() {\r\n        this.chartInstance.primaryYAxis.stripLines[0].visible = this.ycheckElement.checked;\r\n    }\r\n    ;\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section row'>\r\n                    <div className='col-md-8'>\r\n                        <ChartComponent id='charts' ref={chart => this.chartInstance = chart} primaryXAxis={{\r\n            valueType: 'DateTime', interval: 5, intervalType: 'Years', majorGridLines: { width: 0 },\r\n            edgeLabelPlacement: 'Shift',\r\n            minimum: new Date(1965, 1, 1), maximum: new Date(2010, 1, 1),\r\n            stripLines: [{\r\n                    startFromAxis: true, size: 5, sizeType: 'Years', isRepeat: true, repeatEvery: 10, visible: true,\r\n                    color: 'rgba(167,169,171, 0.1)'\r\n                }]\r\n        }} chartArea={{ border: { width: 0 } }} load={this.load.bind(this)} primaryYAxis={{\r\n            minimum: 0, maximum: 18000, interval: 2000, majorGridLines: { color: 'rgba(167,169,171, 0.3)' },\r\n            majorTickLines: { width: 0 }, lineStyle: { width: 0 }, labelStyle: { color: 'transparent' },\r\n            stripLines: [\r\n                {\r\n                    startFromAxis: true, size: 2000, isRepeat: true, repeatEvery: 4000, visible: true,\r\n                    color: 'rgba(167,169,171, 0.1)'\r\n                }\r\n            ]\r\n        }} tooltip={{\r\n            enable: true, format: ' Year: ${point.x}<br> Tons Per Day: ${point.y}'\r\n        }} loaded={this.onChartLoad.bind(this)} title='World Pollution Report'>\r\n                            <Inject services={[ColumnSeries, DateTime, Category, Legend, Tooltip, StripLine]}/>\r\n                            <SeriesCollectionDirective>\r\n                                <SeriesDirective dataSource={data1} xName='x' yName='y' width={2} type='Column' name='AllSources'>\r\n                                </SeriesDirective>\r\n                                <SeriesDirective dataSource={data2} xName='x' yName='y' width={2} type='Column' name='Autos && Light Trucks'>\r\n                                </SeriesDirective>\r\n                            </SeriesCollectionDirective>\r\n                        </ChartComponent>\r\n                    </div>\r\n                    <div className='col-md-4 property-section'>\r\n                        <PropertyPane title='Properties'>\r\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td style={{ width: '60%' }}>\r\n                                        <div>X Axis:</div>\r\n                                    </td>\r\n                                    <td style={{ width: '40%' }}>\r\n                                        <div>\r\n                                            <input type=\"checkbox\" id=\"xIndex\" defaultChecked={true} onChange={this.xIndex.bind(this)} style={{ marginLeft: '-5px' }} ref={d => this.xcheckElement = d}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td style={{ width: '60%' }}>\r\n                                        <div>Y Axis:</div>\r\n                                    </td>\r\n                                    <td style={{ width: '40%' }}>\r\n                                        <div>\r\n                                            <input type=\"checkbox\" id=\"yIndex\" defaultChecked={true} onChange={this.yIndex.bind(this)} style={{ marginLeft: '-5px' }} ref={d => this.ycheckElement = d}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n    onChartLoad(args) {\r\n        document.getElementById('charts').setAttribute('title', '');\r\n    }\r\n    ;\r\n}\r\n\nrender(<Striplinerecurrence />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}