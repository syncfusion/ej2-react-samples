{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for 100 percent Stacking Column series\r\n */\r\nimport * as React from \"react\";\r\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, Legend, Category, StackingColumnSeries, Tooltip, DataLabel } from '@syncfusion/ej2-react-charts';\r\nimport { SampleBase } from './sample-base';\r\nimport { Browser } from '@syncfusion/ej2-base';\r\nexport let data = [\r\n    { x: '2006', y: 900, y1: 190, y2: 250, y3: 150 },\r\n    { x: '2007', y: 544, y1: 226, y2: 145, y3: 120 },\r\n    { x: '2008', y: 880, y1: 194, y2: 190, y3: 115 },\r\n    { x: '2009', y: 675, y1: 250, y2: 220, y3: 125 }\r\n];\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }`;\r\nexport class StackedColumn100 extends SampleBase {\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section'>\r\n                    <ChartComponent id='charts' style={{ textAlign: \"center\" }} primaryXAxis={{\r\n            valueType: 'Category',\r\n            labelIntersectAction: 'Rotate45',\r\n            majorGridLines: { width: 0 },\r\n            minorGridLines: { width: 0 },\r\n            majorTickLines: { width: 0 },\r\n            minorTickLines: { width: 0 }\r\n        }} primaryYAxis={{\r\n            title: 'GDP (%) per Annum',\r\n            rangePadding: 'None',\r\n            interval: 20,\r\n            majorTickLines: { width: 0 },\r\n            majorGridLines: { width: 1 },\r\n            minorGridLines: { width: 1 },\r\n            minorTickLines: { width: 0 },\r\n            lineStyle: {\r\n                width: 0\r\n            }\r\n        }} width={Browser.isDevice ? '100%' : '60%'} chartArea={{ border: { width: 0 } }} load={this.load.bind(this)} title='Gross Domestic Product Growth' loaded={this.onChartLoad.bind(this)} tooltip={{ enable: true, format: '${point.x} : <b>${point.y} (${point.percentage}%)</b>' }}>\r\n                        <Inject services={[StackingColumnSeries, Legend, Tooltip, DataLabel, Category]}/>\r\n                        <SeriesCollectionDirective>\r\n                            <SeriesDirective dataSource={data} xName='x' yName='y' name='UK' type='StackingColumn100'>\r\n                            </SeriesDirective>\r\n                            <SeriesDirective dataSource={data} xName='x' yName='y1' name='Germany' type='StackingColumn100'>\r\n                            </SeriesDirective>\r\n                            <SeriesDirective dataSource={data} xName='x' yName='y2' name='France' type='StackingColumn100'>\r\n                            </SeriesDirective>\r\n                            <SeriesDirective dataSource={data} xName='x' yName='y3' name='Italy' type='StackingColumn100'>\r\n                            </SeriesDirective>\r\n                        </SeriesCollectionDirective>\r\n                    </ChartComponent>\r\n                    <div style={{ float: 'right', marginRight: '10px' }}>Source: &nbsp;\r\n                         <a href=\"https://www.cyberagent.co.jp/en/newsinfo/press/detail/id=12026\" target=\"_blank\">www.cyberagent.co.jp</a>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n    onChartLoad(args) {\r\n        let chart = document.getElementById('charts');\r\n        chart.setAttribute('title', '');\r\n    }\r\n    ;\r\n}\r\n\nrender(<StackedColumn100 />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}