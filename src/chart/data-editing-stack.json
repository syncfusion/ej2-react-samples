{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for Line Series\r\n */\r\nimport * as React from \"react\";\r\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, ColumnSeries, LineSeries, Category, DataEditing, Legend, Tooltip } from '@syncfusion/ej2-react-charts';\r\nimport { Browser } from '@syncfusion/ej2-base';\r\nimport { SampleBase } from './sample-base';\r\nexport let data1 = [\r\n    { x: '2005', y: 21 }, { x: '2006', y: 60 },\r\n    { x: '2007', y: 45 }, { x: '2008', y: 50 },\r\n    { x: '2009', y: 74 }, { x: '2010', y: 65 },\r\n    { x: '2011', y: 85 }\r\n];\r\nexport let data2 = [\r\n    { x: '2005', y: 21 }, { x: '2006', y: 22 },\r\n    { x: '2007', y: 36 }, { x: '2008', y: 34 },\r\n    { x: '2009', y: 54 }, { x: '2010', y: 55 },\r\n    { x: '2011', y: 60 }\r\n];\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n        padding: 0px !important;\r\n    }\r\n        .charts {\r\n            align :center\r\n        }`;\r\nexport class DataEdit extends SampleBase {\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section'>\r\n                    <ChartComponent id='charts' style={{ textAlign: \"center\" }} primaryXAxis={{\r\n            valueType: 'Category',\r\n            minimum: -0.5,\r\n            maximum: 6.5,\r\n            labelPlacement: 'OnTicks',\r\n            majorGridLines: { width: 0 },\r\n        }} load={this.load.bind(this)} primaryYAxis={{\r\n            rangePadding: 'None',\r\n            minimum: 0,\r\n            maximum: 100,\r\n            interval: 20,\r\n            title: 'Sales',\r\n            labelFormat: '{value}%',\r\n            lineStyle: { width: 0 },\r\n            majorTickLines: { width: 0 },\r\n            minorTickLines: { width: 0 }\r\n        }} chartArea={{ border: { width: 0 } }} tooltip={{ enable: true }} width={Browser.isDevice ? '100%' : '60%'} title='Sales prediction of products' loaded={this.onChartLoad.bind(this)}>\r\n                        <Inject services={[LineSeries, ColumnSeries, Category, DataEditing, Legend, Tooltip]}/>\r\n                        <SeriesCollectionDirective>\r\n                            <SeriesDirective dataSource={data1} dragSettings={{ enable: true }} xName='x' yName='y' name='Product A' width={2} marker={{ visible: true, width: 10, height: 10 }} type='Column' fill='#00BDAE'>\r\n                            </SeriesDirective>\r\n                            <SeriesDirective dataSource={data2} dragSettings={{ enable: true }} xName='x' yName='y' name='Product B' width={2} marker={{ visible: true, width: 10, height: 10 }} type='Line' fill='#357CD2'>\r\n                            </SeriesDirective>\r\n                        </SeriesCollectionDirective>\r\n                    </ChartComponent>\r\n                </div>\r\n            </div>);\r\n    }\r\n    onChartLoad(args) {\r\n        let chart = document.getElementById('charts');\r\n        chart.setAttribute('title', '');\r\n    }\r\n    ;\r\n    load(args) {\r\n        let selectedTheme = location.hash.split('/')[1];\r\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\r\n        args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\r\n    }\r\n    ;\r\n}\r\n\nrender(<DataEdit />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}