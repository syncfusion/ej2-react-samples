{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for Indexed Category Axis\r\n */\r\nimport * as React from \"react\";\r\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, Legend, Category, LineSeries, ColumnSeries, Tooltip, Crosshair } from '@syncfusion/ej2-react-charts';\r\nimport { PropertyPane } from './property-pane';\r\nimport { SampleBase } from './sample-base';\r\nexport let data1 = [\r\n    { x: 'Myanmar', y: 7.3 },\r\n    { x: 'India', y: 7.9 },\r\n    { x: 'Bangladesh', y: 6.8 },\r\n    { x: 'Cambodia', y: 7.0 },\r\n    { x: 'China', y: 6.9 },\r\n];\r\nexport let data2 = [\r\n    { x: 'Poland', y: 2.7 },\r\n    { x: 'Australia', y: 2.5 },\r\n    { x: 'Singapore', y: 2.0 },\r\n    { x: 'Canada', y: 1.4 },\r\n    { x: 'Germany', y: 1.8 }\r\n];\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n\t}`;\r\nexport class IndexedAxis extends SampleBase {\r\n    onChange() {\r\n        this.chartInstance.primaryXAxis.isIndexed = this.dropElement.checked;\r\n        if (this.chartInstance.primaryXAxis.isIndexed) {\r\n            this.chartInstance.series[0].type = 'Column';\r\n            this.chartInstance.series[1].type = 'Column';\r\n            this.chartInstance.series[0].marker.visible = false;\r\n            this.chartInstance.series[1].marker.visible = false;\r\n            this.chartInstance.primaryXAxis.labelRotation = 0;\r\n            this.chartInstance.crosshair.line.width = 1;\r\n        }\r\n        else {\r\n            this.chartInstance.series[0].type = 'Line';\r\n            this.chartInstance.series[1].type = 'Line';\r\n            this.chartInstance.series[0].marker.visible = true;\r\n            this.chartInstance.series[1].marker.visible = true;\r\n            this.chartInstance.primaryXAxis.labelRotation = 90;\r\n            this.chartInstance.crosshair.line.width = 0;\r\n        }\r\n        this.chartInstance.refresh();\r\n    }\r\n    ;\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section row'>\r\n                    <div className='col-md-9'>\r\n                        <ChartComponent id='charts' ref={chart => this.chartInstance = chart} primaryXAxis={{\r\n            valueType: 'Category',\r\n            interval: 1,\r\n            edgeLabelPlacement: 'Shift',\r\n            crosshairTooltip: { enable: true },\r\n            isIndexed: true\r\n        }} primaryYAxis={{\r\n            title: 'GDP Growth Rate',\r\n            labelFormat: '{value}%'\r\n        }} chartArea={{ border: { width: 0 } }} load={this.load.bind(this)} title=\"Real GDP Growth\" loaded={this.onChartLoad.bind(this)} tooltip={{ enable: true, shared: true }} crosshair={{ enable: true, lineType: 'Vertical' }}>\r\n                            <Inject services={[Legend, Category, LineSeries, ColumnSeries, Tooltip, Crosshair]}/>\r\n                            <SeriesCollectionDirective>\r\n                                <SeriesDirective dataSource={data1} xName='x' yName='y' name='2015' width={2} type='Column' marker={{ visible: false, height: 10, width: 10 }}>\r\n                                </SeriesDirective>\r\n                                <SeriesDirective dataSource={data2} xName='x' yName='y' name='2016' width={2} type='Column' marker={{ visible: false, height: 10, width: 10 }}>\r\n                                </SeriesDirective>\r\n                            </SeriesCollectionDirective>\r\n                        </ChartComponent>\r\n                    </div>\r\n                    <div className='col-md-3 property-section'>\r\n                        <PropertyPane title='Properties'>\r\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td style={{ width: '60%' }}>\r\n                                        <div>Indexed:</div>\r\n                                    </td>\r\n                                    <td style={{ width: '40%' }}>\r\n                                        <div>\r\n                                            <input type=\"checkbox\" id=\"isIndexed\" defaultChecked={true} onChange={this.onChange.bind(this)} style={{ marginLeft: '-5px' }} ref={d => this.dropElement = d}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n    onChartLoad(args) {\r\n        document.getElementById('charts').setAttribute('title', '');\r\n    }\r\n    ;\r\n}\r\n\nrender(<IndexedAxis />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}