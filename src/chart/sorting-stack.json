{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for smart axis labels\r\n */\r\nimport * as React from \"react\";\r\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Category, StackingColumnSeries, Inject, sort } from '@syncfusion/ej2-react-charts';\r\nimport { PropertyPane } from './property-pane';\r\nimport { SampleBase } from './sample-base';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nexport let data1 = [{ x: 'Asia', car: 120, trucks: 90, bike: 180, cycle: 90 },\r\n    { x: 'Canada', car: 100, trucks: 80, bike: 90, cycle: 80 },\r\n    { x: 'Europe', car: 80, trucks: 90, bike: 60, cycle: 50 },\r\n    { x: 'Africa', car: 40, trucks: 20, bike: 30, cycle: 30 },\r\n    { x: 'Mexico', car: 40, trucks: 50, bike: 80, cycle: 50 },\r\n    { x: 'US', car: 140, trucks: 90, bike: 75, cycle: 70 }];\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n\t}`;\r\nexport class Sorting extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.droplist = [\r\n            { value: 'None' },\r\n            { value: 'Sort by X' },\r\n            { value: 'Sort by Y' },\r\n        ];\r\n    }\r\n    change() {\r\n        this.sortDataSource(this.dropElement.value + '');\r\n    }\r\n    ;\r\n    isDescending() {\r\n        this.sortDataSource(this.dropElement.value + '');\r\n    }\r\n    ;\r\n    sortDataSource(value) {\r\n        let element = document.getElementById('isDescending');\r\n        let isDecending = element.checked;\r\n        element.disabled = false;\r\n        let sortData;\r\n        if (value === 'Sort by X') {\r\n            sortData = sort(data1, ['x'], isDecending);\r\n        }\r\n        else if (value === 'Sort by Y') {\r\n            sortData = sort(data1, ['car', 'trucks', 'bike', 'cycle'], isDecending);\r\n        }\r\n        else {\r\n            element.disabled = true;\r\n            sortData = data1;\r\n        }\r\n        this.chartInstance.series[0].animation.enable = false;\r\n        this.chartInstance.series[1].animation.enable = false;\r\n        this.chartInstance.series[2].animation.enable = false;\r\n        this.chartInstance.series[3].animation.enable = false;\r\n        this.chartInstance.series[0].dataSource = sortData;\r\n        this.chartInstance.series[1].dataSource = sortData;\r\n        this.chartInstance.series[2].dataSource = sortData;\r\n        this.chartInstance.series[3].dataSource = sortData;\r\n        this.chartInstance.refresh();\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section row'>\r\n                    <div className='col-md-8'>\r\n                        <ChartComponent id='charts' ref={chart => this.chartInstance = chart} style={{ textAlign: \"center\" }} primaryXAxis={{\r\n            majorGridLines: { width: 0 }, minorGridLines: { width: 0 },\r\n            majorTickLines: { width: 0 }, minorTickLines: { width: 0 },\r\n            interval: 1, lineStyle: { width: 0 },\r\n            labelIntersectAction: 'Rotate45', valueType: 'Category'\r\n        }} chartArea={{ border: { width: 0 } }} primaryYAxis={{\r\n            title: 'Sales', lineStyle: { width: 0 },\r\n            majorTickLines: { width: 0 }, majorGridLines: { width: 1 },\r\n            minorGridLines: { width: 1 }, minorTickLines: { width: 0 },\r\n            labelFormat: '{value}K',\r\n        }} load={this.load.bind(this)} title=\"Vehicle Sales by Region\" loaded={this.onChartLoad.bind(this)} legendSettings={{ visible: false }}>\r\n                            <Inject services={[Category, StackingColumnSeries]}/>\r\n                            <SeriesCollectionDirective>\r\n                                <SeriesDirective dataSource={data1} xName='x' yName='car' name=\"Car\" type='StackingColumn' width={2}>\r\n                                </SeriesDirective>\r\n                                <SeriesDirective dataSource={data1} xName='x' yName='trucks' name=\"Trucks\" type='StackingColumn' width={2}>\r\n                                </SeriesDirective>\r\n                                <SeriesDirective dataSource={data1} xName='x' yName='bike' name=\"Bike\" type='StackingColumn' width={2}>\r\n                                </SeriesDirective>\r\n                                <SeriesDirective dataSource={data1} xName='x' yName='cycle' name=\"Cycle\" type='StackingColumn' width={2}>\r\n                                </SeriesDirective>\r\n                            </SeriesCollectionDirective>\r\n                        </ChartComponent>\r\n                    </div>\r\n                    <div className='col-md-4 property-section'>\r\n                        <PropertyPane title='Properties'>\r\n                            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td style={{ width: '60%' }}>\r\n                                        <div>Descending: </div>\r\n                                    </td>\r\n                                    <td style={{ width: '40%' }}>\r\n                                        <div>\r\n                                            <input type=\"checkbox\" id=\"isDescending\" disabled onChange={this.isDescending.bind(this)} style={{ marginLeft: '-5px' }} ref={d => this.checkElement = d}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr style={{ height: '50px' }}>\r\n                                    <td>\r\n                                        <div>Sort By: </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div>\r\n                                            <DropDownListComponent width=\"120px\" id=\"selmode\" change={this.change.bind(this)} ref={d => this.dropElement = d} dataSource={this.droplist} fields={{ text: 'value', value: 'value' }} value=\"None\"/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n    onChartLoad(args) {\r\n        let chart = document.getElementById('charts');\r\n        chart.setAttribute('title', '');\r\n    }\r\n    ;\r\n}\r\n\nrender(<Sorting />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}