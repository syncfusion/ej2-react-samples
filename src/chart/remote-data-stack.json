{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for Remote data binding\r\n */\r\nimport * as React from \"react\";\r\nimport { DataManager, Query } from '@syncfusion/ej2-data';\r\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, Legend, Category, ColumnSeries, Tooltip, DataLabel } from '@syncfusion/ej2-react-charts';\r\nimport { bootstrapColors, fabricColors, materialColors, highContrastColors } from './theme-color';\r\nimport { SampleBase } from './sample-base';\r\nimport { Browser } from '@syncfusion/ej2-base';\r\nexport let dataManager = new DataManager({\r\n    url: 'https://ej2services.syncfusion.com/production/web-services/api/Orders'\r\n});\r\nexport let query = new Query().take(5).where('Estimate', 'lessThan', 3, false);\r\nexport let labelRender = (args) => {\r\n    if (args.axis.orientation === 'Horizontal') {\r\n        args.text = args.text.split(' ')[0];\r\n    }\r\n};\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }\r\n    .waitingpopup {\r\n        position: absolute;\r\n        z-index: 100;\r\n        top: 0;\r\n        left: 0;\r\n        background-color: #fff;\r\n        border-radius: 50%;\r\n        box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\r\n        width: 50px;\r\n        height: 50px;\r\n    }\r\n    \r\n    .image {\r\n        position: absolute;\r\n        background-repeat: no-repeat;\r\n        background-image: url('////npmci.syncfusion.com/development/react/demos/src/chart/images/Medium-36px-spin.gif');\r\n        background-position: center;\r\n        width: 50px;\r\n        height: 50px;\r\n        padding: 6px;\r\n    }\r\n    #control-container {\r\n        padding: 0px !important;\r\n    }`;\r\nexport class RemoteData extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.loaded = 1;\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section'>\r\n                    <div id=\"waitingpopup\" className=\"waitingpopup\" style={{ display: \"none\" }}>\r\n                        <span id=\"gif\" className=\"image\"></span>\r\n                    </div>\r\n                    <ChartComponent id='charts' style={{ textAlign: \"center\" }} load={this.load.bind(this)} primaryXAxis={{\r\n            rangePadding: 'Additional',\r\n            valueType: 'Category',\r\n            title: 'Assignee',\r\n            majorGridLines: { width: 0 },\r\n        }} primaryYAxis={{\r\n            majorGridLines: { width: 0 },\r\n            majorTickLines: { width: 0 },\r\n            lineStyle: { width: 0 },\r\n            labelStyle: {\r\n                color: 'transparent'\r\n            }\r\n        }} width={Browser.isDevice ? '100%' : '60%'} chartArea={{ border: { width: 0 } }} axisLabelRender={labelRender} pointRender={this.pointRender.bind(this)} title=\"Sprint Task Analysis\" loaded={this.onChartLoad.bind(this)} legendSettings={{ visible: false }} tooltip={{ enable: true }}>\r\n                        <Inject services={[ColumnSeries, Legend, Category, Tooltip, DataLabel]}/>\r\n                        <SeriesCollectionDirective>\r\n                            <SeriesDirective dataSource={dataManager} xName='CustomerID' type='Column' yName='Freight' name='Story Point' query={query} animation={{ enable: false }} marker={{ dataLabel: { visible: true, position: 'Top', font: { fontWeight: '600', color: '#ffffff' } } }}>\r\n                            </SeriesDirective>\r\n                        </SeriesCollectionDirective>\r\n                    </ChartComponent>\r\n                </div>\r\n            </div>);\r\n    }\r\n    pointRender(args) {\r\n        let selectedTheme = location.hash.split('/')[1];\r\n        selectedTheme = selectedTheme ? selectedTheme : 'material';\r\n        if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\r\n            args.fill = fabricColors[args.point.index % 10];\r\n        }\r\n        else if (selectedTheme === 'material') {\r\n            args.fill = materialColors[args.point.index % 10];\r\n        }\r\n        else if (selectedTheme === 'highcontrast') {\r\n            args.fill = highContrastColors[args.point.index % 10];\r\n        }\r\n        else {\r\n            args.fill = bootstrapColors[args.point.index % 10];\r\n        }\r\n    }\r\n    onChartLoad(args) {\r\n        let div = document.getElementById('waitingpopup');\r\n        div.style.display = 'none';\r\n        if (this.loaded) {\r\n            args.chart.refresh();\r\n        }\r\n        this.loaded = 0;\r\n        let chart = document.getElementById('charts');\r\n        chart.setAttribute('title', '');\r\n    }\r\n    ;\r\n}\r\n\nrender(<RemoteData />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}