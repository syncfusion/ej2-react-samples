{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Sample for Lazy Loading\r\n */\r\nimport * as React from \"react\";\r\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, ScrollBar, Zoom, LineSeries, Tooltip, DateTime, Crosshair } from '@syncfusion/ej2-react-charts';\r\nimport { Internationalization } from '@syncfusion/ej2-base';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { DatePickerComponent } from '@syncfusion/ej2-react-calendars';\r\nimport { NumericTextBoxComponent } from '@syncfusion/ej2-react-inputs';\r\nimport { SampleBase } from './sample-base';\r\nimport { PropertyPane } from './property-pane';\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n        padding: 0px !important;\r\n    }\r\n        `;\r\nexport class LazyLoading extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.intl = new Internationalization();\r\n        this.droplist = [\r\n            { value: 'Range' },\r\n            { value: 'Points Length' }\r\n        ];\r\n    }\r\n    minChange(args) {\r\n        this.chart.primaryXAxis.scrollbarSettings.range.minimum = args.value;\r\n        this.chart.refresh();\r\n    }\r\n    ;\r\n    maxChange(args) {\r\n        this.chart.primaryXAxis.scrollbarSettings.range.maximum = args.value;\r\n        this.chart.refresh();\r\n    }\r\n    ;\r\n    pointChange(args) {\r\n        this.chart.primaryXAxis.scrollbarSettings.pointsLength = args.value;\r\n        this.chart.refresh();\r\n    }\r\n    ;\r\n    modeChange(arg) {\r\n        let min;\r\n        let max;\r\n        if (arg.value === 'Range') {\r\n            this.chart.primaryXAxis.valueType = 'DateTime';\r\n            min = this.chart.primaryXAxis.scrollbarSettings.range.minimum = new Date(2009, 0, 1);\r\n            max = this.chart.primaryXAxis.scrollbarSettings.range.maximum = new Date(2014, 0, 1);\r\n            this.chart.series[0].dataSource = this.GetDateTimeData(new Date(2009, 0, 1), new Date(2009, 8, 1));\r\n            this.chart.refresh();\r\n            this.minDate.enabled = true;\r\n            this.maxDate.enabled = true;\r\n            this.pointslength.enabled = false;\r\n        }\r\n        else {\r\n            this.chart.primaryXAxis.valueType = 'Double';\r\n            this.chart.primaryXAxis.scrollbarSettings.range.minimum = null;\r\n            this.chart.primaryXAxis.scrollbarSettings.range.maximum = null;\r\n            this.chart.primaryXAxis.scrollbarSettings.pointsLength = 1000;\r\n            this.chart.series[0].dataSource = this.GetNumericData(1, 200);\r\n            this.chart.refresh();\r\n            this.minDate.enabled = false;\r\n            this.maxDate.enabled = false;\r\n            this.pointslength.enabled = true;\r\n        }\r\n    }\r\n    ;\r\n    GetDateTimeData(start, end) {\r\n        let series1 = [];\r\n        let date;\r\n        let value = 30;\r\n        let option = {\r\n            skeleton: 'full',\r\n            type: 'dateTime'\r\n        };\r\n        let dateParser = this.intl.getDateParser(option);\r\n        let dateFormatter = this.intl.getDateFormat(option);\r\n        for (let i = 0; start <= end; i++) {\r\n            date = Date.parse(dateParser(dateFormatter(start)));\r\n            if (Math.random() > .5) {\r\n                value += (Math.random() * 10 - 5);\r\n            }\r\n            else {\r\n                value -= (Math.random() * 10 - 5);\r\n            }\r\n            if (value < 0) {\r\n                value = this.getRandomInt(20, 40);\r\n            }\r\n            let point1 = { x: new Date(date), y: Math.round(value) };\r\n            new Date(start.setDate(start.getDate() + 1));\r\n            series1.push(point1);\r\n        }\r\n        return series1;\r\n    }\r\n    GetNumericData(start, end) {\r\n        let series1 = [];\r\n        let value = 30;\r\n        for (let i = start; i <= end; i++) {\r\n            if (Math.random() > .5) {\r\n                value += (Math.random() * 10 - 5);\r\n            }\r\n            else {\r\n                value -= (Math.random() * 10 - 5);\r\n            }\r\n            if (value < 0) {\r\n                value = this.getRandomInt(20, 40);\r\n            }\r\n            let point = { x: i, y: Math.round(value) };\r\n            series1.push(point);\r\n        }\r\n        return series1;\r\n    }\r\n    getRandomInt(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                    <div className='control-section'>\r\n                    <div className='col-md-8'>\r\n                        <ChartComponent id='charts' ref={chart => this.chart = chart} primaryXAxis={{\r\n            title: 'Day',\r\n            valueType: 'DateTime',\r\n            edgeLabelPlacement: 'Shift',\r\n            skeleton: 'yMMM',\r\n            skeletonType: 'Date',\r\n            scrollbarSettings: {\r\n                range: {\r\n                    minimum: new Date(2009, 0, 1),\r\n                    maximum: new Date(2014, 0, 1)\r\n                },\r\n                enable: true,\r\n                pointsLength: 1000\r\n            }\r\n        }} primaryYAxis={{\r\n            title: 'Server Load',\r\n            labelFormat: '{value}MB'\r\n        }} chartArea={{ border: { width: 0 } }} tooltip={{ enable: true, shared: true, header: '<b>${point.x}</b>', format: 'Server load : <b>${point.y}</b>' }} legendSettings={{ visible: true }} scrollEnd={this.scrollEnd.bind(this)} load={this.load.bind(this)} title='Network Load' height='450' width='100%'>\r\n                            <Inject services={[LineSeries, DateTime, Tooltip, ScrollBar, Zoom, Crosshair]}/>\r\n                            <SeriesCollectionDirective>\r\n                                <SeriesDirective dataSource={this.GetDateTimeData(new Date(2009, 0, 1), new Date(2009, 8, 1))} xName='x' yName='y' type='Line' animation={{ enable: false }}>\r\n                                </SeriesDirective>\r\n                            </SeriesCollectionDirective>\r\n                        </ChartComponent>\r\n                    </div>\r\n                    <div className='col-md-4 property-section'>\r\n                    <PropertyPane title='Properties'>\r\n                        <table id=\"property\" title=\"Properties\" style={{ width: '100%' }}>\r\n                            <tr style={{ height: '50px' }}>\r\n                                <td style={{ width: '40%' }}>\r\n                                    <div>Lazy Load </div>\r\n                                </td>\r\n                                <td style={{ width: '40%' }}>\r\n                                    <div>\r\n                                        <DropDownListComponent index={0} width={120} id=\"lazymode\" ref={drop => this.lazymode = drop} style={{ \"width\": \"auto\" }} change={this.modeChange.bind(this)} dataSource={this.droplist} fields={{ text: 'value', value: 'value' }} value=\"Range\"/>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                            <tr style={{ height: '50px' }}>\r\n                                <td>\r\n                                    <div>Min </div>\r\n                                </td>\r\n                                <td style={{ width: '40%' }}>\r\n                                    <div>\r\n                                        <DatePickerComponent width={120} ref={min => this.minDate = min} id=\"datepickermin\" style={{ \"width\": \"auto\" }} change={this.minChange.bind(this)} value={new Date(2009, 0, 1)}/>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                            <tr style={{ height: '50px' }}>\r\n                                <td>\r\n                                    <div>Max </div>\r\n                                </td>\r\n                                <td style={{ width: '40%' }}>\r\n                                    <div>\r\n                                        <DatePickerComponent width={120} ref={max => this.maxDate = max} id=\"datepickermax\" style={{ \"width\": \"auto\" }} change={this.maxChange.bind(this)} value={new Date(2014, 0, 1)}/>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                            <tr style={{ width: '40%' }}> \r\n                                <td>\r\n                                    <div>Point Length </div>\r\n                                </td>\r\n                                <td style={{ width: '40%' }}>\r\n                                    <div>\r\n                                        <NumericTextBoxComponent min={1000} max={10000} value={1000} step={100} enabled={false} format={'n'} width={120} ref={point => this.pointslength = point} id=\"pointslength\" style={{ \"width\": \"auto\" }} change={this.pointChange.bind(this)}/>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n    scrollEnd(args) {\r\n        if (this.lazymode.value === 'Range') {\r\n            this.chart.series[0].dataSource = this.GetDateTimeData(args.currentRange.minimum, args.currentRange.maximum);\r\n        }\r\n        else {\r\n            this.chart.series[0].dataSource = this.GetNumericData(args.currentRange.minimum, args.currentRange.maximum);\r\n        }\r\n        this.chart.dataBind();\r\n    }\r\n    ;\r\n}\r\n\nrender(<LazyLoading />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}