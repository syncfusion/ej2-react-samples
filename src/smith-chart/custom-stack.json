{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Customization sample for smith chart\r\n */\r\nimport * as React from \"react\";\r\nimport { SliderComponent } from \"@syncfusion/ej2-react-inputs\";\r\nimport { CheckBoxComponent } from \"@syncfusion/ej2-react-buttons\";\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { SmithchartComponent, SmithchartSeriesCollectionDirective, SmithchartSeriesDirective, TooltipRender, Inject, SmithchartLegend } from '@syncfusion/ej2-react-charts';\r\nimport { PropertyPane } from './property-pane';\r\nimport { SampleBase } from './sample-base';\r\nexport class Customization extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.droplist = [\r\n            { text: 'Top', value: 'Top' },\r\n            { text: 'Bottom', value: 'Bottom' },\r\n            { text: 'Left', value: 'Left' },\r\n            { text: 'Right', value: 'Right' },\r\n        ];\r\n    }\r\n    radiusChange() {\r\n        this.smithchartInstance.radius = parseInt(this.radiusElement.value.toString(), 10) / 10;\r\n        document.getElementById('radius1').innerHTML = 'Radius <span>&nbsp;&nbsp;&nbsp;' + (parseInt(this.radiusElement.value.toString(), 10) / 10);\r\n        this.smithchartInstance.refresh();\r\n    }\r\n    markerChange(args) {\r\n        if (args.checked) {\r\n            this.smithchartInstance.series[0].marker.visible = true;\r\n            this.smithchartInstance.series[1].marker.visible = true;\r\n        }\r\n        else {\r\n            this.smithchartInstance.series[0].marker.visible = false;\r\n            this.smithchartInstance.series[1].marker.visible = false;\r\n        }\r\n        this.smithchartInstance.refresh();\r\n    }\r\n    labelChange(args) {\r\n        if (args.checked) {\r\n            this.smithchartInstance.series[0].marker.dataLabel.visible = true;\r\n            this.smithchartInstance.series[1].marker.dataLabel.visible = true;\r\n        }\r\n        else {\r\n            this.smithchartInstance.series[0].marker.dataLabel.visible = false;\r\n            this.smithchartInstance.series[1].marker.dataLabel.visible = false;\r\n        }\r\n        this.smithchartInstance.refresh();\r\n    }\r\n    animateChange(args) {\r\n        if (args.checked) {\r\n            this.smithchartInstance.series[0].enableAnimation = true;\r\n            this.smithchartInstance.series[1].enableAnimation = true;\r\n        }\r\n        else {\r\n            this.smithchartInstance.series[0].enableAnimation = false;\r\n            this.smithchartInstance.series[1].enableAnimation = false;\r\n        }\r\n        this.smithchartInstance.refresh();\r\n    }\r\n    tooltipChange(args) {\r\n        if (args.checked) {\r\n            this.smithchartInstance.series[0].tooltip.visible = true;\r\n            this.smithchartInstance.series[1].tooltip.visible = true;\r\n        }\r\n        else {\r\n            this.smithchartInstance.series[0].tooltip.visible = false;\r\n            this.smithchartInstance.series[1].tooltip.visible = false;\r\n        }\r\n        this.smithchartInstance.refresh();\r\n    }\r\n    legendChange(args) {\r\n        if (args.checked) {\r\n            this.smithchartInstance.legendSettings.visible = true;\r\n        }\r\n        else {\r\n            this.smithchartInstance.legendSettings.visible = false;\r\n        }\r\n        this.smithchartInstance.refresh();\r\n    }\r\n    positionChange() {\r\n        this.smithchartInstance.legendSettings.position = this.positionElement.value.toString();\r\n        this.smithchartInstance.refresh();\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='col-md-8 control-section'>\r\n                    <SmithchartComponent load={this.load.bind(this)} id='smith-chart' ref={gauge => this.smithchartInstance = gauge} horizontalAxis={{ minorGridLines: { visible: true } }} radialAxis={{ minorGridLines: { visible: true } }} radius={1} legendSettings={{\r\n            visible: true,\r\n            shape: 'Circle',\r\n            position: 'Top'\r\n        }}>\r\n                        <Inject services={[TooltipRender, SmithchartLegend]}/>\r\n                        <SmithchartSeriesCollectionDirective>\r\n                            <SmithchartSeriesDirective points={[\r\n            { resistance: 10, reactance: 25 }, { resistance: 8, reactance: 6 },\r\n            { resistance: 6, reactance: 4.5 }, { resistance: 4.5, reactance: 4 },\r\n            { resistance: 3.5, reactance: 3 }, { resistance: 2.5, reactance: 2 },\r\n            { resistance: 2, reactance: 1.5 }, { resistance: 1.5, reactance: 1.25 },\r\n            { resistance: 1, reactance: 0.9 }, { resistance: 0.5, reactance: 0.6 },\r\n            { resistance: 0.3, reactance: 0.4 }, { resistance: 0, reactance: 0.15 },\r\n        ]} name='Transmission1' enableAnimation={false} width={2} tooltip={{ visible: true }} enableSmartLabels={false} fill='#0F94C4' marker={{ shape: 'rectangle', visible: true, border: { width: 2 } }}>\r\n                            </SmithchartSeriesDirective>\r\n                            <SmithchartSeriesDirective points={[\r\n            { resistance: 20, reactance: -50 }, { resistance: 10, reactance: -10 },\r\n            { resistance: 9, reactance: -4.5 }, { resistance: 8, reactance: -3.5 },\r\n            { resistance: 7, reactance: -2.5 }, { resistance: 6, reactance: -1.5 },\r\n            { resistance: 5, reactance: -1 }, { resistance: 4.5, reactance: -0.8 },\r\n            { resistance: 3.5, reactance: -0.8 }, { resistance: 2.5, reactance: -0.4 },\r\n            { resistance: 2, reactance: -0.2 }, { resistance: 1.5, reactance: 0 },\r\n            { resistance: 1, reactance: 0.1 }, { resistance: 0.5, reactance: 0.2 },\r\n            { resistance: 0.3, reactance: 0.15 }, { resistance: 0, reactance: 0.05 },\r\n        ]} name='Transmission2' enableAnimation={false} width={2} tooltip={{ visible: true }} enableSmartLabels={false} fill='#EE0C88' marker={{ shape: 'rectangle', visible: true, border: { width: 2 } }}>\r\n                            </SmithchartSeriesDirective>\r\n                        </SmithchartSeriesCollectionDirective>\r\n                    </SmithchartComponent>\r\n                </div>\r\n                \r\n                <div className='col-md-4 property-section'>\r\n                    <PropertyPane title='Properties'>\r\n                        <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%', marginBottom: '20px' }}>\r\n                            <tr style={{ \"height\": \"35px\" }}>\r\n                                <td style={{ \"width\": \"70%\" }}>\r\n                                    <div id='radius1'>Radius <span>&nbsp;&nbsp;&nbsp;1</span> </div>\r\n                                </td>\r\n                                <td style={{ \"width\": \"50%\" }}>\r\n                                    <div className=\"content-wrapper\">\r\n                                        <style> {slidercss} </style>\r\n                                        <SliderComponent id=\"radius\" change={this.radiusChange.bind(this)} ref={(slider) => this.radiusElement = slider} name=\"radius\" step={1} value={10} type='MinRange' min={0} max={10}/>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                            <tr style={{ \"height\": \"35px\" }}>\r\n                                <td style={{ \"width\": \"70%\" }}>\r\n                                    <div>Marker</div>\r\n                                </td>\r\n                                <td style={{ \"width\": \"50%\" }}>\r\n                                    <div>\r\n                                        <CheckBoxComponent id='marker' checked={true} change={this.markerChange.bind(this)}> </CheckBoxComponent>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                            <tr style={{ \"height\": \"35px\" }}>\r\n                                <td style={{ \"width\": \"70%\" }}>\r\n                                    <div>Data Label</div>\r\n                                </td>\r\n                                <td style={{ \"width\": \"50%\" }}>\r\n                                    <div>\r\n                                        <CheckBoxComponent id='datalabel' change={this.labelChange.bind(this)}> </CheckBoxComponent>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                            <tr style={{ \"height\": \"35px\" }}>\r\n                                <td style={{ \"width\": \"70%\" }}>\r\n                                    <div>Animation</div>\r\n                                </td>\r\n                                <td style={{ \"width\": \"50%\" }}>\r\n                                    <div>\r\n                                        <CheckBoxComponent id='animate' change={this.animateChange.bind(this)}> </CheckBoxComponent>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                            <tr style={{ \"height\": \"35px\" }}>\r\n                                <td style={{ \"width\": \"70%\" }}>\r\n                                    <div>Tooltip</div>\r\n                                </td>\r\n                                <td style={{ \"width\": \"50%\" }}>\r\n                                    <div>\r\n                                        <CheckBoxComponent id='tooltip' checked={true} change={this.tooltipChange.bind(this)}> </CheckBoxComponent>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                            <tr style={{ \"height\": \"35px\" }}>\r\n                                <td style={{ \"width\": \"70%\" }}>\r\n                                    <div>Legend</div>\r\n                                </td>\r\n                                <td style={{ \"width\": \"50%\" }}>\r\n                                    <div>\r\n                                        <CheckBoxComponent id='legend' checked={true} change={this.legendChange.bind(this)}> </CheckBoxComponent>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                            <tr style={{ \"height\": \"35px\" }}>\r\n                                <td style={{ \"width\": \"70%\" }}>\r\n                                    <div>Legend Position</div>\r\n                                </td>\r\n                                <td style={{ \"width\": \"50%\" }}>\r\n                                    <div>\r\n                                        <DropDownListComponent id=\"mode\" width=\"100px\" index={0} change={this.positionChange.bind(this)} ref={d => this.positionElement = d} dataSource={this.droplist} fields={{ text: 'text', value: 'value' }}/>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        </table>\r\n                    </PropertyPane>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<Customization />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}