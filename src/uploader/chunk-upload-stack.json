{"index.css":".upload_wrapper, .rtl_wrapper,.validation_wrapper {\r\n    max-width: 400px;\r\n\tmargin: auto;\r\n}\r\n\r\n.upload_wrapper .e-upload, .rtl_wrapper .e-upload, .validation_wrapper .e-upload {\r\n    width: 100%;\r\n    position: relative;\r\n    margin-top: 15px;\r\n}\r\n\r\n.upload_wrapper .e-upload .e-upload-drag-hover, .rtl_wrapper .e-upload .e-upload-drag-hover,  .validation_wrapper .e-upload .e-upload-drag-hover {\r\n    margin: 0;\r\n}\r\n\r\n.property-panel-content {\r\n    min-height: 200px;\r\n}\r\n\r\n.property-section.preload-panel .property-panel-section {\r\n    position: relative;\r\n    padding-left: 30px;\r\n}\r\n.e-bigger .property-section.preload-panel {\r\n\tposition: relative;\r\n    padding-left: 35px;\r\n}\r\n.property-section .chunk-table {\r\n    width: 100%;\r\n    margin-top: 15px;\r\n}\r\n.chunk-td {\r\n    width: 50%;\r\n}\r\n\r\n.default-check {\r\n    margin-left: 50px;\r\n    padding-top: 25px;\r\n}\r\n\r\n.panel-style {\r\n    padding-top: 25px;\r\n}","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\n\r\nimport { SampleBase } from './sample-base';\r\nimport { PropertyPane } from './property-pane';\r\nimport { UploaderComponent } from '@syncfusion/ej2-react-inputs';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\r\nexport class ChunkUpload extends SampleBase {\r\n    constructor(props) {\r\n        super(props);\r\n        this.value = 0;\r\n        this.ddlDatas = [\r\n            { value: 500000, size: '500 KB' },\r\n            { value: 1000000, size: '1 MB' },\r\n            { value: 2000000, size: '2 MB' }\r\n        ];\r\n        this.fields = { text: 'size', value: 'value' };\r\n        this.isInteraction = false;\r\n        this.asyncSettings = {\r\n            saveUrl: 'https://aspnetmvc.syncfusion.com/services/api/uploadbox/Save',\r\n            removeUrl: 'https://aspnetmvc.syncfusion.com/services/api/uploadbox/Remove',\r\n            chunkSize: 500000\r\n        };\r\n        this.autoUpload = false;\r\n    }\r\n    onChange(args) {\r\n        this.uploadObj.asyncSettings.chunkSize = parseInt(args.itemData.value, 10);\r\n    }\r\n    onRemoveFile(args) {\r\n        args.postRawFile = false;\r\n    }\r\n    // to update flag variable value for automatic pause and resume\r\n    onPausing(args) {\r\n        if (args.event !== null && !navigator.onLine) {\r\n            this.isInteraction = true;\r\n        }\r\n        else {\r\n            this.isInteraction = false;\r\n        }\r\n    }\r\n    // to update flag variable value for automatic pause and resume\r\n    onResuming(args) {\r\n        if (args.event !== null && !navigator.onLine) {\r\n            this.isInteraction = true;\r\n        }\r\n        else {\r\n            this.isInteraction = false;\r\n        }\r\n    }\r\n    // to prevent triggering chunk-upload failure event and to pause uploading on network failure\r\n    onBeforeFailure(args) {\r\n        let proxy = this;\r\n        args.cancel = !this.isInteraction;\r\n        // interval to check network availability on every 500 milliseconds\r\n        let clearTimeInterval = setInterval(function () {\r\n            if (navigator.onLine && !isNullOrUndefined(proxy.uploadObj.filesData[0]) && proxy.uploadObj.filesData[0].statusCode == 4) {\r\n                proxy.uploadObj.resume(proxy.uploadObj.filesData);\r\n                clearSetInterval();\r\n            }\r\n            else {\r\n                if (!proxy.isInteraction && !isNullOrUndefined(proxy.uploadObj.filesData[0]) && proxy.uploadObj.filesData[0].statusCode == 3) {\r\n                    proxy.uploadObj.pause(proxy.uploadObj.filesData);\r\n                }\r\n            }\r\n        }, 500);\r\n        // clear Interval after when network is available.\r\n        function clearSetInterval() {\r\n            clearInterval(clearTimeInterval);\r\n        }\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n        <div className='control-section row uploadpreview'>\r\n         <div className='col-lg-8'>\r\n          <div className='upload_wrapper'>\r\n            \r\n            <UploaderComponent id='chunkUpload' type='file' ref={(scope) => { this.uploadObj = scope; }} asyncSettings={this.asyncSettings} autoUpload={this.autoUpload} removing={this.onRemoveFile.bind(this)} pausing={this.onPausing.bind(this)} resuming={this.onResuming.bind(this)} chunkFailure={this.onBeforeFailure.bind(this)}></UploaderComponent>\r\n        </div>\r\n        </div>\r\n        <div className='col-lg-4 property-section' id=\"chunk-size\">\r\n            <PropertyPane title='Properties'>\r\n              <table id=\"property\" title=\"Properties\" className='chunk-table'>\r\n              <tbody>\r\n                <tr>\r\n                  <td className='chunk-td'>Chunk Size</td>\r\n                  <td>\r\n                    <DropDownListComponent id=\"chunksize\" index={this.value} dataSource={this.ddlDatas} ref={(dropdownlist) => { this.listObj = dropdownlist; }} fields={this.fields} change={this.onChange.bind(this)} placeholder=\"Select chunk size\"/>\r\n                  </td>\r\n                </tr>\r\n                </tbody>\r\n              </table>\r\n            </PropertyPane>\r\n          </div>\r\n        </div>\r\n      </div>);\r\n    }\r\n}\r\n\nrender(<ChunkUpload />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}