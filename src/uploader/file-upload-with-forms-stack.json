{"index.css":".form-group {\r\n padding-top: 11px; \r\n }\r\n \r\n .form-group .e-upload.e-keyboard {\r\n\tdisplay: none;\r\n }\r\n .form-group .address-field{\r\n    resize: none;\r\n}\r\n.control_wrapper.uploader-form {\r\n    max-width: 500px;\r\n    margin: auto;\r\n    border: 0.5px solid #BEBEBE;\r\n    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.36);\r\n    padding: 1% 4% 2%;\r\n    background: #f9f9f9;\r\n}\r\n.highcontrast .control_wrapper.uploader-form {\r\n\tbackground: #000;\r\n}\r\n\r\n.e-float-input.upload-area {\r\n  width: 75%;\r\n}\r\n\r\n.e-bigger.fabric .e-float-input.upload-area, .e-bigger.highcontrast .e-float-input.upload-area {\r\n  width: 72%;\r\n  display: block;\r\n}\r\n\r\n.material .e-float-input.upload-area button#browse {\r\n    float: right;\r\n\tmargin-right: -106px;\r\n\tmargin-top: -26px;\r\n}\r\n\r\n.e-bigger.material .e-float-input.upload-area button#browse {\r\n    margin-top: -36px;\r\n    margin-right: -106px;\r\n}\r\n\r\n.fabric .e-float-input.upload-area button#browse,\r\n.bootstrap4 .e-float-input.upload-area button#browse, \r\n.highcontrast .e-float-input.upload-area button#browse {\r\n    float: right;\r\n\tmargin-right: -106px;\r\n\tmargin-top: -32px;\r\n}\r\n.e-bigger.fabric .e-float-input.upload-area button#browse, .e-bigger.highcontrast .e-float-input.upload-area button#browse {\r\n\tmargin-right: -120px;\r\n    margin-top: -40px;\r\n}\r\n.bootstrap .e-float-input.upload-area button#browse {\r\n    float: right;\r\n\tmargin-right: -106px;\r\n\tmargin-top: -35px;\r\n}\r\n.e-bigger.bootstrap .e-float-input.upload-area button#browse {\r\n\tmargin-top: -40px;\r\n}\r\n\r\n.form-title {\r\n    text-align: center;\r\n}\r\n\r\n.submitBtn .desc {\r\n    margin: 2% 23% 0% 18%;\r\n}\r\n@media only screen and (max-width: 500px) {\r\n    .submitBtn .desc {\r\n        margin: 12px;\r\n    }\r\n    .upload-area, .e-bigger .upload-area {\r\n        width: 60%;\r\n    }\r\n}\r\n\r\n.submitBtn {\r\n    text-align: center;\r\n\tposition: relative;\r\n}\r\n\r\n.form-group #mobile-no input[type=number]::-webkit-inner-spin-button,\r\n.form-group #mobile-no input[type=number]::-webkit-outer-spin-button {\r\n    -webkit-appearance: none;\r\n    margin: 0;\r\n}\r\n","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { SampleBase } from './sample-base';\r\nimport { UploaderComponent } from '@syncfusion/ej2-react-inputs';\r\nimport { FormValidator } from '@syncfusion/ej2-inputs';\r\nimport { DialogComponent } from '@syncfusion/ej2-react-popups';\r\n\r\nexport class Formsupport extends SampleBase {\r\n    constructor(props) {\r\n        super(props);\r\n        this.inputRefElement = null;\r\n        this.inputRef = element => {\r\n            this.inputRefElement = element;\r\n        };\r\n        this.animationSettings = { effect: 'Zoom' };\r\n        this.autoUpload = false;\r\n        this.allowedExtensions = 'image/*';\r\n        this.multiple = false;\r\n    }\r\n    // Uploader component\r\n    rendereComplete() {\r\n        let input = document.querySelectorAll('.e-input-group .e-input,.e-float-input.e-input-group input');\r\n        let inputIcon = document.querySelectorAll('.e-input-group-icon');\r\n        for (let i = 0; i < input.length; i++) {\r\n            { }\r\n            input[i].addEventListener('focus', () => {\r\n                getParentNode(input[i]).classList.add('e-input-focus');\r\n            });\r\n            { }\r\n            input[i].addEventListener('blur', () => {\r\n                getParentNode(input[i]).classList.remove('e-input-focus');\r\n            });\r\n        }\r\n        for (let i = 0; i < inputIcon.length; i++) {\r\n            { }\r\n            inputIcon[i].addEventListener('mousedown', function () {\r\n                this.classList.add('e-input-btn-ripple');\r\n            });\r\n            { }\r\n            inputIcon[i].addEventListener('mouseup', function () {\r\n                let ele = this;\r\n                setTimeout(() => { ele.classList.remove('e-input-btn-ripple'); }, 500);\r\n            });\r\n        }\r\n        function getParentNode(element) {\r\n            let parentNode = element.parentNode;\r\n            if (parentNode.classList.contains('e-input-in-wrap')) {\r\n                return parentNode.parentNode;\r\n            }\r\n            return parentNode;\r\n        }\r\n        document.getElementById('browse').onclick = () => {\r\n            document.getElementsByClassName('e-file-select-wrap')[0].querySelector('button').click();\r\n            return false;\r\n        };\r\n        this.formValidator = {\r\n            // Defines the validation rules\r\n            rules: {\r\n                'name': {\r\n                    required: [true, '* Enter your name']\r\n                },\r\n                'email': {\r\n                    required: [true, '* Please enter valid email']\r\n                },\r\n                'upload': {\r\n                    required: [true, '* Select any file']\r\n                },\r\n                'mobile': {\r\n                    required: [true, '* Enter your mobile number']\r\n                }\r\n            }\r\n        };\r\n        this.formObject = new FormValidator('#formTemp', this.formValidator);\r\n    }\r\n    ;\r\n    onSubmitClick() {\r\n        if (this.formObject.validate()) {\r\n            this.formObject.element.reset();\r\n            this.dialogInstance.show();\r\n        }\r\n    }\r\n    onFileSelected(args) {\r\n        this.inputElement = this.inputRefElement;\r\n        this.inputElement.value = args.filesData[0].name;\r\n        this.inputElement.classList.remove('e-error');\r\n        this.inputElement.classList.remove('e-valid');\r\n        this.inputElement.removeAttribute('aria-invalid');\r\n        this.inputElement.setAttribute('aria-invalid', 'false');\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n\t\t\t<div className='control-section col-lg-12 uploadpreview'>\r\n                <h4 className=\"form-title\">Photo Contest</h4>\r\n                    <div className=\"control_wrapper uploader-form\" id=\"control_wrapper\">\r\n                        <form id=\"formTemp\" method=\"post\">\r\n                            <div className=\"form-group\">\r\n                                <div className=\"e-float-input\">\r\n                                <input type=\"text\" id=\"name\" name=\"name\" data-msg-containerid=\"nameError\"/>\r\n                                <span className=\"e-float-line\"></span>\r\n                                <label className=\"e-float-text e-label-top\" htmlFor=\"name\">Name</label>\r\n                                </div>\r\n                                <div id=\"nameError\"></div>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <div className=\"e-float-input\">\r\n                                <input type=\"email\" id=\"Email\" name=\"email\" data-msg-containerid=\"mailError\"/>\r\n                                    <span className=\"e-float-line\"></span>\r\n                                    <label className=\"e-float-text e-label-top\" htmlFor=\"email\">Email</label>\r\n                                </div>\r\n                                <div id=\"mailError\"></div>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <div className=\"e-float-input\" id=\"mobile-no\">\r\n                                    <input type=\"number\" id=\"mobileno\" name=\"mobile\" data-msg-containerid=\"noError\"/>\r\n                                    <span className=\"e-float-line\"></span>\r\n                                    <label className=\"e-float-text e-label-top\" htmlFor=\"mobile\">Mobile no</label>\r\n                                </div>\r\n                                <div id=\"noError\"></div>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <div className=\"e-float-input upload-area\">\r\n                                    <input type=\"text\" readOnly id=\"upload\" ref={this.inputRef} name=\"upload\" data-msg-containerid=\"uploadError\"/>\r\n                                    <button id=\"browse\" className=\"e-control e-btn e-info\">Browse...</button>\r\n                                    <span className=\"e-float-line\"></span>\r\n                                    <label className=\"e-float-text e-label-top\">Choose a file</label>\r\n                                </div>\r\n                                <div id=\"uploadError\"></div>\r\n                                    <UploaderComponent id='fileUpload' type='file' ref={(scope) => { this.uploadObj = scope; }} selected={this.onFileSelected.bind(this)} autoUpload={this.autoUpload} allowedExtensions={this.allowedExtensions} multiple={this.multiple}></UploaderComponent>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <div className=\"e-float-input\">\r\n                                    <textarea className=\"address-field\" id=\"Address\" name=\"Address\"></textarea>\r\n                                    <span className=\"e-float-line\"></span>\r\n                                    <label className=\"e-float-text e-label-top\">Address</label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"submitBtn\">\r\n                                <button className=\"submit-btn e-btn\" id=\"submit-btn\" onClick={this.onSubmitClick.bind(this)}>Submit</button>\r\n                                <div className=\"desc\"><span>*This button is not a submit type and the form submit handled from externally.</span></div>                      \r\n                            </div>                \r\n                        </form>\r\n                    </div>\r\n                    <DialogComponent id=\"defaultdialog\" isModal={true} header='Success' showCloseIcon={true} visible={false} content='Your details have been updated successfully, Thank you.' animationSettings={this.animationSettings} width={'50%'} ref={dialog => this.dialogInstance = dialog} target={'.control-section'}></DialogComponent>\r\n            </div>\r\n      </div>);\r\n    }\r\n}\r\n\nrender(<Formsupport />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}