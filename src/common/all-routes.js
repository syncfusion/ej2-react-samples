"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var react_router_dom_1 = require("react-router-dom");
var accordion_routes_1 = require("../accordion/accordion-routes");
var autocomplete_routes_1 = require("../auto-complete/autocomplete-routes");
var avatar_routes_1 = require("../avatar/avatar-routes");
var badge_routes_1 = require("../badge/badge-routes");
var barcode_routes_1 = require("../barcode/barcode-routes");
var bulletchart_routes_1 = require("../bullet-chart/bulletchart-routes");
var button_routes_1 = require("../button/button-routes");
var calendar_routes_1 = require("../calendar/calendar-routes");
var card_routes_1 = require("../card/card-routes");
var chart_routes_1 = require("../chart/chart-routes");
var chips_routes_1 = require("../chips/chips-routes");
var circulargauge_routes_1 = require("../circular-gauge/circulargauge-routes");
var colorpicker_routes_1 = require("../color-picker/colorpicker-routes");
var combobox_routes_1 = require("../combo-box/combobox-routes");
var contextmenu_routes_1 = require("../context-menu/contextmenu-routes");
var dashboardlayout_routes_1 = require("../dashboard-layout/dashboardlayout-routes");
var datepicker_routes_1 = require("../datepicker/datepicker-routes");
var daterangepicker_routes_1 = require("../daterangepicker/daterangepicker-routes");
var datetimepicker_routes_1 = require("../datetimepicker/datetimepicker-routes");
var diagram_routes_1 = require("../diagram/diagram-routes");
var dialog_routes_1 = require("../dialog/dialog-routes");
var documenteditor_routes_1 = require("../document-editor/documenteditor-routes");
var dropdownlist_routes_1 = require("../drop-down-list/dropdownlist-routes");
var filemanager_routes_1 = require("../file-manager/filemanager-routes");
var formvalidator_routes_1 = require("../form-validator/formvalidator-routes");
var gantt_routes_1 = require("../gantt/gantt-routes");
var grid_routes_1 = require("../grid/grid-routes");
var heatmap_routes_1 = require("../heatmap/heatmap-routes");
var inplaceeditor_routes_1 = require("../inplace-editor/inplaceeditor-routes");
var lineargauge_routes_1 = require("../linear-gauge/lineargauge-routes");
var listbox_routes_1 = require("../list-box/listbox-routes");
var listview_routes_1 = require("../listview/listview-routes");
var maps_routes_1 = require("../maps/maps-routes");
var maskedtextbox_routes_1 = require("../maskedtextbox/maskedtextbox-routes");
var menu_routes_1 = require("../menu/menu-routes");
var multiselect_routes_1 = require("../multi-select/multiselect-routes");
var numerictextbox_routes_1 = require("../numerictextbox/numerictextbox-routes");
var pdfviewer_routes_1 = require("../pdfviewer/pdfviewer-routes");
var pivottable_routes_1 = require("../pivot-table/pivottable-routes");
var querybuilder_routes_1 = require("../query-builder/querybuilder-routes");
var rangenavigator_routes_1 = require("../range-navigator/rangenavigator-routes");
var richtexteditor_routes_1 = require("../rich-text-editor/richtexteditor-routes");
var schedule_routes_1 = require("../schedule/schedule-routes");
var sidebar_routes_1 = require("../sidebar/sidebar-routes");
var slider_routes_1 = require("../slider/slider-routes");
var smithchart_routes_1 = require("../smith-chart/smithchart-routes");
var sparkline_routes_1 = require("../sparkline/sparkline-routes");
var splitter_routes_1 = require("../splitter/splitter-routes");
var spreadsheet_routes_1 = require("../spreadsheet/spreadsheet-routes");
var stockchart_routes_1 = require("../stock-chart/stockchart-routes");
var tab_routes_1 = require("../tab/tab-routes");
var textboxes_routes_1 = require("../textboxes/textboxes-routes");
var timepicker_routes_1 = require("../timepicker/timepicker-routes");
var toast_routes_1 = require("../toast/toast-routes");
var toolbar_routes_1 = require("../toolbar/toolbar-routes");
var tooltip_routes_1 = require("../tooltip/tooltip-routes");
var treegrid_routes_1 = require("../treegrid/treegrid-routes");
var treemap_routes_1 = require("../treemap/treemap-routes");
var treeview_routes_1 = require("../treeview/treeview-routes");
var uploader_routes_1 = require("../uploader/uploader-routes");
exports.routes = (React.createElement(react_router_dom_1.HashRouter, null,
    React.createElement("div", null,
        accordion_routes_1.accordionRoutes,
        autocomplete_routes_1.autocompleteRoutes,
        avatar_routes_1.avatarRoutes,
        badge_routes_1.badgeRoutes,
        barcode_routes_1.barcodeRoutes,
        bulletchart_routes_1.bulletchartRoutes,
        button_routes_1.buttonRoutes,
        calendar_routes_1.calendarRoutes,
        card_routes_1.cardRoutes,
        chart_routes_1.chartRoutes,
        chips_routes_1.chipsRoutes,
        circulargauge_routes_1.circulargaugeRoutes,
        colorpicker_routes_1.colorpickerRoutes,
        combobox_routes_1.comboboxRoutes,
        contextmenu_routes_1.contextmenuRoutes,
        dashboardlayout_routes_1.dashboardlayoutRoutes,
        datepicker_routes_1.datepickerRoutes,
        daterangepicker_routes_1.daterangepickerRoutes,
        datetimepicker_routes_1.datetimepickerRoutes,
        diagram_routes_1.diagramRoutes,
        dialog_routes_1.dialogRoutes,
        documenteditor_routes_1.documenteditorRoutes,
        dropdownlist_routes_1.dropdownlistRoutes,
        filemanager_routes_1.filemanagerRoutes,
        formvalidator_routes_1.formvalidatorRoutes,
        gantt_routes_1.ganttRoutes,
        grid_routes_1.gridRoutes,
        heatmap_routes_1.heatmapRoutes,
        inplaceeditor_routes_1.inplaceeditorRoutes,
        lineargauge_routes_1.lineargaugeRoutes,
        listbox_routes_1.listboxRoutes,
        listview_routes_1.listviewRoutes,
        maps_routes_1.mapsRoutes,
        maskedtextbox_routes_1.maskedtextboxRoutes,
        menu_routes_1.menuRoutes,
        multiselect_routes_1.multiselectRoutes,
        numerictextbox_routes_1.numerictextboxRoutes,
        pdfviewer_routes_1.pdfviewerRoutes,
        pivottable_routes_1.pivottableRoutes,
        querybuilder_routes_1.querybuilderRoutes,
        rangenavigator_routes_1.rangenavigatorRoutes,
        richtexteditor_routes_1.richtexteditorRoutes,
        schedule_routes_1.scheduleRoutes,
        sidebar_routes_1.sidebarRoutes,
        slider_routes_1.sliderRoutes,
        smithchart_routes_1.smithchartRoutes,
        sparkline_routes_1.sparklineRoutes,
        splitter_routes_1.splitterRoutes,
        spreadsheet_routes_1.spreadsheetRoutes,
        stockchart_routes_1.stockchartRoutes,
        tab_routes_1.tabRoutes,
        textboxes_routes_1.textboxesRoutes,
        timepicker_routes_1.timepickerRoutes,
        toast_routes_1.toastRoutes,
        toolbar_routes_1.toolbarRoutes,
        tooltip_routes_1.tooltipRoutes,
        treegrid_routes_1.treegridRoutes,
        treemap_routes_1.treemapRoutes,
        treeview_routes_1.treeviewRoutes,
        uploader_routes_1.uploaderRoutes,
        (location.hash) === "" ?
            React.createElement(react_router_dom_1.Redirect, { from: '/', exact: true, to: "material/grid/overview" }) :
            null)));
exports.category = { "accordion": { "default": { "name": "Default Functionalities", "category": "Accordion" }, "ajax": { "name": "Ajax Content", "category": "Accordion" }, "icon": { "name": "Icons", "category": "Accordion" }, "defaultSample": "accordion/default" },
    "auto-complete": { "default": { "name": "Default Functionalities", "category": "AutoComplete" }, "grouping-icon": { "name": "Grouping and Icons", "category": "AutoComplete" }, "data-binding": { "name": "Data Binding", "category": "AutoComplete" }, "template": { "name": "Templates", "category": "AutoComplete" }, "highlight": { "name": "Highlight", "category": "AutoComplete" }, "custom-filtering": { "name": "Custom Filtering", "category": "AutoComplete" }, "diacritics-filtering": { "name": "Diacritics Filtering", "category": "AutoComplete" }, "defaultSample": "auto-complete/default" },
    "avatar": { "default": { "name": "Default", "category": "Avatar" }, "types": { "name": "Types", "category": "Avatar" }, "badge": { "name": "Badge", "category": "Integration" }, "listview": { "name": "ListView", "category": "Integration" }, "card": { "name": "Card", "category": "Integration" }, "defaultSample": "avatar/default" },
    "badge": { "default": { "name": "Default", "category": "Badge" }, "types": { "name": "Types", "category": "Badge" }, "notification": { "name": "Notification", "category": "Badge" }, "listview": { "name": "ListView", "category": "Integration" }, "accordion": { "name": "Accordion", "category": "Integration" }, "toolbar": { "name": "Toolbar", "category": "Integration" }, "defaultSample": "badge/default" },
    "barcode": { "ean8": { "name": "EAN-8", "category": "Getting Started" }, "code128": { "name": "Code 128", "category": "Getting Started" }, "code128A": { "name": "Code 128A", "category": "Getting Started" }, "code128B": { "name": "Code 128B", "category": "Getting Started" }, "code128C": { "name": "Code 128C", "category": "Getting Started" }, "code93": { "name": "Code 93", "category": "Getting Started" }, "code32": { "name": "Code 32", "category": "Getting Started" }, "default-functionality": { "name": "Codabar", "category": "Getting Started" }, "ean13": { "name": "EAN-13", "category": "Getting Started" }, "upca": { "name": "UPC-A", "category": "Getting Started" }, "upce": { "name": "UPC-E", "category": "Getting Started" }, "code39": { "name": "Code39", "category": "Getting Started" }, "code39Extd": { "name": "Code 39 Extended", "category": "Getting Started" }, "qrcode": { "name": "QR Code", "category": "Getting Started" }, "datamatrix": { "name": "Data Matrix", "category": "Getting Started" }, "defaultSample": "barcode/ean8" },
    "bullet-chart": { "default": { "name": "Default", "category": "Bullet Chart" }, "multiple-data": { "name": "Multiple Data", "category": "Bullet Chart" }, "right-to-left": { "name": "RTL", "category": "Bullet Chart" }, "bar-customization": { "name": "Feature and Target Bar", "category": "Bullet Chart" }, "customization": { "name": "Range and Label Settings", "category": "Bullet Chart" }, "tooltip": { "name": "Tooltip Template", "category": "Bullet Chart" }, "defaultSample": "bullet-chart/default" },
    "button": { "default": { "name": "Default Functionalities", "category": "Button" }, "button-group": { "name": "Button Group", "category": "Button" }, "checkbox": { "name": "Checkbox", "category": "Button" }, "radio-button": { "name": "Radio Button", "category": "Button" }, "dropdown-button": { "name": "Dropdown Menu", "category": "Button" }, "split-button": { "name": "Split Button", "category": "Button" }, "switch": { "name": "Switch", "category": "Button" }, "progress-button": { "name": "Progress Button", "category": "Button" }, "defaultSample": "button/default" },
    "calendar": { "default": { "name": "Default Functionalities", "category": "Calendar" }, "date-range": { "name": "Date Range", "category": "Calendar" }, "disabled": { "name": "Disabled Dates", "category": "Calendar" }, "special-dates": { "name": "Special Dates", "category": "Calendar" }, "multi-selection": { "name": "Multiple Selection", "category": "Calendar" }, "month-picker": { "name": "Month Picker", "category": "Calendar" }, "islamic-calendar": { "name": "Islamic Calendar", "category": "Calendar" }, "defaultSample": "calendar/default" },
    "card": { "basic": { "name": "Basic Card", "category": "Cards" }, "vertical": { "name": "Vertical Card", "category": "Cards" }, "horizontal": { "name": "Horizontal Card", "category": "Cards" }, "swipeable": { "name": "Swipeable Card", "category": "Cards" }, "flip": { "name": "Flip Card", "category": "Cards" }, "reveal": { "name": "Reveal Card", "category": "Cards" }, "tile": { "name": "Tile View", "category": "Cards" }, "defaultSample": "card/basic" },
    "chart": { "line": { "name": "Line", "category": "Line Charts" }, "spline": { "name": "Spline", "category": "Line Charts" }, "stepline": { "name": "Step Line", "category": "Line Charts" }, "dashed-line": { "name": "Dashed Line", "category": "Line Charts" }, "spline-inversed": { "name": "Inversed Spline", "category": "Line Charts" }, "line-segments": { "name": "Line Zone", "category": "Line Charts" }, "line-multi-line": { "name": "Multi Colored Line", "category": "Line Charts" }, "stacked-line": { "name": "Stacked Line", "category": "Line Charts" }, "stacked-line-100": { "name": "100% Stacked Line", "category": "Line Charts" }, "area": { "name": "Area", "category": "Area Charts" }, "spline-area": { "name": "Spline Area", "category": "Area Charts" }, "steparea": { "name": "Step Area", "category": "Area Charts" }, "rangearea": { "name": "Range Area", "category": "Area Charts" }, "stacked-area": { "name": "Stacked Area", "category": "Area Charts" }, "stacked-area100": { "name": "100% Stacked Area", "category": "Area Charts" }, "area-empty": { "name": "Area - Empty Points", "category": "Area Charts" }, "area-segments": { "name": "Area Zone", "category": "Area Charts" }, "column": { "name": "Column", "category": "Bar Charts" }, "rounded-column": { "name": "Rounded Column", "category": "Bar Charts" }, "column-placement": { "name": "Back to Back Column", "category": "Bar Charts" }, "range-column": { "name": "Range Column", "category": "Bar Charts" }, "range-bar": { "name": "Inversed Range Column", "category": "Bar Charts" }, "bar": { "name": "Bar", "category": "Bar Charts" }, "stacked-column": { "name": "Stacked Column", "category": "Bar Charts" }, "stacked-column100": { "name": "100% Stacked Column", "category": "Bar Charts" }, "stacked-bar": { "name": "Stacked Bar", "category": "Bar Charts" }, "stacked-bar100": { "name": "100% Stacked Bar", "category": "Bar Charts" }, "tornado": { "name": "Negative Stack", "category": "Bar Charts" }, "hilo": { "name": "Hilo", "category": "Financial Charts" }, "hiloopenclose": { "name": "Hilo Open Close", "category": "Financial Charts" }, "candle": { "name": "Candle", "category": "Financial Charts" }, "scatter": { "name": "Scatter", "category": "Scatter and Bubble" }, "bubble": { "name": "Bubble", "category": "Scatter and Bubble" }, "waterfall": { "name": "Waterfall", "category": "Other Types" }, "histogram": { "name": "Histogram", "category": "Other Types" }, "box-whisker": { "name": "Box and Whisker", "category": "Other Types" }, "error-bar": { "name": "Error Bar", "category": "Other Types" }, "trend-lines": { "name": "Trendlines", "category": "Other Types" }, "combination-series": { "name": "Combination Series", "category": "Other Types" }, "pareto": { "name": "Pareto Chart", "category": "Other Types" }, "adindicator": { "name": "Accumulation Distribution", "category": "Technical Indicators" }, "atrindicator": { "name": "ATR", "category": "Technical Indicators" }, "bollinger": { "name": "Bollinger", "category": "Technical Indicators" }, "ema": { "name": "EMA", "category": "Technical Indicators" }, "macd": { "name": "MACD", "category": "Technical Indicators" }, "momentum": { "name": "Momentum", "category": "Technical Indicators" }, "rsi": { "name": "RSI", "category": "Technical Indicators" }, "sma": { "name": "SMA", "category": "Technical Indicators" }, "stochastic": { "name": "Stochastic", "category": "Technical Indicators" }, "tma": { "name": "TMA", "category": "Technical Indicators" }, "performance": { "name": "Benchmark", "category": "Performance" }, "default-pie": { "name": "Pie", "category": "Accumulation Charts" }, "pie-radius": { "name": "Pie with Various Radius", "category": "Accumulation Charts" }, "doughnut": { "name": "Doughnut", "category": "Accumulation Charts" }, "pyramid": { "name": "Pyramid", "category": "Accumulation Charts" }, "funnel": { "name": "Funnel", "category": "Accumulation Charts" }, "default-doughnut": { "name": "Pie With Legend", "category": "Accumulation Charts" }, "semi-pie": { "name": "Semi Pie", "category": "Accumulation Charts" }, "smartlabels": { "name": "Smart Labels", "category": "Accumulation Charts" }, "drilldown": { "name": "Drilldown", "category": "Accumulation Charts" }, "grouping": { "name": "Grouping", "category": "Accumulation Charts" }, "pie-empty-point": { "name": "Empty Points", "category": "Accumulation Charts" }, "polar-line": { "name": "Line", "category": "Polar Radar" }, "polar-spline": { "name": "Spline", "category": "Polar Radar" }, "polar-area": { "name": "Area", "category": "Polar Radar" }, "polar-stackedarea": { "name": "Stacked Area", "category": "Polar Radar" }, "polar-scatter": { "name": "Scatter", "category": "Polar Radar" }, "polar-column": { "name": "Column", "category": "Polar Radar" }, "polar-stackedcolumn": { "name": "Wind Rose", "category": "Polar Radar" }, "polar-rangecolumn": { "name": "Range Column", "category": "Polar Radar" }, "local-data": { "name": "Local Data", "category": "Data Binding" }, "remote-data": { "name": "Remote Data", "category": "Data Binding" }, "lazy-loading": { "name": "Lazy Loading", "category": "Data Binding" }, "numeric-axis": { "name": "Numeric Axis", "category": "Chart Axes" }, "datetime": { "name": "DateTime Axis", "category": "Chart Axes" }, "datetime-category": { "name": "DateTime Category Axis", "category": "Chart Axes" }, "category": { "name": "Category Axis", "category": "Chart Axes" }, "indexed-axis": { "name": "Indexed Category Axis", "category": "Chart Axes" }, "log": { "name": "Log Axis", "category": "Chart Axes" }, "multiple-axis": { "name": "Multiple Axis", "category": "Chart Axes" }, "inversed": { "name": "Inversed Axis", "category": "Chart Axes" }, "stripline": { "name": "Strip Line", "category": "Chart Axes" }, "strip-line-recurrence": { "name": "Strip Line Recurrence", "category": "Chart Axes" }, "smart-axis-labels": { "name": "Smart Labels", "category": "Chart Axes" }, "multi-level-label": { "name": "Multi Level Labels", "category": "Chart Axes" }, "axis-crossing": { "name": "Axes Crossing", "category": "Chart Axes" }, "sorting": { "name": "Sorting", "category": "Chart Customization" }, "symbols": { "name": "Symbols", "category": "Chart Customization" }, "annotation": { "name": "Annotation", "category": "Chart Customization" }, "datalabel-template": { "name": "DataLabel Template", "category": "Chart Customization" }, "tooltip-template": { "name": "Tooltip Template", "category": "Chart Customization" }, "vertical": { "name": "Vertical Chart", "category": "Chart Customization" }, "empty-point": { "name": "Empty Points", "category": "Chart Customization" }, "print": { "name": "Print", "category": "Print and Export" }, "export": { "name": "Export", "category": "Print and Export" }, "selection": { "name": "Selection", "category": "User Interaction" }, "range-selection": { "name": "Range Selection", "category": "User Interaction" }, "crosshair": { "name": "Crosshair", "category": "User Interaction" }, "trackball": { "name": "Trackball", "category": "User Interaction" }, "zoom": { "name": "Zooming and Panning", "category": "User Interaction" }, "data-editing": { "name": "Data Editing", "category": "User Interaction" }, "defaultSample": "chart/line" },
    "chips": { "default": { "name": "Default Functionalities", "category": "Chips" }, "api": { "name": "API", "category": "Chips" }, "defaultSample": "chips/default" },
    "circular-gauge": { "default": { "name": "Default Functionalities", "category": "Circular Gauge" }, "range": { "name": "Range", "category": "Circular Gauge" }, "labels": { "name": "Tick and Labels", "category": "Circular Gauge" }, "annotation": { "name": "Annotations", "category": "Circular Gauge" }, "customization": { "name": "Gauge Customization", "category": "Circular Gauge" }, "semi-circular-gauge": { "name": "Semi-Circular Gauge", "category": "Circular Gauge" }, "arc-gauge": { "name": "Arc Gauge", "category": "Circular Gauge" }, "legend": { "name": "Legend", "category": "Circular Gauge" }, "direction": { "name": "Direction Compass", "category": "Circular Gauge" }, "image": { "name": "Pointer Image", "category": "Pointer" }, "pointers": { "name": "Pointer Customization", "category": "Pointer" }, "axes": { "name": "Multiple Axis", "category": "Axes" }, "drag": { "name": "Pointer Drag", "category": "User Interaction" }, "tooltip": { "name": "Tooltip", "category": "User Interaction" }, "sample-data": { "name": "Data Sample", "category": "Use Cases" }, "apple-watch-rings": { "name": "Apple Watch Rings", "category": "Use Cases" }, "speedometer": { "name": "Speedometer", "category": "Use Cases" }, "defaultSample": "circular-gauge/default" },
    "color-picker": { "default": { "name": "Default Functionalities", "category": "Color Picker" }, "inline": { "name": "Inline Mode", "category": "Color Picker" }, "custom": { "name": "Custom Palettes", "category": "Color Picker" }, "api": { "name": "API", "category": "Color Picker" }, "defaultSample": "color-picker/default" },
    "combo-box": { "default": { "name": "Default Functionalities", "category": "ComboBox" }, "grouping-icon": { "name": "Grouping and Icons", "category": "ComboBox" }, "data-binding": { "name": "Data Binding", "category": "ComboBox" }, "custom-value": { "name": "Custom Value", "category": "ComboBox" }, "filtering": { "name": "Filtering", "category": "ComboBox" }, "template": { "name": "Templates", "category": "ComboBox" }, "cascading": { "name": "Cascading", "category": "ComboBox" }, "diacritics-filtering": { "name": "Diacritics Filtering", "category": "ComboBox" }, "defaultSample": "combo-box/default" },
    "context-menu": { "default": { "name": "Default Functionalities", "category": "Context Menu" }, "defaultSample": "context-menu/default" },
    "dashboard-layout": { "default": { "name": "Default Functionalities", "category": "Dashboard Layout" }, "predefined-layouts": { "name": "Predefined Layouts", "category": "Dashboard Layout" }, "properties": { "name": "API", "category": "Dashboard Layout" }, "dynamic": { "name": "Editable Dashboard", "category": "Dashboard Layout" }, "analytics-dashboard": { "name": "SEO Analytics Dashboard", "category": "Use Case" }, "defaultSample": "dashboard-layout/default" },
    "datepicker": { "default": { "name": "Default Functionalities", "category": "DatePicker" }, "date-range": { "name": "Date Range", "category": "DatePicker" }, "date-format": { "name": "Format", "category": "DatePicker" }, "disabled": { "name": "Disabled Dates", "category": "DatePicker" }, "special-dates": { "name": "Special Dates", "category": "DatePicker" }, "month-picker": { "name": "Month Picker", "category": "DatePicker" }, "defaultSample": "datepicker/default" },
    "daterangepicker": { "default": { "name": "Default Functionalities", "category": "DateRangePicker" }, "date-range": { "name": "Date Range", "category": "DateRangePicker" }, "day-span": { "name": "Day Span", "category": "DateRangePicker" }, "date-format": { "name": "Format", "category": "DateRangePicker" }, "presets": { "name": "Preset Ranges", "category": "DateRangePicker" }, "month-range-picker": { "name": "Month Range Picker", "category": "DateRangePicker" }, "defaultSample": "daterangepicker/default" },
    "datetimepicker": { "default": { "name": "Default Functionalities", "category": "DateTimePicker" }, "date-time-range": { "name": "DateTime Range", "category": "DateTimePicker" }, "date-time-format": { "name": "Format", "category": "DateTimePicker" }, "disabled": { "name": "Disabled Dates", "category": "DateTimePicker" }, "special-dates": { "name": "Special Dates", "category": "DateTimePicker" }, "defaultSample": "datetimepicker/default" },
    "diagram": { "default-functionality": { "name": "Default Functionalities", "category": "Getting Started" }, "shape-gallery": { "name": "Shapes", "category": "Getting Started" }, "getting-started-node": { "name": "Nodes", "category": "Getting Started" }, "connectors": { "name": "Connectors", "category": "Getting Started" }, "getting-started-annotation": { "name": "Annotations", "category": "Getting Started" }, "port": { "name": "Ports", "category": "Getting Started" }, "swim-lane": { "name": "SwimLane", "category": "Getting Started" }, "diagram-events": { "name": "Events", "category": "Getting Started" }, "tooltip": { "name": "Tooltip", "category": "Getting Started" }, "history-manager": { "name": "HistoryManager", "category": "Getting Started" }, "flow-execution": { "name": "Flow Execution", "category": "Getting Started" }, "custom-shapes": { "name": "Complex Shapes", "category": "Getting Started" }, "line-routing": { "name": "LineRouting", "category": "Getting Started" }, "bpmn-editor": { "name": "BPMN Editor", "category": "Use Case Diagram" }, "logic-circuit": { "name": "Logic circuit Diagram", "category": "Use Case Diagram" }, "uml-activity": { "name": "UML Activity Diagram", "category": "Use Case Diagram" }, "network-diagram": { "name": "Network Diagram", "category": "Use Case Diagram" }, "Uml-class-diagram": { "name": "UML Class Diagram", "category": "Use Case Diagram" }, "hierarchical-model": { "name": "Hierarchical Tree", "category": "Automatic Layouts" }, "organization-model": { "name": "Organization Chart", "category": "Automatic Layouts" }, "radial-tree": { "name": "Radial Tree", "category": "Automatic Layouts" }, "mind-map": { "name": "Mind Map", "category": "Automatic Layouts" }, "symmetric-layout": { "name": "Symmetric Layout", "category": "Automatic Layouts" }, "complex-hierarchical-tree": { "name": "Complex Hierarchical Tree", "category": "Automatic Layouts" }, "right-to-left-tree": { "name": "RTL Tree", "category": "Automatic Layouts" }, "pert-chart": { "name": "PERT Chart", "category": "Automatic Layouts" }, "drawing-tool": { "name": "Drawing Tools", "category": "User Interaction" }, "key-board-functions": { "name": "Keyboard Interaction", "category": "User Interaction" }, "quick-commands": { "name": "User Handle", "category": "User Interaction" }, "symbol-palette": { "name": "Symbol Palette", "category": "User Interaction" }, "overview": { "name": "Overview Panel", "category": "User Interaction" }, "serialization": { "name": "Serialization", "category": "Print and Export" }, "print-export": { "name": "Print and Export", "category": "Print and Export" }, "local-data": { "name": "Local Data", "category": "Data Binding" }, "remote-data": { "name": "Remote Data", "category": "Data Binding" }, "crud": { "name": "CRUD", "category": "Data Binding" }, "venn-diagram": { "name": "Venn Diagram", "category": "Static Diagram" }, "fishbone-diagram": { "name": "Fishbone Diagram", "category": "Static Diagram" }, "defaultSample": "diagram/default-functionality" },
    "dialog": { "default": { "name": "Default Functionalities", "category": "Dialog" }, "custom-dialog": { "name": "Custom Dialogs", "category": "Dialog" }, "modal-dialog": { "name": "Modal", "category": "Dialog" }, "template": { "name": "Template", "category": "Dialog" }, "dialog-contents-via-ajax": { "name": "Ajax Content", "category": "Dialog" }, "draggable": { "name": "Draggable", "category": "Dialog" }, "resizable": { "name": "Resizable", "category": "Dialog" }, "position": { "name": "Positioning", "category": "Dialog" }, "animation": { "name": "Animation", "category": "Dialog" }, "multiple-dialogs": { "name": "Multiple Dialogs", "category": "Dialog" }, "components-dialog": { "name": "Components inside Dialog", "category": "Dialog" }, "defaultSample": "dialog/default" },
    "document-editor": { "default": { "name": "Default Functionalities", "category": "DocumentEditor" }, "character-formatting": { "name": "Character Formatting", "category": "Editing Features" }, "paragraph-formatting": { "name": "Paragraph Formatting", "category": "Editing Features" }, "styles": { "name": "Styles", "category": "Editing Features" }, "bullets-and-numbering": { "name": "Bullets and Numbering", "category": "Editing Features" }, "links-and-bookmarks": { "name": "Hyperlinks and Bookmarks", "category": "Editing Features" }, "table-formatting": { "name": "Table Formatting", "category": "Editing Features" }, "section-formatting": { "name": "Section Formatting", "category": "Editing Features" }, "headers-and-footers": { "name": "Headers and Footers", "category": "Editing Features" }, "table-of-contents": { "name": "Table of Contents", "category": "Editing Features" }, "print": { "name": "Print", "category": "Print" }, "right-to-left": { "name": "Right To Left", "category": "RTL" }, "custom-context-menu": { "name": "Custom Context Menu", "category": "Customization" }, "auto-save": { "name": "Auto Save", "category": "Customization" }, "chart": { "name": "Chart Preservation", "category": "Charts" }, "document-protection": { "name": "Document Protection", "category": "Security" }, "comments": { "name": "Comments", "category": "Review" }, "defaultSample": "document-editor/default" },
    "drop-down-list": { "default": { "name": "Default Functionalities", "category": "Dropdown List" }, "grouping-icon": { "name": "Grouping and Icons", "category": "Dropdown List" }, "data-binding": { "name": "Data Binding", "category": "Dropdown List" }, "filtering": { "name": "Filtering", "category": "Dropdown List" }, "template": { "name": "Templates", "category": "Dropdown List" }, "cascading": { "name": "Cascading", "category": "Dropdown List" }, "inline": { "name": "Inline", "category": "Dropdown List" }, "diacritics-filtering": { "name": "Diacritics Filtering", "category": "Dropdown List" }, "defaultSample": "drop-down-list/default" },
    "file-manager": { "overview": { "name": "Overview", "category": "File Manager" }, "custom-thumbnail": { "name": "Custom Thumbnails", "category": "File Manager" }, "default": { "name": "API", "category": "File Manager" }, "drag-drop": { "name": "Drag and Drop", "category": "File Manager" }, "file-upload": { "name": "File Upload", "category": "Use Case" }, "azure-service": { "name": "Azure Blob Provider", "category": "Cloud Service Providers" }, "sql-server-provider": { "name": "SQL Database Provider", "category": "Cloud Service Providers" }, "nodejs-file-provider": { "name": "NodeJS File Provider", "category": "Cloud Service Providers" }, "AmazonS3Provider": { "name": "Amazon S3 File Provider", "category": "Cloud Service Providers" }, "firebase": { "name": "Firebase Realtime File Provider", "category": "Cloud Service Providers" }, "FTP-file-provider": { "name": "FTP File Provider", "category": "Cloud Service Providers" }, "defaultSample": "file-manager/overview" },
    "form-validator": { "default": { "name": "Default Functionalities", "category": "Form Validator" }, "defaultSample": "form-validator/default" },
    "gantt": { "default": { "name": "Default Functionalities", "category": "Gantt" }, "editing": { "name": "Editing", "category": "Gantt" }, "selection": { "name": "Selection", "category": "Gantt" }, "context-menu": { "name": "Context Menu", "category": "Gantt" }, "exporting": { "name": "Exporting", "category": "Gantt" }, "filtering": { "name": "Filtering", "category": "Gantt" }, "events": { "name": "Events", "category": "Gantt" }, "keyboard-interactions": { "name": "Keyboard Interactions", "category": "Gantt" }, "drag-and-drop": { "name": "Row Drag And Drop", "category": "Gantt" }, "local-data": { "name": "Local Data", "category": "Data Binding" }, "remote-data": { "name": "Remote Data", "category": "Data Binding" }, "self-reference-data": { "name": "Self Reference Data", "category": "Data Binding" }, "work-week": { "name": "Workweek", "category": "Scheduling Concepts" }, "working-time-range": { "name": "Working Time Range", "category": "Scheduling Concepts" }, "holidays": { "name": "Holidays", "category": "Scheduling Concepts" }, "resource-allocation": { "name": "Resource Allocation", "category": "Scheduling Concepts" }, "event-markers": { "name": "Event Markers", "category": "Scheduling Concepts" }, "indicators": { "name": "Indicators", "category": "Scheduling Concepts" }, "baseline": { "name": "Baseline", "category": "Scheduling Concepts" }, "unscheduled-task": { "name": "Unscheduled Tasks", "category": "Scheduling Concepts" }, "timeline": { "name": "Timeline API", "category": "Timeline" }, "zooming": { "name": "Zooming", "category": "Timeline" }, "column-menu": { "name": "Column Menu", "category": "Columns" }, "show-hide-column": { "name": "Show or Hide Column", "category": "Columns" }, "reorder": { "name": "Column Reorder", "category": "Columns" }, "resizing": { "name": "Column Resize", "category": "Columns" }, "column-template": { "name": "Column Template", "category": "Columns" }, "header-template": { "name": "Header Template", "category": "Columns" }, "taskbar-template": { "name": "Taskbar Template", "category": "Customization" }, "tasklabel-template": { "name": "Task Label Template", "category": "Customization" }, "tooltip-template": { "name": "Tooltip Template", "category": "Customization" }, "toolbar-template": { "name": "Toolbar Template", "category": "Customization" }, "grid-lines": { "name": "Grid Lines", "category": "Customization" }, "sorting": { "name": "Default", "category": "Sorting" }, "sorting-api": { "name": "Sorting API", "category": "Sorting" }, "defaultSample": "gantt/default" },
    "grid": { "overview": { "name": "Overview", "category": "Data Grid" }, "default": { "name": "Default Functionalities", "category": "Data Grid" }, "grouping": { "name": "Grouping", "category": "Data Grid" }, "grid-lines": { "name": "GridLines", "category": "Data Grid" }, "hierarchy": { "name": "Hierarchy Grid", "category": "Data Grid" }, "clipboard": { "name": "Clipboard", "category": "Data Grid" }, "context-menu": { "name": "Context Menu", "category": "Data Grid" }, "master-detail": { "name": "Master/Detail", "category": "Data Grid" }, "scrolling": { "name": "Default Scrolling", "category": "Scrolling" }, "virtualization": { "name": "Virtual Scrolling", "category": "Scrolling" }, "local-binding": { "name": "Local Data", "category": "Data Binding" }, "remote-data": { "name": "Remote Data", "category": "Data Binding" }, "custom-binding": { "name": "Custom Binding", "category": "Data Binding" }, "auto-wrap": { "name": "AutoWrap Column cells", "category": "Columns" }, "show-hide": { "name": "Show or Hide Column", "category": "Columns" }, "stacked-header": { "name": "Stacked Header", "category": "Columns" }, "reorder": { "name": "Reorder", "category": "Columns" }, "column-chooser": { "name": "Column Chooser", "category": "Columns" }, "column-resizing": { "name": "Column Resize", "category": "Columns" }, "column-spanning": { "name": "Column Spanning", "category": "Columns" }, "column-template": { "name": "Column Template", "category": "Columns" }, "frozen-rows": { "name": "Frozen Rows And Columns", "category": "Columns" }, "column-menu": { "name": "Column Menu", "category": "Columns" }, "foreign-key": { "name": "Foreign Key Column", "category": "Columns" }, "row-height": { "name": "Row Height", "category": "Rows" }, "row-template": { "name": "Row Template", "category": "Rows" }, "detail-template": { "name": "Detail Template", "category": "Rows" }, "row-drag-drop": { "name": "Row Drag and Drop", "category": "Rows" }, "drag-drop-within-grid": { "name": "Row Drag And Drop Within Grid", "category": "Rows" }, "row-spanning": { "name": "Row Spanning", "category": "Rows" }, "sorting": { "name": "Sorting", "category": "Sorting" }, "filtering": { "name": "Default Filtering", "category": "Filtering" }, "filter-menu": { "name": "Filter Menu", "category": "Filtering" }, "searching": { "name": "Search", "category": "Filtering" }, "paging": { "name": "Paging", "category": "Paging" }, "selection": { "name": "Default Selection", "category": "Selection" }, "selection-api": { "name": "Selection API", "category": "Selection" }, "checkbox-selection": { "name": "Checkbox Selection", "category": "Selection" }, "aggregate-default": { "name": "Default Aggregate", "category": "Aggregates" }, "aggregate-group": { "name": "Group and Caption aggregate", "category": "Aggregates" }, "reactive-aggregate": { "name": "Reactive Aggregate", "category": "Aggregates" }, "normal-edit": { "name": "Inline Editing", "category": "Editing" }, "dialog-edit": { "name": "Dialog Editing", "category": "Editing" }, "dialog-template": { "name": "Dialog Template", "category": "Editing" }, "batch": { "name": "Batch Editing", "category": "Editing" }, "command-column": { "name": "CommandColumn", "category": "Editing" }, "default-exporting": { "name": "Default Exporting", "category": "Exporting" }, "advanced-exporting": { "name": "Advanced Exporting", "category": "Exporting" }, "master-details-export": { "name": "Hierarchy Exporting", "category": "Exporting" }, "print": { "name": "Print", "category": "Exporting" }, "defaultSample": "grid/overview" },
    "heatmap": { "default": { "name": "Default Functionalities", "category": "Heatmap Chart" }, "calendar-heatmap": { "name": "Calendar Heatmap", "category": "Heatmap Chart" }, "bubble-types": { "name": "Bubble Types", "category": "Bubble Heatmap" }, "color-and-size-attributes": { "name": "Color and Size Attributes", "category": "Bubble Heatmap" }, "array-row": { "name": "Row", "category": "Data Binding" }, "array-cell": { "name": "Cell", "category": "Data Binding" }, "row-json-binding": { "name": "JSON Row", "category": "Data Binding" }, "cell-json-binding": { "name": "JSON Cell", "category": "Data Binding" }, "empty-points": { "name": "Empty points", "category": "Features" }, "inversed-axis": { "name": "Inversed Axis", "category": "Features" }, "opposed-axis": { "name": "Opposed Axis", "category": "Features" }, "MultiLevelLabels": { "name": "Multi Level Labels", "category": "Features" }, "cell-selection": { "name": "Selection", "category": "Features" }, "legend": { "name": "Legend Placement", "category": "Features" }, "large-data": { "name": "Large Data", "category": "Features" }, "palette": { "name": "Palette Mode", "category": "Features" }, "render-mode": { "name": "Rendering mode", "category": "Features" }, "tooltip-template": { "name": "Tooltip Template", "category": "Features" }, "defaultSample": "heatmap/default" },
    "inplace-editor": { "default": { "name": "Overview", "category": "In-place Editor" }, "dropdowns": { "name": "DropDown Components", "category": "In-place Editor" }, "pickers": { "name": "Date Components", "category": "In-place Editor" }, "edit-post": { "name": "Edit Post", "category": "Use Case" }, "defaultSample": "inplace-editor/default" },
    "linear-gauge": { "default": { "name": "Default Functionalities", "category": "Linear Gauge" }, "container": { "name": "Container", "category": "Linear Gauge" }, "data": { "name": "Data Sample", "category": "Linear Gauge" }, "ranges": { "name": "Ranges", "category": "Linear Gauge" }, "axes": { "name": "Axes and Pointers", "category": "Linear Gauge" }, "annotation": { "name": "Annotation", "category": "Linear Gauge" }, "tooltip": { "name": "Tooltip", "category": "Linear Gauge" }, "style": { "name": "Styles", "category": "Linear Gauge" }, "defaultSample": "linear-gauge/default" },
    "list-box": { "default": { "name": "Default Functionalities", "category": "List Box" }, "dual-list-box": { "name": "Dual ListBox", "category": "List Box" }, "drag-and-drop": { "name": "Drag And Drop", "category": "List Box" }, "checkbox": { "name": "Checkbox", "category": "List Box" }, "api": { "name": "API", "category": "List Box" }, "defaultSample": "list-box/default" },
    "listview": { "default": { "name": "Default Functionalities", "category": "ListView" }, "remote-list": { "name": "Remote Data", "category": "ListView" }, "check-list": { "name": "Checklist", "category": "ListView" }, "nested-list": { "name": "Nested List", "category": "ListView" }, "virtualization": { "name": "Virtualization", "category": "ListView" }, "template": { "name": "Template", "category": "Customization" }, "group-template": { "name": "Group Template", "category": "Customization" }, "call-history": { "name": "Call History", "category": "Use Case" }, "defaultSample": "listview/default" },
    "maps": { "default": { "name": "Default Functionalities", "category": "Maps" }, "projection": { "name": "Projection", "category": "Features" }, "multilayer": { "name": "Multi-layers", "category": "Features" }, "marker": { "name": "Marker", "category": "Features" }, "marker-template": { "name": "Marker template", "category": "Features" }, "marker-cluster": { "name": "Marker Clustering", "category": "Features" }, "label": { "name": "Labels", "category": "Features" }, "bubble": { "name": "Bubble", "category": "Features" }, "navigation-line": { "name": "Navigation Lines", "category": "Features" }, "legend": { "name": "Legend", "category": "Features" }, "color-mapping": { "name": "Color Mapping", "category": "Features" }, "annotation": { "name": "Annotations", "category": "Features" }, "osm": { "name": "OpenStreetMap", "category": "Map Providers" }, "osm-with-navigation-lines": { "name": "OSM with Navigation Lines", "category": "Map Providers" }, "osm-with-sublayers": { "name": "OSM with Sublayer", "category": "Map Providers" }, "tooltip": { "name": "Tooltip", "category": "User Interaction" }, "selection": { "name": "Selection & Highlight", "category": "User Interaction" }, "zooming": { "name": "Zooming & Panning", "category": "User Interaction" }, "programmatic-zoom": { "name": "Zoom to fit all markers", "category": "User Interaction" }, "drilldown": { "name": "Drill down", "category": "User Interaction" }, "print": { "name": "Print", "category": "Print and Export" }, "export": { "name": "Export", "category": "Print and Export" }, "heatmap": { "name": "Heat Map", "category": "Use Cases" }, "curved": { "name": "Flight routes", "category": "Use Cases" }, "earthquake": { "name": "Earthquake indication", "category": "Use Cases" }, "highlight": { "name": "Highlighted region", "category": "Use Cases" }, "cyber-attack-map": { "name": "Cyber Attack Map", "category": "Use Cases" }, "dynamic-marker": { "name": "Dynamic Markers", "category": "Use Cases" }, "map-pie": { "name": "Map with Pie chart", "category": "Use Cases" }, "map-with-slider": { "name": "Map with Slider", "category": "Use Cases" }, "sales-maps": { "name": "Sales map ", "category": "Use Cases" }, "seat-booking": { "name": "Bus seat booking", "category": "Use Cases" }, "defaultSample": "maps/default" },
    "maskedtextbox": { "default": { "name": "Default Functionalities", "category": "Input Mask" }, "custom-mask": { "name": "Custom Mask", "category": "Input Mask" }, "formats": { "name": "Formats", "category": "Input Mask" }, "defaultSample": "maskedtextbox/default" },
    "menu": { "default": { "name": "Default Functionalities", "category": "Menu Bar" }, "data-binding": { "name": "Data Binding", "category": "Menu Bar" }, "scrollable": { "name": "Scrollable", "category": "Menu Bar" }, "template": { "name": "Template", "category": "Menu Bar" }, "hamburger-mode": { "name": "Hamburger Mode", "category": "Menu Bar" }, "api": { "name": "API", "category": "Menu Bar" }, "toolbar-integration": { "name": "Toolbar Integration", "category": "Use Case" }, "defaultSample": "menu/default" },
    "multi-select": { "default": { "name": "Default Functionalities", "category": "MultiSelect Dropdown" }, "data-binding": { "name": "Data Binding", "category": "MultiSelect Dropdown" }, "grouping": { "name": "Grouping", "category": "MultiSelect Dropdown" }, "template": { "name": "Templates", "category": "MultiSelect Dropdown" }, "filtering": { "name": "Filtering", "category": "MultiSelect Dropdown" }, "custom-value": { "name": "Custom Values", "category": "MultiSelect Dropdown" }, "chip-customization": { "name": "Chip Customization", "category": "MultiSelect Dropdown" }, "checkbox": { "name": "CheckBox", "category": "MultiSelect Dropdown" }, "grouping-with-checkbox": { "name": "Grouping with CheckBox", "category": "MultiSelect Dropdown" }, "selection-limit": { "name": "Selection Limit", "category": "MultiSelect Dropdown" }, "diacritics-filtering": { "name": "Diacritics Filtering", "category": "MultiSelect Dropdown" }, "defaultSample": "multi-select/default" },
    "numerictextbox": { "default": { "name": "Default Functionalities", "category": "Numeric Textbox" }, "range-validation": { "name": "Range Validation", "category": "Numeric Textbox" }, "custom-format": { "name": "Custom Format", "category": "Numeric Textbox" }, "restrict-decimals": { "name": "Restrict Decimals", "category": "Numeric Textbox" }, "defaultSample": "numerictextbox/default" },
    "pdfviewer": { "default": { "name": "Default", "category": "PDF Viewer" }, "custom-toolbar": { "name": "Custom Toolbar", "category": "PDF Viewer" }, "right-to-left": { "name": "Right To Left", "category": "PDF Viewer" }, "form-filling": { "name": "Form Filling", "category": "PDF Viewer" }, "defaultSample": "pdfviewer/default" },
    "pivot-table": { "default": { "name": "Default Functionalities", "category": "Pivot Table" }, "local": { "name": "Local Data", "category": "Data Binding" }, "remote": { "name": "Remote Data", "category": "Data Binding" }, "Olap": { "name": "OLAP", "category": "Data Binding" }, "pivot-chart": { "name": "Pivot Chart", "category": "Integration" }, "external-binding": { "name": "External Binding", "category": "Integration" }, "field-list": { "name": "Field List", "category": "User Interaction" }, "grouping-bar": { "name": "Grouping Bar", "category": "User Interaction" }, "conditional-formatting": { "name": "Conditional Formatting", "category": "User Interaction" }, "selection": { "name": "Selection", "category": "User Interaction" }, "summary-customization": { "name": "Show/Hide Totals", "category": "User Interaction" }, "grouping": { "name": "Grouping", "category": "User Interaction" }, "tool-bar": { "name": "Toolbar", "category": "User Interaction" }, "calculated-field": { "name": "Calculated Field", "category": "Formula" }, "aggregation": { "name": "Aggregation", "category": "Formula" }, "sorting": { "name": "Default Sorting", "category": "Sorting" }, "value-sorting": { "name": "Value Sorting", "category": "Sorting" }, "filtering": { "name": "Default Filtering", "category": "Filtering" }, "label-filtering": { "name": "Label Filtering", "category": "Filtering" }, "value-filtering": { "name": "Value Filtering", "category": "Filtering" }, "virtual-scrolling": { "name": "Virtual Scrolling", "category": "Scrolling" }, "cell-template": { "name": "Cell Template", "category": "Customization" }, "drill-through": { "name": "Drill Through", "category": "Miscellaneous" }, "editing": { "name": "Editing", "category": "Miscellaneous" }, "hyper-link": { "name": "Hyperlink", "category": "Miscellaneous" }, "defer-update": { "name": "Defer Layout Update", "category": "Miscellaneous" }, "exporting": { "name": "Export", "category": "Miscellaneous" }, "defaultSample": "pivot-table/default" },
    "query-builder": { "default": { "name": "Default Functionalities", "category": "Query Builder" }, "template": { "name": "Template", "category": "Query Builder" }, "grid": { "name": "Integration with Data Grid", "category": "Query Builder" }, "defaultSample": "query-builder/default" },
    "range-navigator": { "default": { "name": "Default", "category": "Range Selector" }, "light-weight": { "name": "Lightweight", "category": "Range Selector" }, "date-time": { "name": "DateTime", "category": "Axis" }, "double": { "name": "Numeric Axis", "category": "Axis" }, "logarithmic": { "name": "Logarithmic Axis", "category": "Axis" }, "multilevel": { "name": "Multilevel Labels", "category": "Axis" }, "period-selector": { "name": "Default", "category": "Period Selector" }, "period-selector-stocks": { "name": "Stock Chart", "category": "Period Selector" }, "empty-data": { "name": "Empty Points", "category": "Customization" }, "filter": { "name": "Filter", "category": "Customization" }, "export": { "name": "Print and Export", "category": "Export" }, "right-to-left": { "name": "RTL", "category": "RTL" }, "defaultSample": "range-navigator/default" },
    "rich-text-editor": { "tools": { "name": "Overview", "category": "Rich Text Editor" }, "rich-text-editor": { "name": "Default Functionalities", "category": "Rich Text Editor" }, "image": { "name": "Image", "category": "Rich Text Editor" }, "inline": { "name": "Inline", "category": "Rich Text Editor" }, "paste-cleanup": { "name": "Paste from MS Word", "category": "Rich Text Editor" }, "iframe": { "name": "IFrame", "category": "Rich Text Editor" }, "print": { "name": "Print", "category": "Rich Text Editor" }, "ajax-load": { "name": "Ajax Content", "category": "Rich Text Editor" }, "resize-editor": { "name": "Resizable Editor", "category": "Rich Text Editor" }, "api": { "name": "API", "category": "Rich Text Editor" }, "client-side-events": { "name": "Events", "category": "Rich Text Editor" }, "blog-posting": { "name": "Use Case", "category": "Rich Text Editor" }, "auto-save": { "name": "Auto Save", "category": "Rich Text Editor" }, "types": { "name": "Type", "category": "Toolbar" }, "insert-emoticons": { "name": "Insert Emoticons", "category": "Custom Tool" }, "insert-special-characters": { "name": "Insert Special Characters", "category": "Custom Tool" }, "markdown-editor": { "name": "Overview", "category": "Markdown Editor" }, "markdown-editor-preview": { "name": "Preview", "category": "Markdown Editor" }, "markdown-editor-custom-format": { "name": "Custom Format", "category": "Markdown Editor" }, "tribute": { "name": "Tribute JS", "category": "Third-parties Integration" }, "defaultSample": "rich-text-editor/tools" },
    "schedule": { "default": { "name": "Default Functionalities", "category": "Scheduler" }, "local-data": { "name": "Local Data", "category": "Data Binding" }, "remote-data": { "name": "Remote Data", "category": "Data Binding" }, "calendar-integration": { "name": "Sync Google Calendar", "category": "Appointments" }, "recurrence-events": { "name": "Recurring Events", "category": "Appointments" }, "block-events": { "name": "Blocking Dates and Time", "category": "Appointments" }, "search-events": { "name": "Search Events", "category": "Appointments" }, "timezone": { "name": "Timezone", "category": "Appointments" }, "external-drag-drop": { "name": "External Drag and Drop", "category": "Appointments" }, "virtual-scrolling": { "name": "Virtual Scrolling", "category": "Scrolling" }, "views": { "name": "Basic Views", "category": "Views" }, "timeline": { "name": "Timeline Views", "category": "Views" }, "agenda": { "name": "Agenda View", "category": "Views" }, "month-agenda": { "name": "Month Agenda View", "category": "Views" }, "year": { "name": "Year View", "category": "Views" }, "views-configuration": { "name": "Individual View Settings", "category": "Views" }, "extended-views": { "name": "View Intervals", "category": "Views" }, "timeline-resources": { "name": "Room Scheduler", "category": "Multiple Resources" }, "resources": { "name": "Fare Calendar", "category": "Multiple Resources" }, "resource": { "name": "Resources", "category": "Multiple Resources" }, "group-editing": { "name": "Shared Events", "category": "Multiple Resources" }, "group-custom-work-days": { "name": "Different Work Days", "category": "Multiple Resources" }, "add-remove-resources": { "name": "Show/Hide Resources", "category": "Multiple Resources" }, "adaptive-rows": { "name": "Row Auto Height", "category": "Multiple Resources" }, "resource-grouping": { "name": "Horizontal Grouping", "category": "Resource Grouping" }, "timeline-resource-grouping": { "name": "Timeline Grouping", "category": "Resource Grouping" }, "group-by-date": { "name": "Date-wise Grouping", "category": "Resource Grouping" }, "group-by-child": { "name": "Hierarchical Grouping", "category": "Resource Grouping" }, "cell-template": { "name": "Cell", "category": "Template" }, "date-header-template": { "name": "Date Header", "category": "Template" }, "event-template": { "name": "Events", "category": "Template" }, "tooltip": { "name": "Tooltip", "category": "Template" }, "editor-validation": { "name": "Field Validation", "category": "Editor Window" }, "editor-custom-field": { "name": "Additional Fields", "category": "Editor Window" }, "editor-template": { "name": "Editor Template", "category": "Editor Window" }, "header-rows": { "name": "Header Rows", "category": "Customization" }, "time-scale": { "name": "Timescale", "category": "Customization" }, "context-menu": { "name": "Context Menu", "category": "Schedule" }, "header-bar": { "name": "Header Bar", "category": "Customization" }, "scroll-to": { "name": "Scroll Time", "category": "Customization" }, "work-days": { "name": "Work Days", "category": "Customization" }, "hide-weekend": { "name": "Hide Non-Working Days", "category": "Customization" }, "work-hours": { "name": "Work Hours", "category": "Customization" }, "start-end-hour": { "name": "Day Hour Limit", "category": "Customization" }, "cell-dimension": { "name": "Cell Dimension", "category": "Customization" }, "read-only-events": { "name": "Read-only Events", "category": "Customization" }, "excel-export": { "name": "Excel Exporting", "category": "Exporting" }, "calendar-export-import": { "name": "Export and Import ICS", "category": "Exporting" }, "print": { "name": "Print", "category": "Exporting" }, "recurrence-editor-generate-rule": { "name": "Rule Generator", "category": "Recurrence Editor" }, "recurrence-editor-populate-rule": { "name": "Populate Rule", "category": "Recurrence Editor" }, "keyboard-interaction": { "name": "Keyboard Interaction", "category": "Miscellaneous" }, "events": { "name": "Events", "category": "Miscellaneous" }, "defaultSample": "schedule/default" },
    "sidebar": { "default": { "name": "Default Functionalities", "category": "Sidebar" }, "docking-sidebar": { "name": "Dock", "category": "Sidebar" }, "api": { "name": "API", "category": "Sidebar" }, "sidebar-menu": { "name": "Sidebar Menu", "category": "Sidebar" }, "responsive-panel": { "name": "Responsive Panel", "category": "Sidebar" }, "sidebar-list": { "name": "Sidebar With ListView", "category": "Sidebar" }, "defaultSample": "sidebar/default" },
    "slider": { "default": { "name": "Default Functionalities", "category": "Range Slider" }, "ticks": { "name": "Ticks", "category": "Range Slider" }, "tooltip": { "name": "Tooltip", "category": "Range Slider" }, "orientation": { "name": "Vertical Orientation", "category": "Range Slider" }, "format": { "name": "Formatting", "category": "Range Slider" }, "limits": { "name": "Limits", "category": "Range Slider" }, "api": { "name": "API", "category": "Range Slider" }, "events": { "name": "Events", "category": "Range Slider" }, "thumb-customization": { "name": "Thumb", "category": "Customization" }, "selection-bar-customization": { "name": "Bar", "category": "Customization" }, "ticks-customization": { "name": "Ticks", "category": "Customization" }, "tooltip-customization": { "name": "Tooltip", "category": "Customization" }, "azure-pricing": { "name": "Cloud Pricing", "category": "Use Case" }, "defaultSample": "slider/default" },
    "smith-chart": { "default": { "name": "Default", "category": "Smith Chart" }, "custom": { "name": "Customization", "category": "Smith Chart" }, "print-export": { "name": "Print and Export", "category": "Smith Chart" }, "defaultSample": "smith-chart/default" },
    "sparkline": { "default": { "name": "Default", "category": "Sparkline Charts" }, "series-types": { "name": "Series Types", "category": "Sparkline Charts" }, "axis-types": { "name": "Axis Value Types", "category": "Sparkline Charts" }, "spark-grid": { "name": "Sparkline in Grid", "category": "Sparkline Charts" }, "customization": { "name": "Customization", "category": "Sparkline Charts" }, "live-update": { "name": "Live Update", "category": "Sparkline Charts" }, "range-band": { "name": "Range Band", "category": "Sparkline Charts" }, "defaultSample": "sparkline/default" },
    "splitter": { "default": { "name": "Default Functionalities", "category": "Splitter" }, "expand-and-collapse": { "name": "Expand and Collapse", "category": "Splitter" }, "accordion-navigation-menu": { "name": "Accordion Navigation Menu", "category": "Use Case" }, "details-view": { "name": "Details View", "category": "Use Case" }, "outlook-style-layout": { "name": "Outlook-style Layout", "category": "Use Case" }, "code-editor-layout": { "name": "Code Editor Layout", "category": "Use Case" }, "defaultSample": "splitter/default" },
    "spreadsheet": { "default": { "name": "Default Functionalities", "category": "Spreadsheet" }, "formula": { "name": "Formula", "category": "Spreadsheet" }, "cell-data-binding": { "name": "Cell Data Binding", "category": "Data Binding" }, "remote-data-binding": { "name": "Remote Data Binding", "category": "Data Binding" }, "cell-formatting": { "name": "Cell Formatting", "category": "Formatting" }, "number-formatting": { "name": "Number Formatting", "category": "Formatting" }, "defaultSample": "spreadsheet/default" },
    "stock-chart": { "default": { "name": "Default", "category": "Stock Chart" }, "ohlc": { "name": "OHLC", "category": "Stock Chart" }, "multi-pane": { "name": "Candlestick and volume", "category": "Stock Chart" }, "multiple-series": { "name": "Multiple Series", "category": "Stock Chart" }, "spline": { "name": "Spline", "category": "Stock Chart" }, "area": { "name": "Area", "category": "Stock Chart" }, "spline-area": { "name": "Spline Area", "category": "Stock Chart" }, "inversed-area": { "name": "Inversed Area", "category": "Stock Chart" }, "plot-line": { "name": "Plot lines", "category": "Stock Chart" }, "strip-line": { "name": "Plot band", "category": "Stock Chart" }, "period-customization": { "name": "Intraday", "category": "Stock Chart" }, "disabled-navigator": { "name": "Hide Range Selector", "category": "Stock Chart" }, "disabled-period": { "name": "Hide Period Selector", "category": "Stock Chart" }, "stock-events": { "name": "Stock Events", "category": "Stock Chart" }, "defaultSample": "stock-chart/default" },
    "tab": { "default": { "name": "Default Functionalities", "category": "Tabs" }, "orientation": { "name": "Orientation", "category": "Tabs" }, "responsive-modes": { "name": "Responsive Modes", "category": "Tabs" }, "wizard": { "name": "Wizard", "category": "Tabs" }, "defaultSample": "tab/default" },
    "textboxes": { "default": { "name": "Default Functionalities", "category": "TextBox" }, "multiline": { "name": "Multiline TextBox", "category": "TextBox" }, "defaultSample": "textboxes/default" },
    "timepicker": { "default": { "name": "Default Functionalities", "category": "TimePicker" }, "time-range": { "name": "Time Range", "category": "TimePicker" }, "time-format": { "name": "Format", "category": "TimePicker" }, "list-formatting": { "name": "Time Duration", "category": "TimePicker" }, "defaultSample": "timepicker/default" },
    "toast": { "default": { "name": "Default", "category": "Toast" }, "types": { "name": "Types", "category": "Toast" }, "templates": { "name": "Templates", "category": "Toast" }, "positions": { "name": "Positions", "category": "Toast" }, "api": { "name": "API", "category": "Toast" }, "defaultSample": "toast/default" },
    "toolbar": { "default": { "name": "Default Functionalities", "category": "Toolbar" }, "popup": { "name": "Popup", "category": "Toolbar" }, "alignment": { "name": "Alignment", "category": "Toolbar" }, "defaultSample": "toolbar/default" },
    "tooltip": { "default": { "name": "Default Functionalities", "category": "Tooltip" }, "template": { "name": "Template", "category": "Tooltip" }, "ajaxcontent": { "name": "Ajax Content", "category": "Tooltip" }, "smartposition": { "name": "Smart Positioning", "category": "Tooltip" }, "tooltip-menu": { "name": "Tooltip Menu", "category": "Tooltip" }, "html-content": { "name": "HTML Content", "category": "Tooltip" }, "api": { "name": "API", "category": "Tooltip" }, "defaultSample": "tooltip/default" },
    "treegrid": { "treegrid-overview": { "name": "Overview", "category": "Tree Grid" }, "default": { "name": "Default Functionalities", "category": "Tree Grid" }, "localdata": { "name": "Local Data", "category": "Data Binding" }, "remote-data": { "name": "Remote Data", "category": "Data Binding" }, "selfreference": { "name": "Self Reference", "category": "Data Binding" }, "columnformatting": { "name": "Column Formatting", "category": "Columns" }, "columntemplate": { "name": "Column Template", "category": "Columns" }, "reorder": { "name": "Reorder", "category": "Columns" }, "column-menu": { "name": "Column Menu", "category": "Columns" }, "cellalignment": { "name": "Cell Alignment", "category": "Columns" }, "autowrap": { "name": "AutoWrap Column Cells", "category": "Columns" }, "showhidecolumn": { "name": "Show or Hide Column", "category": "Columns" }, "header-template": { "name": "Header Template", "category": "Columns" }, "stacked-header": { "name": "Stacked Header", "category": "Columns" }, "checkbox-column": { "name": "Checkbox Column", "category": "Columns" }, "frozencolumn": { "name": "Frozen Column", "category": "Columns" }, "rowhover": { "name": "Row Hover", "category": "Rows" }, "rowheight": { "name": "Row Height", "category": "Rows" }, "row-template": { "name": "Row Template", "category": "Rows" }, "detail-template": { "name": "Detail Template", "category": "Rows" }, "drag-drop": { "name": "Drag And Drop", "category": "Rows" }, "inline-editing": { "name": "Inline Editing", "category": "Editing" }, "dialog-editing": { "name": "Dialog Editing", "category": "Editing" }, "lockrow": { "name": "Lock Row", "category": "Editing" }, "celledittype": { "name": "Cell Edit Type", "category": "Editing" }, "commandcolumn": { "name": "Command Column", "category": "Editing" }, "edittemplate": { "name": "Edit Template", "category": "Editing" }, "sorting": { "name": "Multi Sorting", "category": "Sorting" }, "sortingapi": { "name": "Sorting API", "category": "Sorting" }, "filtering": { "name": "Default Filtering", "category": "Filtering" }, "filter-menu": { "name": "Menu Filter", "category": "Filtering" }, "searching": { "name": "Search", "category": "Filtering" }, "paging": { "name": "Default Paging", "category": "Paging" }, "pagingapi": { "name": "Paging API", "category": "Paging" }, "defaultscrolling": { "name": "Default Scrolling", "category": "Scrolling" }, "virtualscrolling": { "name": "Virtual Scrolling", "category": "Scrolling" }, "selection": { "name": "Default Selection", "category": "Selection" }, "selectionapi": { "name": "Selection API", "category": "Selection" }, "checkbox-selection": { "name": "Checkbox Selection", "category": "Selection" }, "aggregate-default": { "name": "Default Aggregate", "category": "Aggregates" }, "custom-aggregate": { "name": "Custom Aggregate", "category": "Aggregates" }, "contextmenu": { "name": "Default Context Menu", "category": "Context Menu" }, "customcontextmenu": { "name": "Custom Context Menu", "category": "Context Menu" }, "export": { "name": "Default Exporting", "category": "Exporting" }, "print": { "name": "Print", "category": "Exporting" }, "conditionalformatting": { "name": "Conditional Formatting", "category": "Miscellaneous" }, "toolbar-template": { "name": "Toolbar Template", "category": "Miscellaneous" }, "events": { "name": "Events", "category": "Miscellaneous" }, "keyboard": { "name": "KeyBoard Interaction", "category": "Miscellaneous" }, "gridlines": { "name": "Grid Lines", "category": "Miscellaneous" }, "defaultSample": "treegrid/treegrid-overview" },
    "treemap": { "default": { "name": "Default Functionalities", "category": "TreeMap" }, "layout": { "name": "Layout", "category": "TreeMap" }, "drilldown": { "name": "Drilldown", "category": "TreeMap" }, "customization": { "name": "Customization", "category": "TreeMap" }, "label": { "name": "Data Label", "category": "TreeMap" }, "tooltip": { "name": "Tooltip", "category": "TreeMap" }, "election": { "name": "Legend", "category": "TreeMap" }, "color-mapping": { "name": "Color Mapping", "category": "TreeMap" }, "selection": { "name": "Selection & Highlight", "category": "TreeMap" }, "print": { "name": "Print & Export", "category": "TreeMap" }, "pie": { "name": "Treemap with Pie", "category": "TreeMap" }, "rtl": { "name": "RTL", "category": "TreeMap" }, "defaultSample": "treemap/default" },
    "treeview": { "default": { "name": "Default Functionalities", "category": "TreeView" }, "icons": { "name": "Icons and Images", "category": "TreeView" }, "check-box": { "name": "Checkbox", "category": "TreeView" }, "node-editing": { "name": "Node Editing", "category": "TreeView" }, "multiple-selection": { "name": "Multiple Selection", "category": "TreeView" }, "drag-and-drop": { "name": "Drag and Drop", "category": "TreeView" }, "template": { "name": "Template", "category": "TreeView" }, "local-data": { "name": "Local Data", "category": "Data Binding" }, "remote-data": { "name": "Remote Data", "category": "Data Binding" }, "defaultSample": "treeview/default" },
    "uploader": { "default": { "name": "Default Functionalities", "category": "File Upload" }, "chunk-upload": { "name": "Chunk Upload", "category": "File Upload" }, "custom-file-list": { "name": "Template", "category": "File Upload" }, "preload-files": { "name": "Preload files", "category": "File Upload" }, "file-validation": { "name": "File Validation", "category": "File Upload" }, "image-preview": { "name": "Image Preview", "category": "File Upload" }, "file-upload-with-forms": { "name": "Form Support", "category": "File Upload" }, "custom-drop-area": { "name": "Custom Drop Area", "category": "File Upload" }, "defaultSample": "uploader/default" }
};
exports.apiList = { "accordion/default": [{ "name": "items", "description": "<p>An array of item that is used to specify Accordion items.</p>\n", "type": "AccordionItemModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/accordion/#items" }], "accordion/ajax": [{ "name": "expandMode", "description": "<p>Specifies the options to expand single or multiple panel at a time.\nThe possible values are:</p>\n<ul>\n<li>Single: Sets to expand only one Accordion item at a time.</li>\n<li>Multiple: Sets to expand more than one Accordion item at a time.</li>\n</ul>\n", "type": "ExpandMode", "link": "//ej2.syncfusion.com/react/documentation/api/accordion/#expandmode" }, { "name": "expanding", "description": "<p>The event will be fired before the item gets collapsed/expanded.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/accordion/#expanding" }], "button/default": [{ "name": "isPrimary", "description": "<p>Allows the appearance of the Button to be enhanced and visually appealing when set to <code>true</code>.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/button/#isprimary" }, { "name": "cssClass", "description": "<p>Defines class/multiple classes separated by a space in the Button element. The Button types, styles, and\nsize can be defined by using\n<a href=\"http://ej2.syncfusion.com/documentation/button/howto.html?lang=typescript#create-a-block-button\"><code>this</code></a>.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/button/#cssclass" }, { "name": "iconCss", "description": "<p>Defines class/multiple classes separated by a space for the Button that is used to include an icon.\nButtons can also include font icon and sprite image.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/button/#iconcss" }, { "name": "isToggle", "description": "<p>Makes the Button toggle, when set to <code>true</code>. When you click it, the state changes from normal to active.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/button/#istoggle" }, { "name": "iconPosition", "description": "<p>Positions the icon before/after the text content in the Button.\nThe possible values are:</p>\n<ul>\n<li>Left: The icon will be positioned to the left of the text content.</li>\n<li>Right: The icon will be positioned to the right of the text content.</li>\n</ul>\n", "type": "IconPosition", "link": "//ej2.syncfusion.com/react/documentation/api/button/#iconposition" }, { "name": "content", "description": "<p>Defines the text <code>content</code> of the Button element.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/button/#content" }], "button/checkbox": [{ "name": "label", "description": "<p>Defines the caption for the CheckBox, that describes the purpose of the CheckBox.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/check-box/#label" }, { "name": "checked", "description": "<p>Specifies a value that indicates whether the CheckBox is <code>checked</code> or not.\nWhen set to <code>true</code>, the CheckBox will be in <code>checked</code> state.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/check-box/#checked" }, { "name": "indeterminate", "description": "<p>Specifies a value that indicates whether the CheckBox is in <code>indeterminate</code> state or not.\nWhen set to <code>true</code>, the CheckBox will be in <code>indeterminate</code> state.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/check-box/#indeterminate" }, { "name": "disabled", "description": "<p>Specifies a value that indicates whether the CheckBox is <code>disabled</code> or not.\nWhen set to <code>true</code>, the CheckBox will be in <code>disabled</code> state.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/check-box/#disabled" }, { "name": "change", "description": "<p>Triggers when the CheckBox state has been changed by user interaction.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/check-box/#change" }], "button/radio-button": [{ "name": "label", "description": "<p>Defines the caption for the RadioButton, that describes the purpose of the RadioButton.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/radio-button/#label" }, { "name": "name", "description": "<p>Defines <code>name</code> attribute for the RadioButton.\nIt is used to reference form data (RadioButton value) after a form is submitted.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/radio-button/#name" }, { "name": "value", "description": "<p>Defines <code>value</code> attribute for the RadioButton.\nIt is a form data passed to the server when submitting the form.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/radio-button/#value" }, { "name": "checked", "description": "<p>Specifies a value that indicates whether the RadioButton is <code>checked</code> or not.\nWhen set to <code>true</code>, the RadioButton will be in <code>checked</code> state.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/radio-button/#checked" }], "button/dropdown-button": [{ "name": "items", "description": "<p>Specifies action items with its properties which will be rendered as DropDownButton popup.</p>\n", "type": "ItemModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/drop-down-button/#items" }, { "name": "cssClass", "description": "<p>Defines class/multiple classes separated by a space in the DropDownButton element. The\nDropDownButton size and styles can be customized by using this.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/drop-down-button/#cssclass" }, { "name": "iconCss", "description": "<p>Defines class/multiple classes separated by a space for the DropDownButton that is used to\ninclude an icon. DropDownButton can also include font icon and sprite image.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/drop-down-button/#iconcss" }], "button/split-button": [{ "name": "items", "description": "<p>Specifies action items with its properties which will be rendered as SplitButton secondary button popup.</p>\n", "type": "ItemModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/split-button/#items" }, { "name": "content", "description": "<p>Defines the content of the SplitButton primary action button can either be a text or HTML elements.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/split-button/#content" }, { "name": "iconCss", "description": "<p>Defines class/multiple classes separated by a space for the SplitButton that is used to include an\nicon. SplitButton can also include font icon and sprite image.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/split-button/#iconcss" }, { "name": "beforeItemRender", "description": "<p>Triggers while rendering each Popup item of SplitButton.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/split-button/#beforeitemrender" }], "button/switch": [{ "name": "checked", "description": "<p>Specifies a value that indicates whether the Switch is <code>checked</code> or not.\nWhen set to <code>true</code>, the Switch will be in <code>checked</code> state.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/switch/#checked" }, { "name": "disabled", "description": "<p>Specifies a value that indicates whether the Switch is <code>disabled</code> or not.\nWhen set to <code>true</code>, the Switch will be in <code>disabled</code> state.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/switch/#disabled" }], "button/progress-button": [{ "name": "content", "description": "<p>Defines the text <code>content</code> of the progress button element.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/progress-button/#content" }, { "name": "iconCss", "description": "<p>Defines class/multiple classes separated by a space for the progress button that is used to include an icon.\nProgress button can also include font icon and sprite image.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/progress-button/#iconcss" }, { "name": "cssClass", "description": "<p>Specifies the root CSS class of the progress button that allows customization of component’s appearance.\nThe progress button types, styles, and size can be achieved by using this property.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/progress-button/#cssclass" }, { "name": "duration", "description": "<p>Specifies the duration of progression in the progress button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/progress-button/#duration" }, { "name": "disabled", "description": "<p>Enables or disables the progress button.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/progress-button/#disabled" }, { "name": "isPrimary", "description": "<p>Allows the appearance of the progress button to be enhanced and visually appealing when set to <code>true</code>.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/progress-button/#isprimary" }, { "name": "enableProgress", "description": "<p>Enables or disables the background filler UI in the progress button.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/progress-button/#enableprogress" }, { "name": "end", "description": "<p>Triggers when the progress is completed.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/progress-button/#end" }, { "name": "begin", "description": "<p>Triggers when the progress starts.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/progress-button/#begin" }, { "name": "spinSettings", "description": "<p>Specifies a spinner and its related properties.</p>\n", "type": "SpinSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/progress-button/#spinsettings" }, { "name": "animationSettings", "description": "<p>Specifies the animation settings.</p>\n", "type": "AnimationSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/progress-button/#animationsettings" }], "calendar/default": [{ "name": "change", "description": "<p>Triggers when the Calendar value is changed.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/calendar/#change" }], "colorpicker/default": [{ "name": "value", "description": "<p>It is used to set the color value for ColorPicker. It should be specified as Hex code.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/color-picker/#value" }, { "name": "disabled", "description": "<p>It is used to enable / disable ColorPicker component. If it is disabled the ColorPicker popup won’t open.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/color-picker/#disabled" }], "colorpicker/inline": [{ "name": "value", "description": "<p>It is used to set the color value for ColorPicker. It should be specified as Hex code.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/color-picker/#value" }, { "name": "mode", "description": "<p>It is used to render the ColorPicker with the specified mode.</p>\n", "type": "ColorPickerMode", "link": "//ej2.syncfusion.com/react/documentation/api/color-picker/#mode" }, { "name": "modeSwitcher", "description": "<p>It is used to show / hide the mode switcher button of ColorPicker component.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/color-picker/#modeswitcher" }, { "name": "inline", "description": "<p>It is used to render the ColorPicker component as inline.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/color-picker/#inline" }, { "name": "disabled", "description": "<p>It is used to enable / disable ColorPicker component. If it is disabled the ColorPicker popup won’t open.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/color-picker/#disabled" }], "colorpicker/custom": [{ "name": "value", "description": "<p>It is used to set the color value for ColorPicker. It should be specified as Hex code.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/color-picker/#value" }, { "name": "mode", "description": "<p>It is used to render the ColorPicker with the specified mode.</p>\n", "type": "ColorPickerMode", "link": "//ej2.syncfusion.com/react/documentation/api/color-picker/#mode" }, { "name": "modeSwitcher", "description": "<p>It is used to show / hide the mode switcher button of ColorPicker component.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/color-picker/#modeswitcher" }, { "name": "inline", "description": "<p>It is used to render the ColorPicker component as inline.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/color-picker/#inline" }, { "name": "disabled", "description": "<p>It is used to enable / disable ColorPicker component. If it is disabled the ColorPicker popup won’t open.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/color-picker/#disabled" }, { "name": "presetColors", "description": "<p>It is used to load custom colors to palette.</p>\n", "type": "Object", "link": "//ej2.syncfusion.com/react/documentation/api/color-picker/#presetcolors" }], "colorpicker/api": [{ "name": "value", "description": "<p>It is used to set the color value for ColorPicker. It should be specified as Hex code.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/color-picker/#value" }, { "name": "disabled", "description": "<p>It is used to enable / disable ColorPicker component. If it is disabled the ColorPicker popup won’t open.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/color-picker/#disabled" }, { "name": "modeSwitcher", "description": "<p>It is used to show / hide the mode switcher button of ColorPicker component.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/color-picker/#modeswitcher" }, { "name": "mode", "description": "<p>It is used to render the ColorPicker with the specified mode.</p>\n", "type": "ColorPickerMode", "link": "//ej2.syncfusion.com/react/documentation/api/color-picker/#mode" }, { "name": "showButtons", "description": "<p>It is used to show / hide the control buttons (apply / cancel) of  ColorPicker component.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/color-picker/#showbuttons" }], "contextmenu/default": [{ "name": "target", "description": "<p>Specifies target element selector in which the ContextMenu should be opened.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/context-menu/#target" }, { "name": "items", "description": "<p>Specifies menu items with its properties which will be rendered as ContextMenu.</p>\n", "type": "MenuItemModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/context-menu/#items" }, { "name": "beforeItemRender", "description": "<p>Triggers while rendering each menu item.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/context-menu/#beforeitemrender" }, { "name": "animationSettings", "description": "<p>Specifies the animation settings for the sub menu open.</p>\n", "type": "MenuAnimationSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/context-menu/#animationsettings" }], "datepicker/default": [{ "name": "placeholder", "description": "<p>Specifies the placeholder text that displayed in textbox.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/datepicker/#placeholder" }], "daterangepicker/default": [{ "name": "placeholder", "description": "<p>Specifies the placeholder text that need to be displayed in the DateRangePicker component.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/daterangepicker/#placeholder" }], "gantt/default": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "eventMarkers", "description": "<p>Defines events and status of project throughout the timeline.</p>\n", "type": "EventMarkerModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#eventmarkers" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }], "gantt/editing": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "dateFormat", "description": "<p>Specifies the dateFormat for Gantt, given format is displayed in tooltip and Grid cells.\nBy default, the format is based on the culture.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#dateformat" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "editSettings", "description": "<p>Configures edit settings of Gantt.</p>\n", "type": "EditSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#editsettings" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format</li>\n<li>CsvExport : To export in CSV format</li>\n</ul>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection" }, { "name": "gridLines", "description": "<p>Configures the grid lines in tree grid and gantt chart.</p>\n", "type": "GridLine", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#gridlines" }, { "name": "resourceNameMapping", "description": "<p>Defines mapping property to get resource name value from resource collection.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#resourcenamemapping" }, { "name": "resourceIDMapping", "description": "<p>Defines mapping property to get resource id value from resource collection.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#resourceidmapping" }, { "name": "resources", "description": "<p>Defines resource collection assigned for projects.</p>\n", "type": "Object[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#resources" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "timelineSettings", "description": "<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n", "type": "TimelineSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/selection": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/context-menu": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format</li>\n<li>CsvExport : To export in CSV format</li>\n</ul>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/exporting": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "dateFormat", "description": "<p>Specifies the dateFormat for Gantt, given format is displayed in tooltip and Grid cells.\nBy default, the format is based on the culture.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#dateformat" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format</li>\n<li>CsvExport : To export in CSV format</li>\n</ul>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection" }, { "name": "allowExcelExport", "description": "<p>If <code>allowExcelExport</code> set to true, then it will allow the user to export Gantt to Excel and CSV file.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowexcelexport" }, { "name": "gridLines", "description": "<p>Configures the grid lines in tree grid and gantt chart.</p>\n", "type": "GridLine", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#gridlines" }, { "name": "resourceNameMapping", "description": "<p>Defines mapping property to get resource name value from resource collection.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#resourcenamemapping" }, { "name": "resourceIDMapping", "description": "<p>Defines mapping property to get resource id value from resource collection.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#resourceidmapping" }, { "name": "resources", "description": "<p>Defines resource collection assigned for projects.</p>\n", "type": "Object[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#resources" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "timelineSettings", "description": "<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n", "type": "TimelineSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/filtering": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "dateFormat", "description": "<p>Specifies the dateFormat for Gantt, given format is displayed in tooltip and Grid cells.\nBy default, the format is based on the culture.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#dateformat" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "timelineSettings", "description": "<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n", "type": "TimelineSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format</li>\n<li>CsvExport : To export in CSV format</li>\n</ul>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar" }, { "name": "allowFiltering", "description": "<p>Enables or disables filtering support in Gantt.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowfiltering" }, { "name": "includeWeekend", "description": "<p>Defines weekend days are considered as working day or not.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#includeweekend" }, { "name": "timelineSettings", "description": "<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n", "type": "TimelineSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings" }, { "name": "splitterSettings", "description": "<p>Configures the splitter settings for Gantt.</p>\n", "type": "SplitterSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings" }, { "name": "durationUnit", "description": "<p><code>durationUnit</code> Specifies the duration unit for each tasks whether day or hour or minute.</p>\n<ul>\n<li><code>day</code>: Sets the duration unit as day.</li>\n<li><code>hour</code>: Sets the duration unit as hour.</li>\n<li><code>minute</code>: Sets the duration unit as minute.</li>\n</ul>\n", "type": "DurationUnit", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#durationunit" }, { "name": "dayWorkingTime", "description": "<p>Defines customized working time of project.</p>\n", "type": "DayWorkingTimeModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#dayworkingtime" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/events": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format</li>\n<li>CsvExport : To export in CSV format</li>\n</ul>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }, { "name": "toolbarClick", "description": "<p>Triggers when toolbar item was clicked.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#toolbarclick" }], "gantt/keyboard-interactions": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format</li>\n<li>CsvExport : To export in CSV format</li>\n</ul>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar" }, { "name": "allowKeyboard", "description": "<p>Enables or disables the key board interaction of Gantt.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowkeyboard" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "editSettings", "description": "<p>Configures edit settings of Gantt.</p>\n", "type": "EditSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#editsettings" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/drag-and-drop": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "editSettings", "description": "<p>Configures edit settings of Gantt.</p>\n", "type": "EditSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#editsettings" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "allowRowDragAndDrop", "description": "<p>If <code>allowRowDragAndDrop</code> set to true, then it will allow the user to perform drag and drop action in Gantt.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowrowdraganddrop" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/local-data": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/remote-data": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection" }, { "name": "gridLines", "description": "<p>Configures the grid lines in tree grid and gantt chart.</p>\n", "type": "GridLine", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#gridlines" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "timelineSettings", "description": "<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n", "type": "TimelineSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "includeWeekend", "description": "<p>Defines weekend days are considered as working day or not.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#includeweekend" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/self-reference-data": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/work-week": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "workWeek", "description": "<p>Defines workweek of project.</p>\n", "type": "string[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#workweek" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/working-time-range": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "timelineSettings", "description": "<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n", "type": "TimelineSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings" }, { "name": "dayWorkingTime", "description": "<p>Defines customized working time of project.</p>\n", "type": "DayWorkingTimeModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#dayworkingtime" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/holidays": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "holidays", "description": "<p>Defines holidays presented in project timeline.</p>\n", "type": "HolidayModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#holidays" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/resource-allocation": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "resourceIDMapping", "description": "<p>Defines mapping property to get resource id value from resource collection.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#resourceidmapping" }, { "name": "resourceNameMapping", "description": "<p>Defines mapping property to get resource name value from resource collection.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#resourcenamemapping" }, { "name": "resources", "description": "<p>Defines resource collection assigned for projects.</p>\n", "type": "Object[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#resources" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/event-markers": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "eventMarkers", "description": "<p>Defines events and status of project throughout the timeline.</p>\n", "type": "EventMarkerModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#eventmarkers" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/indicators": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/baseline": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "renderBaseline", "description": "<p>If <code>renderBaseline</code> is set to <code>true</code>, then baselines are rendered for tasks.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#renderbaseline" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection" }, { "name": "includeWeekend", "description": "<p>Defines weekend days are considered as working day or not.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#includeweekend" }, { "name": "timelineSettings", "description": "<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n", "type": "TimelineSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings" }, { "name": "tooltipSettings", "description": "<p>Enables or disables default tooltip of Gantt element and defines customized tooltip for Gantt elements.</p>\n", "type": "TooltipSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#tooltipsettings" }, { "name": "durationUnit", "description": "<p><code>durationUnit</code> Specifies the duration unit for each tasks whether day or hour or minute.</p>\n<ul>\n<li><code>day</code>: Sets the duration unit as day.</li>\n<li><code>hour</code>: Sets the duration unit as hour.</li>\n<li><code>minute</code>: Sets the duration unit as minute.</li>\n</ul>\n", "type": "DurationUnit", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#durationunit" }, { "name": "dateFormat", "description": "<p>Specifies the dateFormat for Gantt, given format is displayed in tooltip and Grid cells.\nBy default, the format is based on the culture.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#dateformat" }, { "name": "dayWorkingTime", "description": "<p>Defines customized working time of project.</p>\n", "type": "DayWorkingTimeModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#dayworkingtime" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/unscheduled-task": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "editSettings", "description": "<p>Configures edit settings of Gantt.</p>\n", "type": "EditSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#editsettings" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format</li>\n<li>CsvExport : To export in CSV format</li>\n</ul>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "allowUnscheduledTasks", "description": "<p>Enables or disables rendering of unscheduled tasks in Gantt.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowunscheduledtasks" }, { "name": "timelineSettings", "description": "<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n", "type": "TimelineSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }, { "name": "toolbarClick", "description": "<p>Triggers when toolbar item was clicked.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#toolbarclick" }, { "name": "splitterSettings", "description": "<p>Configures the splitter settings for Gantt.</p>\n", "type": "SplitterSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }], "gantt/timeline": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "resourceNameMapping", "description": "<p>Defines mapping property to get resource name value from resource collection.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#resourcenamemapping" }, { "name": "resourceIDMapping", "description": "<p>Defines mapping property to get resource id value from resource collection.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#resourceidmapping" }, { "name": "resources", "description": "<p>Defines resource collection assigned for projects.</p>\n", "type": "Object[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#resources" }, { "name": "timelineSettings", "description": "<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n", "type": "TimelineSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings" }, { "name": "splitterSettings", "description": "<p>Configures the splitter settings for Gantt.</p>\n", "type": "SplitterSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "eventMarkers", "description": "<p>Defines events and status of project throughout the timeline.</p>\n", "type": "EventMarkerModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#eventmarkers" }], "gantt/zooming": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format</li>\n<li>CsvExport : To export in CSV format</li>\n</ul>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/column-menu": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection" }, { "name": "allowFiltering", "description": "<p>Enables or disables filtering support in Gantt.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowfiltering" }, { "name": "allowSorting", "description": "<p>If <code>allowSorting</code> is set to true, it allows sorting of gantt chart tasks when column header is clicked.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowsorting" }, { "name": "showColumnMenu", "description": "<p>If <code>showColumnMenu</code> set to true, then it will enable the column menu options in each columns.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#showcolumnmenu" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "timelineSettings", "description": "<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n", "type": "TimelineSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/show-hide-column": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection" }, { "name": "allowFiltering", "description": "<p>Enables or disables filtering support in Gantt.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowfiltering" }, { "name": "allowSorting", "description": "<p>If <code>allowSorting</code> is set to true, it allows sorting of gantt chart tasks when column header is clicked.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowsorting" }, { "name": "showColumnMenu", "description": "<p>If <code>showColumnMenu</code> set to true, then it will enable the column menu options in each columns.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#showcolumnmenu" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "timelineSettings", "description": "<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n", "type": "TimelineSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/reorder": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection" }, { "name": "allowFiltering", "description": "<p>Enables or disables filtering support in Gantt.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowfiltering" }, { "name": "allowSorting", "description": "<p>If <code>allowSorting</code> is set to true, it allows sorting of gantt chart tasks when column header is clicked.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowsorting" }, { "name": "showColumnMenu", "description": "<p>If <code>showColumnMenu</code> set to true, then it will enable the column menu options in each columns.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#showcolumnmenu" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "timelineSettings", "description": "<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n", "type": "TimelineSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/resizing": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection" }, { "name": "allowFiltering", "description": "<p>Enables or disables filtering support in Gantt.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowfiltering" }, { "name": "allowSorting", "description": "<p>If <code>allowSorting</code> is set to true, it allows sorting of gantt chart tasks when column header is clicked.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowsorting" }, { "name": "showColumnMenu", "description": "<p>If <code>showColumnMenu</code> set to true, then it will enable the column menu options in each columns.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#showcolumnmenu" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "timelineSettings", "description": "<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n", "type": "TimelineSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/column-template": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection" }, { "name": "resourceNameMapping", "description": "<p>Defines mapping property to get resource name value from resource collection.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#resourcenamemapping" }, { "name": "resourceIDMapping", "description": "<p>Defines mapping property to get resource id value from resource collection.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#resourceidmapping" }, { "name": "showColumnMenu", "description": "<p>If <code>showColumnMenu</code> set to true, then it will enable the column menu options in each columns.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#showcolumnmenu" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "timelineSettings", "description": "<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n", "type": "TimelineSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/header-template": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection" }, { "name": "allowFiltering", "description": "<p>Enables or disables filtering support in Gantt.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowfiltering" }, { "name": "allowSorting", "description": "<p>If <code>allowSorting</code> is set to true, it allows sorting of gantt chart tasks when column header is clicked.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowsorting" }, { "name": "showColumnMenu", "description": "<p>If <code>showColumnMenu</code> set to true, then it will enable the column menu options in each columns.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#showcolumnmenu" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "timelineSettings", "description": "<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n", "type": "TimelineSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/taskbar-template": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "dateFormat", "description": "<p>Specifies the dateFormat for Gantt, given format is displayed in tooltip and Grid cells.\nBy default, the format is based on the culture.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#dateformat" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "rowHeight", "description": "<p>Defines height value for grid rows and chart rows in Gantt.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#rowheight" }, { "name": "taskbarHeight", "description": "<p>Defines height of taskbar element in Gantt.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskbarheight" }, { "name": "dayWorkingTime", "description": "<p>Defines customized working time of project.</p>\n", "type": "DayWorkingTimeModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#dayworkingtime" }, { "name": "durationUnit", "description": "<p><code>durationUnit</code> Specifies the duration unit for each tasks whether day or hour or minute.</p>\n<ul>\n<li><code>day</code>: Sets the duration unit as day.</li>\n<li><code>hour</code>: Sets the duration unit as hour.</li>\n<li><code>minute</code>: Sets the duration unit as minute.</li>\n</ul>\n", "type": "DurationUnit", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#durationunit" }, { "name": "eventMarkers", "description": "<p>Defines events and status of project throughout the timeline.</p>\n", "type": "EventMarkerModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#eventmarkers" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "taskbarTemplate", "description": "<p>The task bar template that renders customized child task bars from the given template.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskbartemplate" }, { "name": "milestoneTemplate", "description": "<p>The milestone template that renders customized milestone task from the given template.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#milestonetemplate" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }, { "name": "timelineSettings", "description": "<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n", "type": "TimelineSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings" }, { "name": "splitterSettings", "description": "<p>Configures the splitter settings for Gantt.</p>\n", "type": "SplitterSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "tooltipSettings", "description": "<p>Enables or disables default tooltip of Gantt element and defines customized tooltip for Gantt elements.</p>\n", "type": "TooltipSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#tooltipsettings" }], "gantt/tasklabel-template": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "rowHeight", "description": "<p>Defines height value for grid rows and chart rows in Gantt.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#rowheight" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "resourceNameMapping", "description": "<p>Defines mapping property to get resource name value from resource collection.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#resourcenamemapping" }, { "name": "resourceIDMapping", "description": "<p>Defines mapping property to get resource id value from resource collection.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#resourceidmapping" }, { "name": "resources", "description": "<p>Defines resource collection assigned for projects.</p>\n", "type": "Object[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#resources" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }, { "name": "splitterSettings", "description": "<p>Configures the splitter settings for Gantt.</p>\n", "type": "SplitterSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }], "gantt/tooltip-template": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "renderBaseline", "description": "<p>If <code>renderBaseline</code> is set to <code>true</code>, then baselines are rendered for tasks.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#renderbaseline" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "resourceNameMapping", "description": "<p>Defines mapping property to get resource name value from resource collection.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#resourcenamemapping" }, { "name": "resourceIDMapping", "description": "<p>Defines mapping property to get resource id value from resource collection.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#resourceidmapping" }, { "name": "resources", "description": "<p>Defines resource collection assigned for projects.</p>\n", "type": "Object[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#resources" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "tooltipSettings", "description": "<p>Enables or disables default tooltip of Gantt element and defines customized tooltip for Gantt elements.</p>\n", "type": "TooltipSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#tooltipsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/toolbar-template": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "allowFiltering", "description": "<p>Enables or disables filtering support in Gantt.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowfiltering" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format</li>\n<li>CsvExport : To export in CSV format</li>\n</ul>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }, { "name": "toolbarClick", "description": "<p>Triggers when toolbar item was clicked.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#toolbarclick" }], "gantt/grid-lines": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "gridLines", "description": "<p>Configures the grid lines in tree grid and gantt chart.</p>\n", "type": "GridLine", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#gridlines" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/sorting": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "splitterSettings", "description": "<p>Configures the splitter settings for Gantt.</p>\n", "type": "SplitterSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings" }, { "name": "allowSorting", "description": "<p>If <code>allowSorting</code> is set to true, it allows sorting of gantt chart tasks when column header is clicked.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowsorting" }, { "name": "sortSettings", "description": "<p>Configures the sort settings of the Gantt.</p>\n", "type": "SortSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#sortsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "gantt/sorting-api": [{ "name": "dataSource", "description": "<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n", "type": "Object[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#datasource" }, { "name": "taskFields", "description": "<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n", "type": "TaskFieldsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields" }, { "name": "columns", "description": "<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#columns" }, { "name": "treeColumnIndex", "description": "<p>To define expander column index in Grid.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex" }, { "name": "height", "description": "<p>Defines the height of the Gantt component container.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#height" }, { "name": "highlightWeekends", "description": "<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends" }, { "name": "allowSorting", "description": "<p>If <code>allowSorting</code> is set to true, it allows sorting of gantt chart tasks when column header is clicked.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#allowsorting" }, { "name": "labelSettings", "description": "<p>Defines the right, left and inner task labels in task bar.</p>\n", "type": "LabelSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings" }, { "name": "projectStartDate", "description": "<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate" }, { "name": "projectEndDate", "description": "<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n", "type": "Date|string", "link": "//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate" }], "grid/overview": [{ "name": "queryCellInfo", "description": "<p>Triggered every time a request is made to access cell information, element, or data.\nThis will be triggered before the cell element is appended to the Grid element.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#querycellinfo" }, { "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "enableVirtualization", "description": "<p>If <code>enableVirtualization</code> set to true, then the Grid will render only the rows visible within the view-port\nand load subsequent rows on vertical scrolling. This helps to load large dataset in Grid.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#enablevirtualization" }, { "name": "allowFiltering", "description": "<p>If <code>allowFiltering</code> set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter grid records with required criteria.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/filtering/\"><code>Filtering</code></a> to customize its default behavior.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowfiltering" }, { "name": "allowSorting", "description": "<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowselection" }, { "name": "selectionSettings", "description": "<p>Configures the selection settings.</p>\n", "type": "SelectionSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#selectionsettings" }, { "name": "height", "description": "<p>Defines the scrollable height of the grid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#height" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "dataBound", "description": "<p>Triggers when data source is populated in the Grid.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#databound" }, { "name": "actionComplete", "description": "<p>Triggers when Grid actions such as sorting, filtering, paging, grouping etc. are completed.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#actioncomplete" }, { "name": "load", "description": "<p>This event allows customization of Grid properties before rendering.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#load" }], "grid/default": [{ "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }], "grid/grouping": [{ "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "allowSorting", "description": "<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting" }, { "name": "groupSettings", "description": "<p>Configures the group settings.</p>\n", "type": "GroupSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#groupsettings" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "allowGrouping", "description": "<p>If <code>allowGrouping</code> set to true, then it will allow the user to dynamically group or ungroup columns.\nGrouping can be done by drag and drop columns from column header to group drop area.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/grouping/\"><code>Grouping</code></a> to customize its default behavior.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowgrouping" }], "grid/grid-lines": [{ "name": "gridLines", "description": "<p>Defines the mode of grid lines. The available modes are,</p>\n<ul>\n<li><code>Both</code>: Displays both horizontal and vertical grid lines.</li>\n<li><code>None</code>: No grid lines are displayed.</li>\n<li><code>Horizontal</code>: Displays the horizontal grid lines only.</li>\n<li><code>Vertical</code>: Displays the vertical grid lines only.</li>\n<li><code>Default</code>: Displays grid lines based on the theme.</li>\n</ul>\n", "type": "GridLine", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#gridlines" }, { "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }], "grid/hierarchy": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowSorting", "description": "<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "detailDataBound", "description": "<p>Triggers after detail row expands.</p>\n<blockquote>\n<p>This event triggers at initial expand.</p>\n</blockquote>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#detaildatabound" }, { "name": "dataBound", "description": "<p>Triggers when data source is populated in the Grid.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#databound" }, { "name": "created", "description": "<p>Triggers when the component is created.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#created" }, { "name": "childGrid", "description": "<p>Defines Grid options to render child Grid.\nIt requires the <a href=\"grid/#querystring-string\"><code>queryString</code></a> for parent\nand child relationship.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/hierarchy-grid/\"><code>Child Grid</code></a> for its configuration.</p>\n</blockquote>\n", "type": "GridModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#childgrid" }], "grid/clipboard": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#toolbar" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowselection" }, { "name": "selectionSettings", "description": "<p>Configures the selection settings.</p>\n", "type": "SelectionSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#selectionsettings" }, { "name": "toolbarClick", "description": "<p>Triggers when toolbar item is clicked.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#toolbarclick" }], "grid/context-menu": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowSorting", "description": "<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting" }, { "name": "allowGrouping", "description": "<p>If <code>allowGrouping</code> set to true, then it will allow the user to dynamically group or ungroup columns.\nGrouping can be done by drag and drop columns from column header to group drop area.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/grouping/\"><code>Grouping</code></a> to customize its default behavior.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowgrouping" }, { "name": "allowPdfExport", "description": "<p>If <code>allowPdfExport</code> set to true, then it will allow the user to export grid to Pdf file.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/pdf-export/\"><code>Pdfexport</code></a> to configure the exporting document.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpdfexport" }, { "name": "allowExcelExport", "description": "<p>If <code>allowExcelExport</code> set to true, then it will allow the user to export grid to Excel file.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/excel-exporting/\"><code>ExcelExport</code></a> to configure exporting document.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowexcelexport" }, { "name": "editSettings", "description": "<p>Configures the edit settings.</p>\n", "type": "EditSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#editsettings" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "contextMenuItems", "description": "<p><code>contextMenuItems</code> defines both built-in and custom context menu items.\n&lt;br&gt;&lt;br&gt;\nThe available built-in items are,</p>\n<ul>\n<li><code>AutoFitAll</code> - Auto fit the size of all columns.</li>\n<li><code>AutoFit</code> - Auto fit the current column.</li>\n<li><code>Group</code> - Group by current column.</li>\n<li><code>Ungroup</code> - Ungroup by current column.</li>\n<li><code>Edit</code> - Edit the current record.</li>\n<li><code>Delete</code> - Delete the current record.</li>\n<li><code>Save</code> - Save the edited record.</li>\n<li><code>Cancel</code> - Cancel the edited state.</li>\n<li><code>Copy</code> - Copy the selected records.</li>\n<li><code>PdfExport</code> - Export the grid as Pdf format.</li>\n<li><code>ExcelExport</code> - Export the grid as Excel format.</li>\n<li><code>CsvExport</code> - Export the grid as CSV format.</li>\n<li><code>SortAscending</code> - Sort the current column in ascending order.</li>\n<li><code>SortDescending</code> - Sort the current column in descending order.</li>\n<li><code>FirstPage</code> - Go to the first page.</li>\n<li><code>PrevPage</code> - Go to the previous page.</li>\n<li><code>LastPage</code> - Go to the last page.</li>\n<li><code>NextPage</code> - Go to the next page.</li>\n</ul>\n", "type": "ContextMenuItem[]|ContextMenuItemModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#contextmenuitems" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }], "grid/master-detail": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowselection" }, { "name": "rowSelected", "description": "<p>Triggers after a row is selected.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#rowselected" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }], "grid/scrolling": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "height", "description": "<p>Defines the scrollable height of the grid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#height" }, { "name": "width", "description": "<p>Defines the Grid width.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#width" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }], "grid/virtualization": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "enableVirtualization", "description": "<p>If <code>enableVirtualization</code> set to true, then the Grid will render only the rows visible within the view-port\nand load subsequent rows on vertical scrolling. This helps to load large dataset in Grid.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#enablevirtualization" }, { "name": "enableColumnVirtualization", "description": "<p>If <code>enableColumnVirtualization</code> set to true, then the Grid will render only the columns visible within the view-port\nand load subsequent columns on horizontal scrolling. This helps to load large dataset of columns in Grid.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#enablecolumnvirtualization" }, { "name": "dataBound", "description": "<p>Triggers when data source is populated in the Grid.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#databound" }, { "name": "height", "description": "<p>Defines the scrollable height of the grid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#height" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }], "grid/local-binding": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }], "grid/remote-data": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }], "grid/custom-binding": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "allowSorting", "description": "<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting" }, { "name": "allowGrouping", "description": "<p>If <code>allowGrouping</code> set to true, then it will allow the user to dynamically group or ungroup columns.\nGrouping can be done by drag and drop columns from column header to group drop area.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/grouping/\"><code>Grouping</code></a> to customize its default behavior.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowgrouping" }], "grid/auto-wrap": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "allowTextWrap", "description": "<p>If <code>allowTextWrap</code> set to true,\nthen text content will wrap to the next line when its text content exceeds the width of the Column Cells.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowtextwrap" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }], "grid/show-hide": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }], "grid/stacked-header": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }], "grid/reorder": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowReordering", "description": "<p>If <code>allowReordering</code> is set to true, Grid columns can be reordered.\nReordering can be done by drag and drop of a particular column from one index to another index.</p>\n<blockquote>\n<p>If Grid is rendered with stacked headers, reordering is allowed only at the same level as the column headers.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowreordering" }, { "name": "actionComplete", "description": "<p>Triggers when Grid actions such as sorting, filtering, paging, grouping etc. are completed.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#actioncomplete" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }], "grid/column-chooser": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "showColumnChooser", "description": "<p>If <code>showColumnChooser</code> is set to true, it allows you to dynamically show or hide columns.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/columns/#column-chooser/\"><code>ColumnChooser</code></a> for its configuration.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#showcolumnchooser" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#toolbar" }], "grid/column-resizing": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowResizing", "description": "<p>If <code>allowResizing</code> is set to true, Grid columns can be resized.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowresizing" }, { "name": "height", "description": "<p>Defines the scrollable height of the grid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#height" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }], "grid/column-spanning": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowTextWrap", "description": "<p>If <code>allowTextWrap</code> set to true,\nthen text content will wrap to the next line when its text content exceeds the width of the Column Cells.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowtextwrap" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "queryCellInfo", "description": "<p>Triggered every time a request is made to access cell information, element, or data.\nThis will be triggered before the cell element is appended to the Grid element.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#querycellinfo" }, { "name": "gridLines", "description": "<p>Defines the mode of grid lines. The available modes are,</p>\n<ul>\n<li><code>Both</code>: Displays both horizontal and vertical grid lines.</li>\n<li><code>None</code>: No grid lines are displayed.</li>\n<li><code>Horizontal</code>: Displays the horizontal grid lines only.</li>\n<li><code>Vertical</code>: Displays the vertical grid lines only.</li>\n<li><code>Default</code>: Displays grid lines based on the theme.</li>\n</ul>\n", "type": "GridLine", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#gridlines" }, { "name": "width", "description": "<p>Defines the Grid width.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#width" }, { "name": "height", "description": "<p>Defines the scrollable height of the grid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#height" }], "grid/column-template": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "width", "description": "<p>Defines the Grid width.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#width" }, { "name": "height", "description": "<p>Defines the scrollable height of the grid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#height" }], "grid/frozen-rows": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowselection" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "frozenColumns", "description": "<p>Gets or sets the number of frozen columns.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#frozencolumns" }, { "name": "frozenRows", "description": "<p>Gets or sets the number of frozen rows.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#frozenrows" }, { "name": "height", "description": "<p>Defines the scrollable height of the grid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#height" }], "grid/column-menu": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowSorting", "description": "<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting" }, { "name": "allowGrouping", "description": "<p>If <code>allowGrouping</code> set to true, then it will allow the user to dynamically group or ungroup columns.\nGrouping can be done by drag and drop columns from column header to group drop area.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/grouping/\"><code>Grouping</code></a> to customize its default behavior.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowgrouping" }, { "name": "allowFiltering", "description": "<p>If <code>allowFiltering</code> set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter grid records with required criteria.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/filtering/\"><code>Filtering</code></a> to customize its default behavior.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowfiltering" }, { "name": "showColumnMenu", "description": "<p>If <code>showColumnMenu</code> set to true, then it will enable the column menu options in each columns.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/columns/#column-menu/\"><code>Column menu</code></a> for its configuration.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#showcolumnmenu" }, { "name": "filterSettings", "description": "<p>Configures the filter settings of the Grid.</p>\n", "type": "FilterSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#filtersettings" }, { "name": "groupSettings", "description": "<p>Configures the group settings.</p>\n", "type": "GroupSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#groupsettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "allowSorting", "description": "<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting" }], "grid/foreign-key": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowSorting", "description": "<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "allowFiltering", "description": "<p>If <code>allowFiltering</code> set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter grid records with required criteria.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/filtering/\"><code>Filtering</code></a> to customize its default behavior.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowfiltering" }, { "name": "filterSettings", "description": "<p>Configures the filter settings of the Grid.</p>\n", "type": "FilterSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#filtersettings" }, { "name": "editSettings", "description": "<p>Configures the edit settings.</p>\n", "type": "EditSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#editsettings" }], "grid/row-height": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#toolbar" }, { "name": "height", "description": "<p>Defines the scrollable height of the grid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#height" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "rowHeight", "description": "<p>Defines the height of Grid rows.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#rowheight" }, { "name": "toolbarClick", "description": "<p>Triggers when toolbar item is clicked.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#toolbarclick" }], "grid/row-template": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "rowTemplate", "description": "<p>The row template that renders customized rows from the given template.\nBy default, Grid renders a table row for every data source item.</p>\n<blockquote>\n<ul>\n<li>It accepts either <a href=\"../../common/template-engine/\">template string</a> or HTML element ID.</li>\n<li>The row template must be a table row.\nCheck the <a href=\"grid/row/\"><code>Row Template</code></a> customization.</li>\n</ul>\n</blockquote>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#rowtemplate" }], "grid/detail-template": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "detailTemplate", "description": "<p>The detail template allows you to show or hide additional information about a particular row.</p>\n<blockquote>\n<p>It accepts either the <a href=\"../../common/template-engine/\">template string</a> or the HTML element ID.</p>\n</blockquote>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#detailtemplate" }, { "name": "width", "description": "<p>Defines the Grid width.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#width" }, { "name": "height", "description": "<p>Defines the scrollable height of the grid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#height" }], "grid/row-drag-drop": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "allowRowDragAndDrop", "description": "<p>If <code>allowRowDragAndDrop</code> is set to true, you can drag and drop grid rows at another grid.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowrowdraganddrop" }, { "name": "selectionSettings", "description": "<p>Configures the selection settings.</p>\n", "type": "SelectionSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#selectionsettings" }, { "name": "rowDropSettings", "description": "<p>Configures the row drop settings.</p>\n", "type": "RowDropSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#rowdropsettings" }, { "name": "width", "description": "<p>Defines the Grid width.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#width" }], "grid/drag-drop-within-grid": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "allowRowDragAndDrop", "description": "<p>If <code>allowRowDragAndDrop</code> is set to true, you can drag and drop grid rows at another grid.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowrowdraganddrop" }, { "name": "selectionSettings", "description": "<p>Configures the selection settings.</p>\n", "type": "SelectionSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#selectionsettings" }, { "name": "width", "description": "<p>Defines the Grid width.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#width" }], "grid/row-spanning": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowTextWrap", "description": "<p>If <code>allowTextWrap</code> set to true,\nthen text content will wrap to the next line when its text content exceeds the width of the Column Cells.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowtextwrap" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "queryCellInfo", "description": "<p>Triggered every time a request is made to access cell information, element, or data.\nThis will be triggered before the cell element is appended to the Grid element.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#querycellinfo" }, { "name": "gridLines", "description": "<p>Defines the mode of grid lines. The available modes are,</p>\n<ul>\n<li><code>Both</code>: Displays both horizontal and vertical grid lines.</li>\n<li><code>None</code>: No grid lines are displayed.</li>\n<li><code>Horizontal</code>: Displays the horizontal grid lines only.</li>\n<li><code>Vertical</code>: Displays the vertical grid lines only.</li>\n<li><code>Default</code>: Displays grid lines based on the theme.</li>\n</ul>\n", "type": "GridLine", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#gridlines" }, { "name": "width", "description": "<p>Defines the Grid width.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#width" }, { "name": "height", "description": "<p>Defines the scrollable height of the grid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#height" }], "grid/sorting": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowselection" }, { "name": "selectionSettings", "description": "<p>Configures the selection settings.</p>\n", "type": "SelectionSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#selectionsettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "enableHover", "description": "<p>If <code>enableHover</code> is set to true, the row hover is enabled in the Grid.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#enablehover" }], "grid/filtering": [{ "name": "allowFiltering", "description": "<p>If <code>allowFiltering</code> set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter grid records with required criteria.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/filtering/\"><code>Filtering</code></a> to customize its default behavior.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowfiltering" }, { "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }], "grid/filter-menu": [{ "name": "allowFiltering", "description": "<p>If <code>allowFiltering</code> set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter grid records with required criteria.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/filtering/\"><code>Filtering</code></a> to customize its default behavior.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowfiltering" }, { "name": "filterSettings", "description": "<p>Configures the filter settings of the Grid.</p>\n", "type": "FilterSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#filtersettings" }, { "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }], "grid/searching": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#toolbar" }], "grid/paging": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }], "grid/selection": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowselection" }, { "name": "selectionSettings", "description": "<p>Configures the selection settings.</p>\n", "type": "SelectionSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#selectionsettings" }, { "name": "enableHover", "description": "<p>If <code>enableHover</code> is set to true, the row hover is enabled in the Grid.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#enablehover" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }], "grid/selection-api": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowselection" }, { "name": "selectionSettings", "description": "<p>Configures the selection settings.</p>\n", "type": "SelectionSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#selectionsettings" }, { "name": "enableHover", "description": "<p>If <code>enableHover</code> is set to true, the row hover is enabled in the Grid.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#enablehover" }], "grid/checkbox-selection": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowselection" }, { "name": "selectionSettings", "description": "<p>Configures the selection settings.</p>\n", "type": "SelectionSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#selectionsettings" }, { "name": "enableHover", "description": "<p>If <code>enableHover</code> is set to true, the row hover is enabled in the Grid.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#enablehover" }], "grid/aggregate-default": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }], "grid/aggregate-group": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }], "grid/reactive-aggregate": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }], "grid/normal-edit": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "editSettings", "description": "<p>Configures the edit settings.</p>\n", "type": "EditSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#editsettings" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#toolbar" }], "grid/dialog-edit": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "editSettings", "description": "<p>Configures the edit settings.</p>\n", "type": "EditSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#editsettings" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#toolbar" }], "grid/dialog-template": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "editSettings", "description": "<p>Configures the edit settings.</p>\n", "type": "EditSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#editsettings" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#toolbar" }], "grid/batch": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "editSettings", "description": "<p>Configures the edit settings.</p>\n", "type": "EditSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#editsettings" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#toolbar" }], "grid/command-column": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "showColumnChooser", "description": "<p>If <code>showColumnChooser</code> is set to true, it allows you to dynamically show or hide columns.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/columns/#column-chooser/\"><code>ColumnChooser</code></a> for its configuration.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#showcolumnchooser" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#toolbar" }], "grid/default-exporting": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowExcelExport", "description": "<p>If <code>allowExcelExport</code> set to true, then it will allow the user to export grid to Excel file.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/excel-exporting/\"><code>ExcelExport</code></a> to configure exporting document.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowexcelexport" }, { "name": "allowPdfExport", "description": "<p>If <code>allowPdfExport</code> set to true, then it will allow the user to export grid to Pdf file.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/pdf-export/\"><code>Pdfexport</code></a> to configure the exporting document.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpdfexport" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#toolbar" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "groupSettings", "description": "<p>Configures the group settings.</p>\n", "type": "GroupSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#groupsettings" }, { "name": "allowGrouping", "description": "<p>If <code>allowGrouping</code> set to true, then it will allow the user to dynamically group or ungroup columns.\nGrouping can be done by drag and drop columns from column header to group drop area.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/grouping/\"><code>Grouping</code></a> to customize its default behavior.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowgrouping" }], "grid/advanced-exporting": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "allowExcelExport", "description": "<p>If <code>allowExcelExport</code> set to true, then it will allow the user to export grid to Excel file.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/excel-exporting/\"><code>ExcelExport</code></a> to configure exporting document.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowexcelexport" }, { "name": "allowPdfExport", "description": "<p>If <code>allowPdfExport</code> set to true, then it will allow the user to export grid to Pdf file.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/pdf-export/\"><code>Pdfexport</code></a> to configure the exporting document.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpdfexport" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#toolbar" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }], "grid/master-details-export": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#toolbar" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }, { "name": "childGrid", "description": "<p>Defines Grid options to render child Grid.\nIt requires the <a href=\"grid/#querystring-string\"><code>queryString</code></a> for parent\nand child relationship.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/hierarchy-grid/\"><code>Child Grid</code></a> for its configuration.</p>\n</blockquote>\n", "type": "GridModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#childgrid" }], "grid/print": [{ "name": "dataSource", "description": "<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/data/api-dataManager.html\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n", "type": "Object|DataManager|DataResult", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#datasource" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#toolbar" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the Grid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "Column[]|string[]|ColumnModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/grid/#columns" }], "heatmap/default": [{ "name": "titleSettings", "description": "<p>Title of heat map</p>\n", "type": "TitleModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings" }, { "name": "xAxis", "description": "<p>Options to configure the horizontal axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis" }, { "name": "yAxis", "description": "<p>Options to configure the vertical axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis" }, { "name": "dataSource", "description": "<p>Specifies the datasource for the heat map.</p>\n", "type": "Object", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource" }], "heatmap/calendar-heatmap": [{ "name": "titleSettings", "description": "<p>Title of heat map</p>\n", "type": "TitleModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings" }, { "name": "height", "description": "<p>The height of the heatmap as a string accepts input as both like '100px' or '100%'.\nIf specified as '100%, heatmap renders to the full height of its parent element.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#height" }, { "name": "xAxis", "description": "<p>Options to configure the horizontal axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis" }, { "name": "yAxis", "description": "<p>Options to configure the vertical axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis" }, { "name": "dataSource", "description": "<p>Specifies the datasource for the heat map.</p>\n", "type": "Object", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource" }, { "name": "paletteSettings", "description": "<p>Options for customizing the cell color of the heat map</p>\n", "type": "PaletteSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings" }, { "name": "cellSettings", "description": "<p>Options to customize the heat map cell</p>\n", "type": "CellSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings" }, { "name": "legendSettings", "description": "<p>Options for customizing the legend of the heat map</p>\n", "type": "LegendSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings" }, { "name": "tooltipRender", "description": "<p>Triggers when click the heat map cell.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#tooltiprender" }], "heatmap/bubble-types": [{ "name": "titleSettings", "description": "<p>Title of heat map</p>\n", "type": "TitleModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings" }, { "name": "xAxis", "description": "<p>Options to configure the horizontal axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis" }, { "name": "yAxis", "description": "<p>Options to configure the vertical axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis" }, { "name": "dataSource", "description": "<p>Specifies the datasource for the heat map.</p>\n", "type": "Object", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource" }], "heatmap/color-and-size-attributes": [{ "name": "titleSettings", "description": "<p>Title of heat map</p>\n", "type": "TitleModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings" }, { "name": "xAxis", "description": "<p>Options to configure the horizontal axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis" }, { "name": "yAxis", "description": "<p>Options to configure the vertical axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis" }, { "name": "dataSource", "description": "<p>Specifies the datasource for the heat map.</p>\n", "type": "Object", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource" }], "heatmap/array-row": [{ "name": "titleSettings", "description": "<p>Title of heat map</p>\n", "type": "TitleModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings" }, { "name": "xAxis", "description": "<p>Options to configure the horizontal axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis" }, { "name": "yAxis", "description": "<p>Options to configure the vertical axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis" }, { "name": "paletteSettings", "description": "<p>Options for customizing the cell color of the heat map</p>\n", "type": "PaletteSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings" }, { "name": "legendSettings", "description": "<p>Options for customizing the legend of the heat map</p>\n", "type": "LegendSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings" }, { "name": "tooltipRender", "description": "<p>Triggers when click the heat map cell.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#tooltiprender" }, { "name": "dataSource", "description": "<p>Specifies the datasource for the heat map.</p>\n", "type": "Object", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource" }], "heatmap/array-cell": [{ "name": "titleSettings", "description": "<p>Title of heat map</p>\n", "type": "TitleModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings" }, { "name": "xAxis", "description": "<p>Options to configure the horizontal axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis" }, { "name": "yAxis", "description": "<p>Options to configure the vertical axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis" }, { "name": "dataSource", "description": "<p>Specifies the datasource for the heat map.</p>\n", "type": "Object", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource" }, { "name": "cellSettings", "description": "<p>Options to customize the heat map cell</p>\n", "type": "CellSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings" }, { "name": "paletteSettings", "description": "<p>Options for customizing the cell color of the heat map</p>\n", "type": "PaletteSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings" }, { "name": "legendSettings", "description": "<p>Options for customizing the legend of the heat map</p>\n", "type": "LegendSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings" }, { "name": "tooltipRender", "description": "<p>Triggers when click the heat map cell.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#tooltiprender" }], "heatmap/row-json-binding": [{ "name": "titleSettings", "description": "<p>Title of heat map</p>\n", "type": "TitleModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings" }, { "name": "xAxis", "description": "<p>Options to configure the horizontal axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis" }, { "name": "yAxis", "description": "<p>Options to configure the vertical axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis" }, { "name": "dataSource", "description": "<p>Specifies the datasource for the heat map.</p>\n", "type": "Object", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource" }, { "name": "paletteSettings", "description": "<p>Options for customizing the cell color of the heat map</p>\n", "type": "PaletteSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings" }, { "name": "cellSettings", "description": "<p>Options to customize the heat map cell</p>\n", "type": "CellSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings" }, { "name": "tooltipRender", "description": "<p>Triggers when click the heat map cell.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#tooltiprender" }], "heatmap/cell-json-binding": [{ "name": "titleSettings", "description": "<p>Title of heat map</p>\n", "type": "TitleModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings" }, { "name": "xAxis", "description": "<p>Options to configure the horizontal axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis" }, { "name": "yAxis", "description": "<p>Options to configure the vertical axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis" }, { "name": "dataSource", "description": "<p>Specifies the datasource for the heat map.</p>\n", "type": "Object", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource" }, { "name": "cellSettings", "description": "<p>Options to customize the heat map cell</p>\n", "type": "CellSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings" }, { "name": "paletteSettings", "description": "<p>Options for customizing the cell color of the heat map</p>\n", "type": "PaletteSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings" }], "heatmap/empty-points": [{ "name": "titleSettings", "description": "<p>Title of heat map</p>\n", "type": "TitleModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings" }, { "name": "xAxis", "description": "<p>Options to configure the horizontal axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis" }, { "name": "yAxis", "description": "<p>Options to configure the vertical axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis" }, { "name": "dataSource", "description": "<p>Specifies the datasource for the heat map.</p>\n", "type": "Object", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource" }, { "name": "cellSettings", "description": "<p>Options to customize the heat map cell</p>\n", "type": "CellSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings" }, { "name": "tooltipRender", "description": "<p>Triggers when click the heat map cell.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#tooltiprender" }, { "name": "paletteSettings", "description": "<p>Options for customizing the cell color of the heat map</p>\n", "type": "PaletteSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings" }, { "name": "legendSettings", "description": "<p>Options for customizing the legend of the heat map</p>\n", "type": "LegendSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings" }], "heatmap/inversed-axis": [{ "name": "titleSettings", "description": "<p>Title of heat map</p>\n", "type": "TitleModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings" }, { "name": "xAxis", "description": "<p>Options to configure the horizontal axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis" }, { "name": "yAxis", "description": "<p>Options to configure the vertical axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis" }, { "name": "dataSource", "description": "<p>Specifies the datasource for the heat map.</p>\n", "type": "Object", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource" }, { "name": "cellSettings", "description": "<p>Options to customize the heat map cell</p>\n", "type": "CellSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings" }, { "name": "paletteSettings", "description": "<p>Options for customizing the cell color of the heat map</p>\n", "type": "PaletteSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings" }, { "name": "legendSettings", "description": "<p>Options for customizing the legend of the heat map</p>\n", "type": "LegendSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings" }], "heatmap/opposed-axis": [{ "name": "titleSettings", "description": "<p>Title of heat map</p>\n", "type": "TitleModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings" }, { "name": "xAxis", "description": "<p>Options to configure the horizontal axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis" }, { "name": "yAxis", "description": "<p>Options to configure the vertical axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis" }, { "name": "dataSource", "description": "<p>Specifies the datasource for the heat map.</p>\n", "type": "Object", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource" }, { "name": "legendSettings", "description": "<p>Options for customizing the legend of the heat map</p>\n", "type": "LegendSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings" }, { "name": "cellSettings", "description": "<p>Options to customize the heat map cell</p>\n", "type": "CellSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings" }], "heatmap/MultiLevelLabels": [{ "name": "titleSettings", "description": "<p>Title of heat map</p>\n", "type": "TitleModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings" }, { "name": "xAxis", "description": "<p>Options to configure the horizontal axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis" }, { "name": "yAxis", "description": "<p>Options to configure the vertical axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis" }, { "name": "dataSource", "description": "<p>Specifies the datasource for the heat map.</p>\n", "type": "Object", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource" }, { "name": "cellSettings", "description": "<p>Options to customize the heat map cell</p>\n", "type": "CellSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings" }, { "name": "legendSettings", "description": "<p>Options for customizing the legend of the heat map</p>\n", "type": "LegendSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings" }], "heatmap/cell-selection": [{ "name": "titleSettings", "description": "<p>Title of heat map</p>\n", "type": "TitleModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings" }, { "name": "xAxis", "description": "<p>Options to configure the horizontal axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis" }, { "name": "yAxis", "description": "<p>Options to configure the vertical axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis" }, { "name": "dataSource", "description": "<p>Specifies the datasource for the heat map.</p>\n", "type": "Object", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource" }, { "name": "cellSettings", "description": "<p>Options to customize the heat map cell</p>\n", "type": "CellSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings" }, { "name": "allowSelection", "description": "<p>Enable or disable the selection of multiple cells in heatmap</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#allowselection" }], "heatmap/legend": [{ "name": "titleSettings", "description": "<p>Title of heat map</p>\n", "type": "TitleModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings" }, { "name": "xAxis", "description": "<p>Options to configure the horizontal axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis" }, { "name": "yAxis", "description": "<p>Options to configure the vertical axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis" }, { "name": "dataSource", "description": "<p>Specifies the datasource for the heat map.</p>\n", "type": "Object", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource" }, { "name": "cellSettings", "description": "<p>Options to customize the heat map cell</p>\n", "type": "CellSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings" }, { "name": "tooltipRender", "description": "<p>Triggers when click the heat map cell.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#tooltiprender" }, { "name": "paletteSettings", "description": "<p>Options for customizing the cell color of the heat map</p>\n", "type": "PaletteSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings" }, { "name": "legendSettings", "description": "<p>Options for customizing the legend of the heat map</p>\n", "type": "LegendSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings" }], "heatmap/large-data": [{ "name": "titleSettings", "description": "<p>Title of heat map</p>\n", "type": "TitleModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings" }, { "name": "xAxis", "description": "<p>Options to configure the horizontal axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis" }, { "name": "yAxis", "description": "<p>Options to configure the vertical axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis" }, { "name": "dataSource", "description": "<p>Specifies the datasource for the heat map.</p>\n", "type": "Object", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource" }, { "name": "paletteSettings", "description": "<p>Options for customizing the cell color of the heat map</p>\n", "type": "PaletteSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings" }, { "name": "cellSettings", "description": "<p>Options to customize the heat map cell</p>\n", "type": "CellSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings" }, { "name": "legendSettings", "description": "<p>Options for customizing the legend of the heat map</p>\n", "type": "LegendSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings" }, { "name": "renderingMode", "description": "<p>Specifies the rendering mode of heat map.</p>\n<ul>\n<li>SVG - Heat map is render using SVG draw mode.</li>\n<li>Canvas - Heat map is render using Canvas draw mode.</li>\n<li>Auto - Automatically switch the draw mode based on number of records in data source.</li>\n</ul>\n", "type": "DrawType", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#renderingmode" }, { "name": "tooltipRender", "description": "<p>Triggers when click the heat map cell.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#tooltiprender" }], "heatmap/palette": [{ "name": "titleSettings", "description": "<p>Title of heat map</p>\n", "type": "TitleModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings" }, { "name": "xAxis", "description": "<p>Options to configure the horizontal axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis" }, { "name": "yAxis", "description": "<p>Options to configure the vertical axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis" }, { "name": "dataSource", "description": "<p>Specifies the datasource for the heat map.</p>\n", "type": "Object", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource" }, { "name": "paletteSettings", "description": "<p>Options for customizing the cell color of the heat map</p>\n", "type": "PaletteSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings" }, { "name": "cellSettings", "description": "<p>Options to customize the heat map cell</p>\n", "type": "CellSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings" }, { "name": "legendSettings", "description": "<p>Options for customizing the legend of the heat map</p>\n", "type": "LegendSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings" }], "heatmap/render-mode": [{ "name": "titleSettings", "description": "<p>Title of heat map</p>\n", "type": "TitleModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings" }, { "name": "xAxis", "description": "<p>Options to configure the horizontal axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis" }, { "name": "yAxis", "description": "<p>Options to configure the vertical axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis" }, { "name": "dataSource", "description": "<p>Specifies the datasource for the heat map.</p>\n", "type": "Object", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource" }, { "name": "paletteSettings", "description": "<p>Options for customizing the cell color of the heat map</p>\n", "type": "PaletteSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings" }, { "name": "renderingMode", "description": "<p>Specifies the rendering mode of heat map.</p>\n<ul>\n<li>SVG - Heat map is render using SVG draw mode.</li>\n<li>Canvas - Heat map is render using Canvas draw mode.</li>\n<li>Auto - Automatically switch the draw mode based on number of records in data source.</li>\n</ul>\n", "type": "DrawType", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#renderingmode" }, { "name": "cellSettings", "description": "<p>Options to customize the heat map cell</p>\n", "type": "CellSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings" }, { "name": "legendSettings", "description": "<p>Options for customizing the legend of the heat map</p>\n", "type": "LegendSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings" }], "heatmap/tooltip-template": [{ "name": "titleSettings", "description": "<p>Title of heat map</p>\n", "type": "TitleModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#titlesettings" }, { "name": "xAxis", "description": "<p>Options to configure the horizontal axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#xaxis" }, { "name": "yAxis", "description": "<p>Options to configure the vertical axis.</p>\n", "type": "AxisModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#yaxis" }, { "name": "dataSource", "description": "<p>Specifies the datasource for the heat map.</p>\n", "type": "Object", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#datasource" }, { "name": "cellSettings", "description": "<p>Options to customize the heat map cell</p>\n", "type": "CellSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#cellsettings" }, { "name": "legendSettings", "description": "<p>Options for customizing the legend of the heat map</p>\n", "type": "LegendSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#legendsettings" }, { "name": "paletteSettings", "description": "<p>Options for customizing the cell color of the heat map</p>\n", "type": "PaletteSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#palettesettings" }, { "name": "tooltipRender", "description": "<p>Triggers when click the heat map cell.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/heatmap/#tooltiprender" }], "inplaceeditor/default": [{ "name": "mode", "description": "<p>Specifies the mode to be render while editing. The possible modes are :</p>\n<ul>\n<li><code>Inline</code>: Editable content is displayed as inline text and ok/cancel buttons are displayed at right bottom corner of input.</li>\n<li><code>Popup</code>: Editable content and ok/cancel buttons are displayed inside popup while editing.</li>\n</ul>\n", "type": "RenderMode", "link": "//ej2.syncfusion.com/react/documentation/api/inplace-editor/#mode" }, { "name": "type", "description": "<p>Specifies the type of components that integrated with In-place editor to make it as editable.</p>\n", "type": "InputType", "link": "//ej2.syncfusion.com/react/documentation/api/inplace-editor/#type" }, { "name": "value", "description": "<p>Specifies the display value for input when original input value is empty.</p>\n", "type": "string|number|Date|string[]|Date[]|number[]", "link": "//ej2.syncfusion.com/react/documentation/api/inplace-editor/#value" }, { "name": "showButtons", "description": "<p>Used to show/hide the ok/cancel buttons of In-place editor.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/inplace-editor/#showbuttons" }, { "name": "disabled", "description": "<p>Specifies whether to enable editing mode or not.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/inplace-editor/#disabled" }], "inplaceeditor/dropdowns": [{ "name": "mode", "description": "<p>Specifies the mode to be render while editing. The possible modes are :</p>\n<ul>\n<li><code>Inline</code>: Editable content is displayed as inline text and ok/cancel buttons are displayed at right bottom corner of input.</li>\n<li><code>Popup</code>: Editable content and ok/cancel buttons are displayed inside popup while editing.</li>\n</ul>\n", "type": "RenderMode", "link": "//ej2.syncfusion.com/react/documentation/api/inplace-editor/#mode" }, { "name": "type", "description": "<p>Specifies the type of components that integrated with In-place editor to make it as editable.</p>\n", "type": "InputType", "link": "//ej2.syncfusion.com/react/documentation/api/inplace-editor/#type" }, { "name": "value", "description": "<p>Specifies the display value for input when original input value is empty.</p>\n", "type": "string|number|Date|string[]|Date[]|number[]", "link": "//ej2.syncfusion.com/react/documentation/api/inplace-editor/#value" }, { "name": "enableEditMode", "description": "<p>Specifies to show/hide the editing mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/inplace-editor/#enableeditmode" }, { "name": "model", "description": "<p>Specifies the model object configuration for the integrated components like AutoComplete, DatePicker,NumericTextBox, etc.</p>\n", "type": "AutoCompleteModel|ColorPickerModel|ComboBoxModel|DatePickerModel|DateRangePickerModel|DateTimePickerModel|DropDownListModel|MaskedTextBoxModel|MultiSelectModel|NumericTextBoxModel|RichTextEditorModel|SliderModel|TextBoxModel|TimePickerModel", "link": "//ej2.syncfusion.com/react/documentation/api/inplace-editor/#model" }], "inplaceeditor/pickers": [{ "name": "mode", "description": "<p>Specifies the mode to be render while editing. The possible modes are :</p>\n<ul>\n<li><code>Inline</code>: Editable content is displayed as inline text and ok/cancel buttons are displayed at right bottom corner of input.</li>\n<li><code>Popup</code>: Editable content and ok/cancel buttons are displayed inside popup while editing.</li>\n</ul>\n", "type": "RenderMode", "link": "//ej2.syncfusion.com/react/documentation/api/inplace-editor/#mode" }, { "name": "type", "description": "<p>Specifies the type of components that integrated with In-place editor to make it as editable.</p>\n", "type": "InputType", "link": "//ej2.syncfusion.com/react/documentation/api/inplace-editor/#type" }, { "name": "value", "description": "<p>Specifies the display value for input when original input value is empty.</p>\n", "type": "string|number|Date|string[]|Date[]|number[]", "link": "//ej2.syncfusion.com/react/documentation/api/inplace-editor/#value" }, { "name": "enableEditMode", "description": "<p>Specifies to show/hide the editing mode.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/inplace-editor/#enableeditmode" }, { "name": "model", "description": "<p>Specifies the model object configuration for the integrated components like AutoComplete, DatePicker,NumericTextBox, etc.</p>\n", "type": "AutoCompleteModel|ColorPickerModel|ComboBoxModel|DatePickerModel|DateRangePickerModel|DateTimePickerModel|DropDownListModel|MaskedTextBoxModel|MultiSelectModel|NumericTextBoxModel|RichTextEditorModel|SliderModel|TextBoxModel|TimePickerModel", "link": "//ej2.syncfusion.com/react/documentation/api/inplace-editor/#model" }], "inplaceeditor/edit-post": [{ "name": "mode", "description": "<p>Specifies the mode to be render while editing. The possible modes are :</p>\n<ul>\n<li><code>Inline</code>: Editable content is displayed as inline text and ok/cancel buttons are displayed at right bottom corner of input.</li>\n<li><code>Popup</code>: Editable content and ok/cancel buttons are displayed inside popup while editing.</li>\n</ul>\n", "type": "RenderMode", "link": "//ej2.syncfusion.com/react/documentation/api/inplace-editor/#mode" }, { "name": "type", "description": "<p>Specifies the type of components that integrated with In-place editor to make it as editable.</p>\n", "type": "InputType", "link": "//ej2.syncfusion.com/react/documentation/api/inplace-editor/#type" }, { "name": "value", "description": "<p>Specifies the display value for input when original input value is empty.</p>\n", "type": "string|number|Date|string[]|Date[]|number[]", "link": "//ej2.syncfusion.com/react/documentation/api/inplace-editor/#value" }], "listview/default": [{ "name": "dataSource", "description": "<p>It provides the data to render the ListView component which is mapped\nwith the fields of ListView.</p>\n", "type": "[]|string[]|number[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#datasource" }, { "name": "fields", "description": "<p>It is used to map keys from the dataSource which extracts the appropriate data from the dataSource\nwith specified mapped with the column fields to render the ListView.</p>\n", "type": "FieldSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#fields" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#appendto" }], "listview/remote-list": [{ "name": "dataSource", "description": "<p>It provides the data to render the ListView component which is mapped\nwith the fields of ListView.</p>\n", "type": "[]|string[]|number[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#datasource" }, { "name": "fields", "description": "<p>It is used to map keys from the dataSource which extracts the appropriate data from the dataSource\nwith specified mapped with the column fields to render the ListView.</p>\n", "type": "FieldSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#fields" }, { "name": "headerTitle", "description": "<p>It is used to set the title of ListView component.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#headertitle" }, { "name": "showHeader", "description": "<p>Using this property, we can show or hide the header of ListView component.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#showheader" }, { "name": "query", "description": "<p>It is used to fetch the specific data from dataSource by using where, select key words.\nRefer the documentation [here]\n(./data-binding#bind-to-remote-data)\nto know more about this property with demo.</p>\n", "type": "Query", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#query" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#appendto" }], "listview/check-list": [{ "name": "dataSource", "description": "<p>It provides the data to render the ListView component which is mapped\nwith the fields of ListView.</p>\n", "type": "[]|string[]|number[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#datasource" }, { "name": "fields", "description": "<p>It is used to map keys from the dataSource which extracts the appropriate data from the dataSource\nwith specified mapped with the column fields to render the ListView.</p>\n", "type": "FieldSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#fields" }, { "name": "headerTitle", "description": "<p>It is used to set the title of ListView component.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#headertitle" }, { "name": "showHeader", "description": "<p>Using this property, we can show or hide the header of ListView component.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#showheader" }, { "name": "showIcon", "description": "<p>Using this property, we can show or hide the icon of list item.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#showicon" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#appendto" }], "listview/nested-list": [{ "name": "dataSource", "description": "<p>It provides the data to render the ListView component which is mapped\nwith the fields of ListView.</p>\n", "type": "[]|string[]|number[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#datasource" }, { "name": "fields", "description": "<p>It is used to map keys from the dataSource which extracts the appropriate data from the dataSource\nwith specified mapped with the column fields to render the ListView.</p>\n", "type": "FieldSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#fields" }, { "name": "showCheckBox", "description": "<p>Using this property, we can show or hide the <code>checkbox</code>.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#showcheckbox" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#appendto" }], "listview/virtualization": [{ "name": "dataSource", "description": "<p>It provides the data to render the ListView component which is mapped\nwith the fields of ListView.</p>\n", "type": "[]|string[]|number[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#datasource" }, { "name": "fields", "description": "<p>It is used to map keys from the dataSource which extracts the appropriate data from the dataSource\nwith specified mapped with the column fields to render the ListView.</p>\n", "type": "FieldSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#fields" }, { "name": "headerTitle", "description": "<p>It is used to set the title of ListView component.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#headertitle" }, { "name": "height", "description": "<p>It is used to set the height of the ListView component.</p>\n", "type": "number|string", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#height" }, { "name": "showHeader", "description": "<p>Using this property, we can show or hide the header of ListView component.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#showheader" }, { "name": "enableVirtualization", "description": "<p>It enables UI virtualization which will increase ListView performance on loading large number of data.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#enablevirtualization" }, { "name": "actionComplete", "description": "<p>We can trigger <code>actionComplete</code> event for every ListView action success event\nwith the dataSource parameter.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#actioncomplete" }, { "name": "actionBegin", "description": "<p>We can trigger <code>actionBegin</code> event before every ListView action starts.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#actionbegin" }, { "name": "template", "description": "<p>The ListView supports to customize the content of each list items with the help of template property.\nRefer the documentation <a href=\"./listview/customizing-templates\">here</a>\nto know more about this property with demo.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#template" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#appendto" }], "listview/template": [{ "name": "dataSource", "description": "<p>It provides the data to render the ListView component which is mapped\nwith the fields of ListView.</p>\n", "type": "[]|string[]|number[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#datasource" }, { "name": "fields", "description": "<p>It is used to map keys from the dataSource which extracts the appropriate data from the dataSource\nwith specified mapped with the column fields to render the ListView.</p>\n", "type": "FieldSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#fields" }, { "name": "headerTitle", "description": "<p>It is used to set the title of ListView component.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#headertitle" }, { "name": "showHeader", "description": "<p>Using this property, we can show or hide the header of ListView component.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#showheader" }, { "name": "template", "description": "<p>The ListView supports to customize the content of each list items with the help of template property.\nRefer the documentation <a href=\"./listview/customizing-templates\">here</a>\nto know more about this property with demo.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#template" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#appendto" }], "listview/group-template": [{ "name": "dataSource", "description": "<p>It provides the data to render the ListView component which is mapped\nwith the fields of ListView.</p>\n", "type": "[]|string[]|number[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#datasource" }, { "name": "fields", "description": "<p>It is used to map keys from the dataSource which extracts the appropriate data from the dataSource\nwith specified mapped with the column fields to render the ListView.</p>\n", "type": "FieldSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#fields" }, { "name": "headerTitle", "description": "<p>It is used to set the title of ListView component.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#headertitle" }, { "name": "showHeader", "description": "<p>Using this property, we can show or hide the header of ListView component.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#showheader" }, { "name": "template", "description": "<p>The ListView supports to customize the content of each list items with the help of template property.\nRefer the documentation <a href=\"./listview/customizing-templates\">here</a>\nto know more about this property with demo.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#template" }, { "name": "groupTemplate", "description": "<p>The ListView has an option to custom design the group header title with the help of groupTemplate property.\nRefer the documentation [here]\n(./listview/customizing-templates#group-template)\nto know more about this property with demo.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#grouptemplate" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#appendto" }], "listview/call-history": [{ "name": "dataSource", "description": "<p>It provides the data to render the ListView component which is mapped\nwith the fields of ListView.</p>\n", "type": "[]|string[]|number[]|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#datasource" }, { "name": "fields", "description": "<p>It is used to map keys from the dataSource which extracts the appropriate data from the dataSource\nwith specified mapped with the column fields to render the ListView.</p>\n", "type": "FieldSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#fields" }, { "name": "select", "description": "<p>We can trigger the <code>select</code> event when we select the list item in the component.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#select" }, { "name": "showIcon", "description": "<p>Using this property, we can show or hide the icon of list item.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#showicon" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/list-view/#appendto" }], "maskedtextbox/default": [{ "name": "mask", "description": "<p>Sets a value that masks the MaskedTextBox to allow/validate the user input.</p>\n<ul>\n<li>Mask allows <a href=\"../../maskedtextbox/mask-configuration/#standard-mask-elements\"><code>standard mask elements</code></a>\n&lt;/b&gt;, &lt;b&gt;<a href=\"../../maskedtextbox/mask-configuration/#custom-characters\"><code>custom characters</code></a>&lt;/b&gt; and\n&lt;b&gt;<a href=\"../../maskedtextbox/mask-configuration/#regular-expression\"><code>regular expression</code></a>&lt;/b&gt; as mask\nelements.\nFor more information on mask, refer to\n<a href=\"../../maskedtextbox/mask-configuration/#standard-mask-elements\">mask</a>.</li>\n<li>If the mask value is empty, the MaskedTextBox will behave as an input element with text type.</li>\n</ul>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/maskedtextbox/#mask" }], "maskedtextbox/custom-mask": [{ "name": "mask", "description": "<p>Sets a value that masks the MaskedTextBox to allow/validate the user input.</p>\n<ul>\n<li>Mask allows <a href=\"../../maskedtextbox/mask-configuration/#standard-mask-elements\"><code>standard mask elements</code></a>\n&lt;/b&gt;, &lt;b&gt;<a href=\"../../maskedtextbox/mask-configuration/#custom-characters\"><code>custom characters</code></a>&lt;/b&gt; and\n&lt;b&gt;<a href=\"../../maskedtextbox/mask-configuration/#regular-expression\"><code>regular expression</code></a>&lt;/b&gt; as mask\nelements.\nFor more information on mask, refer to\n<a href=\"../../maskedtextbox/mask-configuration/#standard-mask-elements\">mask</a>.</li>\n<li>If the mask value is empty, the MaskedTextBox will behave as an input element with text type.</li>\n</ul>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/maskedtextbox/#mask" }, { "name": "customCharacters", "description": "<p>Sets the collection of values to be mapped for non-mask elements(literals)\nwhich have been set in the mask of MaskedTextBox.</p>\n<ul>\n<li>In the below example, non-mask elements &quot;P&quot; accepts values\n&quot;P&quot; , &quot;A&quot; , &quot;p&quot; , &quot;a&quot; and &quot;M&quot; accepts values &quot;M&quot;, &quot;m&quot; mentioned in the custom characters collection.\nFor more information on customCharacters, refer to\n<a href=\"../../maskedtextbox/mask-configuration/#custom-characters\">customCharacters</a>.</li>\n</ul>\n", "type": "Object", "link": "//ej2.syncfusion.com/react/documentation/api/maskedtextbox/#customcharacters" }, { "name": "floatLabelType", "description": "<p>The &lt;b&gt;&lt;a href=&quot;#placeholder&quot; target=&quot;_blank&quot;&gt;placeholder&lt;/a&gt;&lt;/b&gt; acts as a label\nand floats above the MaskedTextBox based on the below values.\nPossible values are:</p>\n<ul>\n<li>Never - The floating label will not be enable when the placeholder is available.</li>\n<li>Always - The floating label always floats above the MaskedTextBox.</li>\n<li>Auto - The floating label floats above the MaskedTextBox after focusing it or when enters the value in it.</li>\n</ul>\n", "type": "FloatLabelType", "link": "//ej2.syncfusion.com/react/documentation/api/maskedtextbox/#floatlabeltype" }], "maskedtextbox/formats": [{ "name": "mask", "description": "<p>Sets a value that masks the MaskedTextBox to allow/validate the user input.</p>\n<ul>\n<li>Mask allows <a href=\"../../maskedtextbox/mask-configuration/#standard-mask-elements\"><code>standard mask elements</code></a>\n&lt;/b&gt;, &lt;b&gt;<a href=\"../../maskedtextbox/mask-configuration/#custom-characters\"><code>custom characters</code></a>&lt;/b&gt; and\n&lt;b&gt;<a href=\"../../maskedtextbox/mask-configuration/#regular-expression\"><code>regular expression</code></a>&lt;/b&gt; as mask\nelements.\nFor more information on mask, refer to\n<a href=\"../../maskedtextbox/mask-configuration/#standard-mask-elements\">mask</a>.</li>\n<li>If the mask value is empty, the MaskedTextBox will behave as an input element with text type.</li>\n</ul>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/maskedtextbox/#mask" }, { "name": "floatLabelType", "description": "<p>The &lt;b&gt;&lt;a href=&quot;#placeholder&quot; target=&quot;_blank&quot;&gt;placeholder&lt;/a&gt;&lt;/b&gt; acts as a label\nand floats above the MaskedTextBox based on the below values.\nPossible values are:</p>\n<ul>\n<li>Never - The floating label will not be enable when the placeholder is available.</li>\n<li>Always - The floating label always floats above the MaskedTextBox.</li>\n<li>Auto - The floating label floats above the MaskedTextBox after focusing it or when enters the value in it.</li>\n</ul>\n", "type": "FloatLabelType", "link": "//ej2.syncfusion.com/react/documentation/api/maskedtextbox/#floatlabeltype" }, { "name": "change", "description": "<p>Triggers when the value of the MaskedTextBox changes.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/maskedtextbox/#change" }, { "name": "promptChar", "description": "<p>Gets or sets a value that will be shown as a prompting symbol for the masked value.\nThe symbol used to show input positions in the MaskedTextBox.\nFor more information on prompt-character, refer to\n<a href=\"../../maskedtextbox/mask-configuration/#prompt-character\">prompt-character</a>.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/maskedtextbox/#promptchar" }, { "name": "getMaskedValue", "description": "<p>Gets the value of the MaskedTextBox with the masked format.\nBy using <code>value</code> property, you can get the raw value of maskedtextbox without literals and prompt characters.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/maskedtextbox/#getmaskedvalue" }, { "name": "value", "description": "<p>Gets or sets the value of the MaskedTextBox. It is a raw value of the MaskedTextBox excluding literals\nand prompt characters. By using <code>getMaskedValue</code> property, you can get the value of MaskedTextBox with the masked format.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/maskedtextbox/#value" }], "menu/default": [{ "name": "items", "description": "<p>Specifies menu items with its properties which will be rendered as Menu.</p>\n", "type": "MenuItemModel[]|[]", "link": "//ej2.syncfusion.com/react/documentation/api/menu/#items" }, { "name": "orientation", "description": "<p>Specified the orientation of Menu whether it can be horizontal or vertical.</p>\n", "type": "Orientation", "link": "//ej2.syncfusion.com/react/documentation/api/menu/#orientation" }], "menu/data-binding": [{ "name": "items", "description": "<p>Specifies menu items with its properties which will be rendered as Menu.</p>\n", "type": "MenuItemModel[]|[]", "link": "//ej2.syncfusion.com/react/documentation/api/menu/#items" }], "menu/scrollable": [{ "name": "items", "description": "<p>Specifies menu items with its properties which will be rendered as Menu.</p>\n", "type": "MenuItemModel[]|[]", "link": "//ej2.syncfusion.com/react/documentation/api/menu/#items" }, { "name": "enableScrolling", "description": "<p>Specifies whether to enable / disable the scrollable option in Menu.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/menu/#enablescrolling" }, { "name": "cssClass", "description": "<p>Defines class/multiple classes separated by a space in the Menu wrapper.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/menu/#cssclass" }, { "name": "beforeOpen", "description": "<p>Triggers before opening the menu item.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/menu/#beforeopen" }], "menu/template": [{ "name": "items", "description": "<p>Specifies menu items with its properties which will be rendered as Menu.</p>\n", "type": "MenuItemModel[]|[]", "link": "//ej2.syncfusion.com/react/documentation/api/menu/#items" }, { "name": "fields", "description": "<p>Specifies mapping fields from the dataSource.</p>\n", "type": "FieldSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/menu/#fields" }, { "name": "template", "description": "<p>Specifies the template for Menu item.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/menu/#template" }], "menu/hamburger-mode": [{ "name": "hamburgerMode", "description": "<p>Specifies whether to enable / disable the hamburger mode in Menu.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/menu/#hamburgermode" }, { "name": "title", "description": "<p>Specifies the title text for hamburger mode in Menu.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/menu/#title" }], "menu/api": [{ "name": "orientation", "description": "<p>Specified the orientation of Menu whether it can be horizontal or vertical.</p>\n", "type": "Orientation", "link": "//ej2.syncfusion.com/react/documentation/api/menu/#orientation" }, { "name": "showItemOnClick", "description": "<p>Specifies whether to show the sub menu or not on click.\nWhen set to true, the sub menu will open only on mouse click.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/menu/#showitemonclick" }, { "name": "enableItems", "description": "<p>This method is used to enable or disable the menu items in the Menu based on the items and enable argument.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/menu/#enableitems" }], "menu/toolbar-integration": [{ "name": "items", "description": "<p>Specifies menu items with its properties which will be rendered as Menu.</p>\n", "type": "MenuItemModel[]|[]", "link": "//ej2.syncfusion.com/react/documentation/api/menu/#items" }], "numerictextbox/default": [{ "name": "value", "description": "<p>Sets the value of the NumericTextBox.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/numerictextbox/#value" }, { "name": "format", "description": "<p>Specifies the number format that indicates the display format for the value of the NumericTextBox.\nFor more information on formats, refer to\n<a href=\"../../numerictextbox/formats/#standard-formats\">formats</a>.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/numerictextbox/#format" }, { "name": "min", "description": "<p>Specifies a minimum value that is allowed a user can enter.\nFor more information on min, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">min</a>.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/numerictextbox/#min" }, { "name": "max", "description": "<p>Specifies a maximum value that is allowed a user can enter.\nFor more information on max, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">max</a>.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/numerictextbox/#max" }, { "name": "step", "description": "<p>Specifies the incremental or decremental step size for the NumericTextBox.\nFor more information on step, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">step</a>.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/numerictextbox/#step" }], "numerictextbox/range-validation": [{ "name": "value", "description": "<p>Sets the value of the NumericTextBox.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/numerictextbox/#value" }, { "name": "min", "description": "<p>Specifies a minimum value that is allowed a user can enter.\nFor more information on min, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">min</a>.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/numerictextbox/#min" }, { "name": "max", "description": "<p>Specifies a maximum value that is allowed a user can enter.\nFor more information on max, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">max</a>.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/numerictextbox/#max" }, { "name": "step", "description": "<p>Specifies the incremental or decremental step size for the NumericTextBox.\nFor more information on step, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">step</a>.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/numerictextbox/#step" }], "numerictextbox/custom-format": [{ "name": "value", "description": "<p>Sets the value of the NumericTextBox.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/numerictextbox/#value" }, { "name": "format", "description": "<p>Specifies the number format that indicates the display format for the value of the NumericTextBox.\nFor more information on formats, refer to\n<a href=\"../../numerictextbox/formats/#standard-formats\">formats</a>.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/numerictextbox/#format" }, { "name": "min", "description": "<p>Specifies a minimum value that is allowed a user can enter.\nFor more information on min, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">min</a>.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/numerictextbox/#min" }, { "name": "max", "description": "<p>Specifies a maximum value that is allowed a user can enter.\nFor more information on max, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">max</a>.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/numerictextbox/#max" }], "numerictextbox/restrict-decimals": [{ "name": "value", "description": "<p>Sets the value of the NumericTextBox.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/numerictextbox/#value" }, { "name": "format", "description": "<p>Specifies the number format that indicates the display format for the value of the NumericTextBox.\nFor more information on formats, refer to\n<a href=\"../../numerictextbox/formats/#standard-formats\">formats</a>.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/numerictextbox/#format" }, { "name": "min", "description": "<p>Specifies a minimum value that is allowed a user can enter.\nFor more information on min, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">min</a>.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/numerictextbox/#min" }, { "name": "max", "description": "<p>Specifies a maximum value that is allowed a user can enter.\nFor more information on max, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">max</a>.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/numerictextbox/#max" }, { "name": "step", "description": "<p>Specifies the incremental or decremental step size for the NumericTextBox.\nFor more information on step, refer to\n<a href=\"../../numerictextbox/getting-started/#range-validation\">step</a>.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/numerictextbox/#step" }, { "name": "decimals", "description": "<p>Specifies the number precision applied to the textbox value when the NumericTextBox is focused.\nFor more information on decimals, refer to\n<a href=\"../../numerictextbox/formats/#precision-of-numbers\">decimals</a>.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/numerictextbox/#decimals" }, { "name": "validateDecimalOnType", "description": "<p>Specifies whether the decimals length should be restricted during typing.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/numerictextbox/#validatedecimalontype" }], "pdfviewer/default": [{ "name": "serviceUrl", "description": "<p>Defines the service url of the PdfViewer control.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl" }, { "name": "documentPath", "description": "<p>Sets the PDF document path for initial loading.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath" }], "pdfviewer/custom-toolbar": [{ "name": "serviceUrl", "description": "<p>Defines the service url of the PdfViewer control.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl" }, { "name": "documentPath", "description": "<p>Sets the PDF document path for initial loading.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath" }, { "name": "documentLoad", "description": "<p>Triggers while loading document into PdfViewer.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentload" }, { "name": "pageChange", "description": "<p>Triggers when there is change in current page number.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/pdfviewer/#pagechange" }, { "name": "enableToolbar", "description": "<p>Enable or disables the toolbar of PdfViewer.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/pdfviewer/#enabletoolbar" }], "pdfviewer/right-to-left": [{ "name": "serviceUrl", "description": "<p>Defines the service url of the PdfViewer control.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl" }, { "name": "documentPath", "description": "<p>Sets the PDF document path for initial loading.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath" }, { "name": "enableRtl", "description": "<p>Enable or disable rendering component in right to left direction.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/pdfviewer/#enablertl" }], "pdfviewer/form-filling": [{ "name": "serviceUrl", "description": "<p>Defines the service url of the PdfViewer control.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl" }, { "name": "documentPath", "description": "<p>Sets the PDF document path for initial loading.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath" }], "querybuilder/default": [{ "name": "width", "description": "<p>Specifies the width of the query builder.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/query-builder/#width" }, { "name": "dataSource", "description": "<p>Binds the column name from data source in query-builder.\nThe <code>dataSource</code> is an array of JavaScript objects.</p>\n", "type": "Object[]|Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/query-builder/#datasource" }, { "name": "columns", "description": "<p>Specifies columns to create filters.</p>\n", "type": "ColumnsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/query-builder/#columns" }, { "name": "rule", "description": "<p>Defines rules in the QueryBuilder.\nSpecifies the initial rule, which is JSON data.</p>\n", "type": "RuleModel", "link": "//ej2.syncfusion.com/react/documentation/api/query-builder/#rule" }, { "name": "created", "description": "<p>Triggers when the component is created.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/query-builder/#created" }], "querybuilder/template": [{ "name": "width", "description": "<p>Specifies the width of the query builder.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/query-builder/#width" }, { "name": "columns", "description": "<p>Specifies columns to create filters.</p>\n", "type": "ColumnsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/query-builder/#columns" }, { "name": "rule", "description": "<p>Defines rules in the QueryBuilder.\nSpecifies the initial rule, which is JSON data.</p>\n", "type": "RuleModel", "link": "//ej2.syncfusion.com/react/documentation/api/query-builder/#rule" }, { "name": "ruleChange", "description": "<p>Triggers when changing the condition(AND/OR), field, value, operator is changed</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/query-builder/#rulechange" }], "querybuilder/grid": [{ "name": "width", "description": "<p>Specifies the width of the query builder.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/query-builder/#width" }, { "name": "dataSource", "description": "<p>Binds the column name from data source in query-builder.\nThe <code>dataSource</code> is an array of JavaScript objects.</p>\n", "type": "Object[]|Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/query-builder/#datasource" }, { "name": "columns", "description": "<p>Specifies columns to create filters.</p>\n", "type": "ColumnsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/query-builder/#columns" }, { "name": "rule", "description": "<p>Defines rules in the QueryBuilder.\nSpecifies the initial rule, which is JSON data.</p>\n", "type": "RuleModel", "link": "//ej2.syncfusion.com/react/documentation/api/query-builder/#rule" }, { "name": "ruleChange", "description": "<p>Triggers when changing the condition(AND/OR), field, value, operator is changed</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/query-builder/#rulechange" }], "richtexteditor/tools": [{ "name": "Inject", "description": "<p>Dynamically injects the required modules to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject" }, { "name": "toolbarSettings", "description": "<p>Specifies the group of items aligned horizontally in the toolbar as well as defined the toolbar rendering type.\nBy default, toolbar is float at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will scroll along with the page on RichTextEditor with the specified offset value.</p>\n<ul>\n<li>enable: set boolean value to show or hide the toolbar.</li>\n<li>enableFloating: Set Boolean value to enable or disable the floating toolbar.\nPreserves the toolbar at top of the RichTextEditor on scrolling.</li>\n<li>type: it has two possible options\n<ol>\n<li>Expand: Hide the overflowing toolbar items in the next row. Click the expand arrow to view overflowing toolbar items</li>\n<li>MultiRow: The toolbar overflowing items wrapped in the next row.</li>\n</ol>\n</li>\n<li>items: Specifies the array of items aligned horizontally in the toolbar.</li>\n</ul>\n<blockquote>\n<p>| and - can insert a vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Modify the default toolbar item configuration like icon class.</li>\n</ul>\n<blockquote>\n<p>By default, The toolbar is rendered with scrollable in mobile devices and does not support the toolbar type.</p>\n</blockquote>\n", "type": "ToolbarSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings" }, { "name": "showCharCount", "description": "<p>Sets Boolean value to enable or disable the display of the character counter.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#showcharcount" }, { "name": "actionBegin", "description": "<p>Triggers before command execution using toolbar items or executeCommand method.\nIf you cancel this event, the command cannot be executed.\nSet the cancel argument to true to cancel the command execution.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#actionbegin" }, { "name": "actionComplete", "description": "<p>Triggers after command execution using toolbar items or executeCommand method.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#actioncomplete" }, { "name": "maxLength", "description": "<p>Specifies the maximum number of characters allowed in the RichTextEditor component.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#maxlength" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto" }], "richtexteditor/rich-text-editor": [{ "name": "Inject", "description": "<p>Dynamically injects the required modules to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto" }], "richtexteditor/image": [{ "name": "Inject", "description": "<p>Dynamically injects the required modules to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject" }, { "name": "quickToolbarSettings", "description": "<p>Specifies the items to be rendered in quick toolbar based on the target element.</p>\n<ul>\n<li>It has following fields:</li>\n<li>enable - set boolean value to show or hide the quick toolbar</li>\n<li>actionOnScroll - it has two possible options\n<ol>\n<li>hide: The quickToolbar is closed when the parent element is scrolled.</li>\n<li>none: The quickToolbar cannot be closed even the parent element is scrolled.</li>\n</ol>\n</li>\n<li>link  - Specifies the items to be rendered in quick toolbar based on link element such as <code>Open</code>, <code>Edit</code>, and <code>UnLink</code>.</li>\n<li>image - Specifies the items to be rendered in quick toolbar based on image element such as 'Replace',\n'Align', 'Caption', 'Remove', 'InsertLink', 'Display', 'AltText', 'Dimension'.</li>\n<li>text\t - Specifies the items to be rendered in quick toolbar based on text element such as 'Cut', 'Copy', 'Paste'.</li>\n</ul>\n", "type": "QuickToolbarSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#quicktoolbarsettings" }, { "name": "toolbarClick", "description": "<p>Triggers when RichTextEditor Toolbar items is clicked.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarclick" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto" }, { "name": "getRange", "description": "<p>Get the selected range from the RichTextEditor's content.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#getrange" }], "richtexteditor/inline": [{ "name": "Inject", "description": "<p>Dynamically injects the required modules to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject" }, { "name": "inlineMode", "description": "<p>Enable or disable the inline edit mode.</p>\n<ul>\n<li>enable -  set boolean value to enable or disable the inline edit mode.</li>\n<li>onSelection - If its set to true, upon selecting the text, the toolbar is opened in inline.\nIf its set to false, upon clicking to the target element, the toolbar is opened.</li>\n</ul>\n", "type": "InlineModeModel", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inlinemode" }, { "name": "toolbarSettings", "description": "<p>Specifies the group of items aligned horizontally in the toolbar as well as defined the toolbar rendering type.\nBy default, toolbar is float at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will scroll along with the page on RichTextEditor with the specified offset value.</p>\n<ul>\n<li>enable: set boolean value to show or hide the toolbar.</li>\n<li>enableFloating: Set Boolean value to enable or disable the floating toolbar.\nPreserves the toolbar at top of the RichTextEditor on scrolling.</li>\n<li>type: it has two possible options\n<ol>\n<li>Expand: Hide the overflowing toolbar items in the next row. Click the expand arrow to view overflowing toolbar items</li>\n<li>MultiRow: The toolbar overflowing items wrapped in the next row.</li>\n</ol>\n</li>\n<li>items: Specifies the array of items aligned horizontally in the toolbar.</li>\n</ul>\n<blockquote>\n<p>| and - can insert a vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Modify the default toolbar item configuration like icon class.</li>\n</ul>\n<blockquote>\n<p>By default, The toolbar is rendered with scrollable in mobile devices and does not support the toolbar type.</p>\n</blockquote>\n", "type": "ToolbarSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings" }, { "name": "format", "description": "<p>Predefine the collection of paragraph styles along with quote and code style that populate in format dropdown from the toolbar.</p>\n", "type": "FormatModel", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#format" }, { "name": "fontFamily", "description": "<p>Predefine the font families that populate in font family dropdown list from the toolbar.</p>\n", "type": "FontFamilyModel", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#fontfamily" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto" }, { "name": "dataBind", "description": "<p>When invoked, applies the pending property changes immediately to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#databind" }], "richtexteditor/paste-cleanup": [{ "name": "Inject", "description": "<p>Dynamically injects the required modules to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject" }, { "name": "value", "description": "<p>Specifies the value displayed in the RichTextEditor's content area and it should be string.\nThe content of RichTextEditor can be loaded with dynamic data such as database, AJAX content, and more.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#value" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto" }, { "name": "pasteCleanupSettings", "description": "<p>Specifies the pasting options in RichTextEditor component and control with the following properties.</p>\n<ul>\n<li>prompt - Set boolean value to enable or disable the prompt when pasting.</li>\n<li>deniedAttrs  -  Specifies the attributes to restrict when pasting in RTE.</li>\n<li>allowedStyleProps  -  Specifies the allowed style properties when pasting in RTE.</li>\n<li>deniedTags\t -  Specifies the tags to restrict when pasting in RTE.</li>\n<li>keepFormat\t -   Set boolean value to keep or remove the from when pasting.</li>\n<li>plainText\t -   Set boolean value to paste as plain text or not.</li>\n</ul>\n", "type": "PasteCleanupSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#pastecleanupsettings" }], "richtexteditor/iframe": [{ "name": "Inject", "description": "<p>Dynamically injects the required modules to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject" }, { "name": "height", "description": "<p>Specifies the height of the RichTextEditor component.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#height" }, { "name": "iframeSettings", "description": "<p>Specifies the items to be rendered in an iframe mode, and it has the following properties.</p>\n<ul>\n<li>enable - Set Boolean value to enable, the editors content is placed in an iframe and isolated from the rest of the page.</li>\n<li>attributes - Custom style to be used inside the iframe to display content. This style is added to the iframe body.</li>\n<li>resources - we can add both styles and scripts to the iframe.\n<ol>\n<li>styles[] - An array of CSS style files to inject inside the iframe to display content</li>\n<li>scripts[] - An array of JS script files to inject inside the iframe</li>\n</ol>\n</li>\n</ul>\n", "type": "IFrameSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#iframesettings" }, { "name": "toolbarSettings", "description": "<p>Specifies the group of items aligned horizontally in the toolbar as well as defined the toolbar rendering type.\nBy default, toolbar is float at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will scroll along with the page on RichTextEditor with the specified offset value.</p>\n<ul>\n<li>enable: set boolean value to show or hide the toolbar.</li>\n<li>enableFloating: Set Boolean value to enable or disable the floating toolbar.\nPreserves the toolbar at top of the RichTextEditor on scrolling.</li>\n<li>type: it has two possible options\n<ol>\n<li>Expand: Hide the overflowing toolbar items in the next row. Click the expand arrow to view overflowing toolbar items</li>\n<li>MultiRow: The toolbar overflowing items wrapped in the next row.</li>\n</ol>\n</li>\n<li>items: Specifies the array of items aligned horizontally in the toolbar.</li>\n</ul>\n<blockquote>\n<p>| and - can insert a vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Modify the default toolbar item configuration like icon class.</li>\n</ul>\n<blockquote>\n<p>By default, The toolbar is rendered with scrollable in mobile devices and does not support the toolbar type.</p>\n</blockquote>\n", "type": "ToolbarSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings" }, { "name": "actionBegin", "description": "<p>Triggers before command execution using toolbar items or executeCommand method.\nIf you cancel this event, the command cannot be executed.\nSet the cancel argument to true to cancel the command execution.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#actionbegin" }, { "name": "actionComplete", "description": "<p>Triggers after command execution using toolbar items or executeCommand method.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#actioncomplete" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto" }], "richtexteditor/print": [{ "name": "Inject", "description": "<p>Dynamically injects the required modules to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject" }, { "name": "toolbarSettings", "description": "<p>Specifies the group of items aligned horizontally in the toolbar as well as defined the toolbar rendering type.\nBy default, toolbar is float at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will scroll along with the page on RichTextEditor with the specified offset value.</p>\n<ul>\n<li>enable: set boolean value to show or hide the toolbar.</li>\n<li>enableFloating: Set Boolean value to enable or disable the floating toolbar.\nPreserves the toolbar at top of the RichTextEditor on scrolling.</li>\n<li>type: it has two possible options\n<ol>\n<li>Expand: Hide the overflowing toolbar items in the next row. Click the expand arrow to view overflowing toolbar items</li>\n<li>MultiRow: The toolbar overflowing items wrapped in the next row.</li>\n</ol>\n</li>\n<li>items: Specifies the array of items aligned horizontally in the toolbar.</li>\n</ul>\n<blockquote>\n<p>| and - can insert a vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Modify the default toolbar item configuration like icon class.</li>\n</ul>\n<blockquote>\n<p>By default, The toolbar is rendered with scrollable in mobile devices and does not support the toolbar type.</p>\n</blockquote>\n", "type": "ToolbarSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings" }, { "name": "print", "description": "<p>By default, prints all the pages of the RichTextEditor.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#print" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto" }], "richtexteditor/ajax-load": [{ "name": "Inject", "description": "<p>Dynamically injects the required modules to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject" }, { "name": "value", "description": "<p>Specifies the value displayed in the RichTextEditor's content area and it should be string.\nThe content of RichTextEditor can be loaded with dynamic data such as database, AJAX content, and more.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#value" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto" }], "richtexteditor/resize-editor": [{ "name": "Inject", "description": "<p>Dynamically injects the required modules to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto" }, { "name": "enableResize", "description": "<p>Enables or disables the resizing option in the editor.\nIf enabled, the RichTextEditor can be resized by dragging the resize icon in the bottom right corner.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#enableresize" }], "richtexteditor/api": [{ "name": "Inject", "description": "<p>Dynamically injects the required modules to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject" }, { "name": "showCharCount", "description": "<p>Sets Boolean value to enable or disable the display of the character counter.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#showcharcount" }, { "name": "maxLength", "description": "<p>Specifies the maximum number of characters allowed in the RichTextEditor component.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#maxlength" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto" }, { "name": "readonly", "description": "<p>The user interactions on the component are disabled, when set to true.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#readonly" }, { "name": "enabled", "description": "<p>Specifies a value that indicates whether the component is enabled or not.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#enabled" }, { "name": "enableHtmlEncode", "description": "<p>specifies the value whether the source code is displayed with encoded format.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#enablehtmlencode" }, { "name": "value", "description": "<p>Specifies the value displayed in the RichTextEditor's content area and it should be string.\nThe content of RichTextEditor can be loaded with dynamic data such as database, AJAX content, and more.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#value" }, { "name": "getSelection", "description": "<p>Retrieves the HTML markup content from currently selected content of RichTextEditor.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#getselection" }, { "name": "selectAll", "description": "<p>Selects all the content in RichTextEditor</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#selectall" }], "richtexteditor/client-side-events": [{ "name": "Inject", "description": "<p>Dynamically injects the required modules to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject" }, { "name": "toolbarSettings", "description": "<p>Specifies the group of items aligned horizontally in the toolbar as well as defined the toolbar rendering type.\nBy default, toolbar is float at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will scroll along with the page on RichTextEditor with the specified offset value.</p>\n<ul>\n<li>enable: set boolean value to show or hide the toolbar.</li>\n<li>enableFloating: Set Boolean value to enable or disable the floating toolbar.\nPreserves the toolbar at top of the RichTextEditor on scrolling.</li>\n<li>type: it has two possible options\n<ol>\n<li>Expand: Hide the overflowing toolbar items in the next row. Click the expand arrow to view overflowing toolbar items</li>\n<li>MultiRow: The toolbar overflowing items wrapped in the next row.</li>\n</ol>\n</li>\n<li>items: Specifies the array of items aligned horizontally in the toolbar.</li>\n</ul>\n<blockquote>\n<p>| and - can insert a vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Modify the default toolbar item configuration like icon class.</li>\n</ul>\n<blockquote>\n<p>By default, The toolbar is rendered with scrollable in mobile devices and does not support the toolbar type.</p>\n</blockquote>\n", "type": "ToolbarSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings" }, { "name": "created", "description": "<p>Triggers when the RichTextEditor is rendered.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#created" }, { "name": "actionBegin", "description": "<p>Triggers before command execution using toolbar items or executeCommand method.\nIf you cancel this event, the command cannot be executed.\nSet the cancel argument to true to cancel the command execution.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#actionbegin" }, { "name": "actionComplete", "description": "<p>Triggers after command execution using toolbar items or executeCommand method.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#actioncomplete" }, { "name": "focus", "description": "<p>Triggers when RichTextEditor is focused in</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#focus" }, { "name": "blur", "description": "<p>Triggers when RichTextEditor is focused out.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#blur" }, { "name": "change", "description": "<p>Triggers only when RichTextEditor is blurred and changes are done to the content.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#change" }, { "name": "toolbarClick", "description": "<p>Triggers when RichTextEditor Toolbar items is clicked.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarclick" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto" }], "richtexteditor/blog-posting": [{ "name": "Inject", "description": "<p>Dynamically injects the required modules to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject" }, { "name": "placeholder", "description": "<p>Specifies the placeholder for the RichTextEditor’s content used when the RichTextEditor body is empty.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#placeholder" }, { "name": "value", "description": "<p>Specifies the value displayed in the RichTextEditor's content area and it should be string.\nThe content of RichTextEditor can be loaded with dynamic data such as database, AJAX content, and more.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#value" }, { "name": "dataBind", "description": "<p>When invoked, applies the pending property changes immediately to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#databind" }, { "name": "refresh", "description": "<p>Applies all the pending property changes and render the component again.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#refresh" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto" }], "richtexteditor/auto-save": [{ "name": "Inject", "description": "<p>Dynamically injects the required modules to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject" }, { "name": "placeholder", "description": "<p>Specifies the placeholder for the RichTextEditor’s content used when the RichTextEditor body is empty.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#placeholder" }, { "name": "saveInterval", "description": "<p>Specifies the saveInterval in milliseconds for autosave the value.\nThe change event will be triggered if the content was changed from the last saved interval.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#saveinterval" }, { "name": "toolbarSettings", "description": "<p>Specifies the group of items aligned horizontally in the toolbar as well as defined the toolbar rendering type.\nBy default, toolbar is float at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will scroll along with the page on RichTextEditor with the specified offset value.</p>\n<ul>\n<li>enable: set boolean value to show or hide the toolbar.</li>\n<li>enableFloating: Set Boolean value to enable or disable the floating toolbar.\nPreserves the toolbar at top of the RichTextEditor on scrolling.</li>\n<li>type: it has two possible options\n<ol>\n<li>Expand: Hide the overflowing toolbar items in the next row. Click the expand arrow to view overflowing toolbar items</li>\n<li>MultiRow: The toolbar overflowing items wrapped in the next row.</li>\n</ol>\n</li>\n<li>items: Specifies the array of items aligned horizontally in the toolbar.</li>\n</ul>\n<blockquote>\n<p>| and - can insert a vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Modify the default toolbar item configuration like icon class.</li>\n</ul>\n<blockquote>\n<p>By default, The toolbar is rendered with scrollable in mobile devices and does not support the toolbar type.</p>\n</blockquote>\n", "type": "ToolbarSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto" }], "richtexteditor/types": [{ "name": "Inject", "description": "<p>Dynamically injects the required modules to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject" }, { "name": "floatingToolbarOffset", "description": "<p>Preserves the toolbar at the top of the RichTextEditor on scrolling and\nspecifies the offset of the floating toolbar from documents top position</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#floatingtoolbaroffset" }, { "name": "toolbarSettings", "description": "<p>Specifies the group of items aligned horizontally in the toolbar as well as defined the toolbar rendering type.\nBy default, toolbar is float at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will scroll along with the page on RichTextEditor with the specified offset value.</p>\n<ul>\n<li>enable: set boolean value to show or hide the toolbar.</li>\n<li>enableFloating: Set Boolean value to enable or disable the floating toolbar.\nPreserves the toolbar at top of the RichTextEditor on scrolling.</li>\n<li>type: it has two possible options\n<ol>\n<li>Expand: Hide the overflowing toolbar items in the next row. Click the expand arrow to view overflowing toolbar items</li>\n<li>MultiRow: The toolbar overflowing items wrapped in the next row.</li>\n</ol>\n</li>\n<li>items: Specifies the array of items aligned horizontally in the toolbar.</li>\n</ul>\n<blockquote>\n<p>| and - can insert a vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Modify the default toolbar item configuration like icon class.</li>\n</ul>\n<blockquote>\n<p>By default, The toolbar is rendered with scrollable in mobile devices and does not support the toolbar type.</p>\n</blockquote>\n", "type": "ToolbarSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings" }, { "name": "actionBegin", "description": "<p>Triggers before command execution using toolbar items or executeCommand method.\nIf you cancel this event, the command cannot be executed.\nSet the cancel argument to true to cancel the command execution.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#actionbegin" }, { "name": "actionComplete", "description": "<p>Triggers after command execution using toolbar items or executeCommand method.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#actioncomplete" }, { "name": "dataBind", "description": "<p>When invoked, applies the pending property changes immediately to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#databind" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto" }], "richtexteditor/insert-emoticons": [{ "name": "Inject", "description": "<p>Dynamically injects the required modules to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject" }, { "name": "toolbarSettings", "description": "<p>Specifies the group of items aligned horizontally in the toolbar as well as defined the toolbar rendering type.\nBy default, toolbar is float at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will scroll along with the page on RichTextEditor with the specified offset value.</p>\n<ul>\n<li>enable: set boolean value to show or hide the toolbar.</li>\n<li>enableFloating: Set Boolean value to enable or disable the floating toolbar.\nPreserves the toolbar at top of the RichTextEditor on scrolling.</li>\n<li>type: it has two possible options\n<ol>\n<li>Expand: Hide the overflowing toolbar items in the next row. Click the expand arrow to view overflowing toolbar items</li>\n<li>MultiRow: The toolbar overflowing items wrapped in the next row.</li>\n</ol>\n</li>\n<li>items: Specifies the array of items aligned horizontally in the toolbar.</li>\n</ul>\n<blockquote>\n<p>| and - can insert a vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Modify the default toolbar item configuration like icon class.</li>\n</ul>\n<blockquote>\n<p>By default, The toolbar is rendered with scrollable in mobile devices and does not support the toolbar type.</p>\n</blockquote>\n", "type": "ToolbarSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings" }, { "name": "value", "description": "<p>Specifies the value displayed in the RichTextEditor's content area and it should be string.\nThe content of RichTextEditor can be loaded with dynamic data such as database, AJAX content, and more.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#value" }, { "name": "created", "description": "<p>Triggers when the RichTextEditor is rendered.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#created" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto" }], "richtexteditor/insert-special-characters": [{ "name": "Inject", "description": "<p>Dynamically injects the required modules to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject" }, { "name": "toolbarSettings", "description": "<p>Specifies the group of items aligned horizontally in the toolbar as well as defined the toolbar rendering type.\nBy default, toolbar is float at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will scroll along with the page on RichTextEditor with the specified offset value.</p>\n<ul>\n<li>enable: set boolean value to show or hide the toolbar.</li>\n<li>enableFloating: Set Boolean value to enable or disable the floating toolbar.\nPreserves the toolbar at top of the RichTextEditor on scrolling.</li>\n<li>type: it has two possible options\n<ol>\n<li>Expand: Hide the overflowing toolbar items in the next row. Click the expand arrow to view overflowing toolbar items</li>\n<li>MultiRow: The toolbar overflowing items wrapped in the next row.</li>\n</ol>\n</li>\n<li>items: Specifies the array of items aligned horizontally in the toolbar.</li>\n</ul>\n<blockquote>\n<p>| and - can insert a vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Modify the default toolbar item configuration like icon class.</li>\n</ul>\n<blockquote>\n<p>By default, The toolbar is rendered with scrollable in mobile devices and does not support the toolbar type.</p>\n</blockquote>\n", "type": "ToolbarSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings" }, { "name": "value", "description": "<p>Specifies the value displayed in the RichTextEditor's content area and it should be string.\nThe content of RichTextEditor can be loaded with dynamic data such as database, AJAX content, and more.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#value" }, { "name": "created", "description": "<p>Triggers when the RichTextEditor is rendered.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#created" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto" }], "richtexteditor/markdown-editor": [{ "name": "Inject", "description": "<p>Dynamically injects the required modules to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject" }, { "name": "toolbarSettings", "description": "<p>Specifies the group of items aligned horizontally in the toolbar as well as defined the toolbar rendering type.\nBy default, toolbar is float at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will scroll along with the page on RichTextEditor with the specified offset value.</p>\n<ul>\n<li>enable: set boolean value to show or hide the toolbar.</li>\n<li>enableFloating: Set Boolean value to enable or disable the floating toolbar.\nPreserves the toolbar at top of the RichTextEditor on scrolling.</li>\n<li>type: it has two possible options\n<ol>\n<li>Expand: Hide the overflowing toolbar items in the next row. Click the expand arrow to view overflowing toolbar items</li>\n<li>MultiRow: The toolbar overflowing items wrapped in the next row.</li>\n</ol>\n</li>\n<li>items: Specifies the array of items aligned horizontally in the toolbar.</li>\n</ul>\n<blockquote>\n<p>| and - can insert a vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Modify the default toolbar item configuration like icon class.</li>\n</ul>\n<blockquote>\n<p>By default, The toolbar is rendered with scrollable in mobile devices and does not support the toolbar type.</p>\n</blockquote>\n", "type": "ToolbarSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings" }, { "name": "height", "description": "<p>Specifies the height of the RichTextEditor component.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#height" }, { "name": "created", "description": "<p>Triggers when the RichTextEditor is rendered.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#created" }, { "name": "disableToolbarItem", "description": "<p>Disables the given toolbar items in the RichTextEditor component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#disabletoolbaritem" }, { "name": "enableToolbarItem", "description": "<p>Enables the give toolbar items in the RichTextEditor component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#enabletoolbaritem" }, { "name": "editorMode", "description": "<p>Specifies the editing mode of the RichTextEditor.</p>\n<ul>\n<li>\n<p><code>HTML</code> - Render RichTextEditor as HTML editor using &lt;IFRAME&gt; element or content editable &lt;div&gt; element\nor &lt;textarea&gt; element.</p>\n</li>\n<li>\n<p><code>Markdown</code> - Render RichTextEditor as markdown editor using &lt;textarea&gt;.</p>\n</li>\n</ul>\n", "type": "EditorMode", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#editormode" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto" }], "richtexteditor/markdown-editor-preview": [{ "name": "Inject", "description": "<p>Dynamically injects the required modules to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject" }, { "name": "toolbarSettings", "description": "<p>Specifies the group of items aligned horizontally in the toolbar as well as defined the toolbar rendering type.\nBy default, toolbar is float at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will scroll along with the page on RichTextEditor with the specified offset value.</p>\n<ul>\n<li>enable: set boolean value to show or hide the toolbar.</li>\n<li>enableFloating: Set Boolean value to enable or disable the floating toolbar.\nPreserves the toolbar at top of the RichTextEditor on scrolling.</li>\n<li>type: it has two possible options\n<ol>\n<li>Expand: Hide the overflowing toolbar items in the next row. Click the expand arrow to view overflowing toolbar items</li>\n<li>MultiRow: The toolbar overflowing items wrapped in the next row.</li>\n</ol>\n</li>\n<li>items: Specifies the array of items aligned horizontally in the toolbar.</li>\n</ul>\n<blockquote>\n<p>| and - can insert a vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Modify the default toolbar item configuration like icon class.</li>\n</ul>\n<blockquote>\n<p>By default, The toolbar is rendered with scrollable in mobile devices and does not support the toolbar type.</p>\n</blockquote>\n", "type": "ToolbarSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings" }, { "name": "height", "description": "<p>Specifies the height of the RichTextEditor component.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#height" }, { "name": "created", "description": "<p>Triggers when the RichTextEditor is rendered.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#created" }, { "name": "disableToolbarItem", "description": "<p>Disables the given toolbar items in the RichTextEditor component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#disabletoolbaritem" }, { "name": "enableToolbarItem", "description": "<p>Enables the give toolbar items in the RichTextEditor component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#enabletoolbaritem" }, { "name": "editorMode", "description": "<p>Specifies the editing mode of the RichTextEditor.</p>\n<ul>\n<li>\n<p><code>HTML</code> - Render RichTextEditor as HTML editor using &lt;IFRAME&gt; element or content editable &lt;div&gt; element\nor &lt;textarea&gt; element.</p>\n</li>\n<li>\n<p><code>Markdown</code> - Render RichTextEditor as markdown editor using &lt;textarea&gt;.</p>\n</li>\n</ul>\n", "type": "EditorMode", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#editormode" }, { "name": "actionBegin", "description": "<p>Triggers before command execution using toolbar items or executeCommand method.\nIf you cancel this event, the command cannot be executed.\nSet the cancel argument to true to cancel the command execution.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#actionbegin" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto" }], "richtexteditor/markdown-editor-custom-format": [{ "name": "Inject", "description": "<p>Dynamically injects the required modules to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#inject" }, { "name": "toolbarSettings", "description": "<p>Specifies the group of items aligned horizontally in the toolbar as well as defined the toolbar rendering type.\nBy default, toolbar is float at the top of the RichTextEditor.\nWhen you scroll down, the toolbar will scroll along with the page on RichTextEditor with the specified offset value.</p>\n<ul>\n<li>enable: set boolean value to show or hide the toolbar.</li>\n<li>enableFloating: Set Boolean value to enable or disable the floating toolbar.\nPreserves the toolbar at top of the RichTextEditor on scrolling.</li>\n<li>type: it has two possible options\n<ol>\n<li>Expand: Hide the overflowing toolbar items in the next row. Click the expand arrow to view overflowing toolbar items</li>\n<li>MultiRow: The toolbar overflowing items wrapped in the next row.</li>\n</ol>\n</li>\n<li>items: Specifies the array of items aligned horizontally in the toolbar.</li>\n</ul>\n<blockquote>\n<p>| and - can insert a vertical and horizontal separator lines in the toolbar.</p>\n</blockquote>\n<ul>\n<li>itemConfigs: Modify the default toolbar item configuration like icon class.</li>\n</ul>\n<blockquote>\n<p>By default, The toolbar is rendered with scrollable in mobile devices and does not support the toolbar type.</p>\n</blockquote>\n", "type": "ToolbarSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#toolbarsettings" }, { "name": "height", "description": "<p>Specifies the height of the RichTextEditor component.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#height" }, { "name": "created", "description": "<p>Triggers when the RichTextEditor is rendered.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#created" }, { "name": "disableToolbarItem", "description": "<p>Disables the given toolbar items in the RichTextEditor component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#disabletoolbaritem" }, { "name": "enableToolbarItem", "description": "<p>Enables the give toolbar items in the RichTextEditor component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#enabletoolbaritem" }, { "name": "editorMode", "description": "<p>Specifies the editing mode of the RichTextEditor.</p>\n<ul>\n<li>\n<p><code>HTML</code> - Render RichTextEditor as HTML editor using &lt;IFRAME&gt; element or content editable &lt;div&gt; element\nor &lt;textarea&gt; element.</p>\n</li>\n<li>\n<p><code>Markdown</code> - Render RichTextEditor as markdown editor using &lt;textarea&gt;.</p>\n</li>\n</ul>\n", "type": "EditorMode", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#editormode" }, { "name": "formatter", "description": "<p>Customize keyCode to change the key value.</p>\n", "type": "IFormatter", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#formatter" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#appendto" }], "richtexteditor/tribute": [{ "name": "created", "description": "<p>Triggers when the RichTextEditor is rendered.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#created" }, { "name": "placeholder", "description": "<p>Specifies the placeholder for the RichTextEditor’s content used when the RichTextEditor body is empty.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/rich-text-editor/#placeholder" }], "schedule/default": [{ "name": "height", "description": "<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.\nThe string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#height" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }], "schedule/local-data": [{ "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }], "schedule/remote-data": [{ "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }], "schedule/calendar-integration": [{ "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "dataBinding", "description": "<p>Triggers before the data binds to the scheduler.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#databinding" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }], "schedule/recurrence-events": [{ "name": "width", "description": "<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.\nThe string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#width" }, { "name": "height", "description": "<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.\nThe string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#height" }, { "name": "currentView", "description": "<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li>Day</li>\n<li>Week</li>\n<li>WorkWeek</li>\n<li>Month</li>\n<li>Agenda</li>\n<li>MonthAgenda</li>\n<li>TimelineDay</li>\n<li>TimelineWeek</li>\n<li>TimelineWorkWeek</li>\n<li>TimelineMonth</li>\n</ul>\n", "type": "View", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#currentview" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }], "schedule/block-events": [{ "name": "width", "description": "<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.\nThe string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#width" }, { "name": "height", "description": "<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.\nThe string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#height" }, { "name": "currentView", "description": "<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li>Day</li>\n<li>Week</li>\n<li>WorkWeek</li>\n<li>Month</li>\n<li>Agenda</li>\n<li>MonthAgenda</li>\n<li>TimelineDay</li>\n<li>TimelineWeek</li>\n<li>TimelineWorkWeek</li>\n<li>TimelineMonth</li>\n</ul>\n", "type": "View", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#currentview" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "group", "description": "<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n", "type": "GroupModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#group" }, { "name": "resources", "description": "<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n", "type": "ResourcesModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#resources" }], "schedule/search-events": [{ "name": "height", "description": "<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.\nThe string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#height" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }], "schedule/timezone": [{ "name": "timezone", "description": "<p>Schedule will be assigned with specific timezone, so as to display the events in it accordingly. By default,\nSchedule dates are processed with System timezone, as no timezone will be assigned specifically to the Schedule at the initial time.\nWhenever the Schedule is bound to remote data services, it is always recommended to set specific timezone to Schedule to make the\nevents on it to display on the same time irrespective of the system timezone. It usually accepts\nthe valid <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">IANA</a> timezone names.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#timezone" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "eventRendered", "description": "<p>Triggers before each of the event getting rendered on the scheduler user interface.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventrendered" }], "schedule/external-drag-drop": [{ "name": "currentView", "description": "<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li>Day</li>\n<li>Week</li>\n<li>WorkWeek</li>\n<li>Month</li>\n<li>Agenda</li>\n<li>MonthAgenda</li>\n<li>TimelineDay</li>\n<li>TimelineWeek</li>\n<li>TimelineWorkWeek</li>\n<li>TimelineMonth</li>\n</ul>\n", "type": "View", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#currentview" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "resourceHeaderTemplate", "description": "<p>Template option to customize the resource header bar. Here, the template accepts either\nthe string or HTMLElement as template design and then the parsed design is displayed onto the resource header cells.\nThe following can be accessible via template.</p>\n<ul>\n<li>resource - All the resource fields.</li>\n<li>resourceData - object collection of current resource.</li>\n</ul>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#resourceheadertemplate" }, { "name": "cssClass", "description": "<p>It is used to customize the Schedule which accepts custom CSS class names that defines specific user-defined styles and themes\nto be applied on the Schedule element.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#cssclass" }, { "name": "workHours", "description": "<p>The working hours should be highlighted on Schedule with different color shade and an additional option must be provided to\nhighlight it or not. This functionality is handled through <code>workHours</code> property and the start work hour should be 9 AM by default\nand end work hour should point to 6 PM. The start and end working hours needs to be provided as Time value of short skeleton type.</p>\n", "type": "WorkHoursModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#workhours" }, { "name": "views", "description": "<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n", "type": "View[]|ViewsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#views" }, { "name": "group", "description": "<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n", "type": "GroupModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#group" }, { "name": "resources", "description": "<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n", "type": "ResourcesModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#resources" }, { "name": "actionBegin", "description": "<p>Triggers on beginning of every scheduler action.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#actionbegin" }, { "name": "drag", "description": "<p>Triggers when an appointment is being in a dragged state.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#drag" }], "schedule/virtual-scrolling": [{ "name": "views", "description": "<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n", "type": "View[]|ViewsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#views" }, { "name": "group", "description": "<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n", "type": "GroupModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#group" }, { "name": "resources", "description": "<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n", "type": "ResourcesModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#resources" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }], "schedule/views": [{ "name": "currentView", "description": "<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li>Day</li>\n<li>Week</li>\n<li>WorkWeek</li>\n<li>Month</li>\n<li>Agenda</li>\n<li>MonthAgenda</li>\n<li>TimelineDay</li>\n<li>TimelineWeek</li>\n<li>TimelineWorkWeek</li>\n<li>TimelineMonth</li>\n</ul>\n", "type": "View", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#currentview" }, { "name": "views", "description": "<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n", "type": "View[]|ViewsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#views" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }], "schedule/timeline": [{ "name": "height", "description": "<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.\nThe string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#height" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }], "schedule/agenda": [{ "name": "agendaDaysCount", "description": "<p>Sets the number of days to be displayed by default in Agenda View and in case of virtual scrolling,\nthe number of days will be fetched on each scroll-end based on this count.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#agendadayscount" }, { "name": "hideEmptyAgendaDays", "description": "<p>The days which does not has even a single event to display will be hidden from the UI of Agenda View by default.\nWhen this property is set to <code>false</code>, the empty dates will also be displayed on the Schedule.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#hideemptyagendadays" }, { "name": "currentView", "description": "<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li>Day</li>\n<li>Week</li>\n<li>WorkWeek</li>\n<li>Month</li>\n<li>Agenda</li>\n<li>MonthAgenda</li>\n<li>TimelineDay</li>\n<li>TimelineWeek</li>\n<li>TimelineWorkWeek</li>\n<li>TimelineMonth</li>\n</ul>\n", "type": "View", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#currentview" }, { "name": "views", "description": "<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n", "type": "View[]|ViewsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#views" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }], "schedule/month-agenda": [{ "name": "currentView", "description": "<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li>Day</li>\n<li>Week</li>\n<li>WorkWeek</li>\n<li>Month</li>\n<li>Agenda</li>\n<li>MonthAgenda</li>\n<li>TimelineDay</li>\n<li>TimelineWeek</li>\n<li>TimelineWorkWeek</li>\n<li>TimelineMonth</li>\n</ul>\n", "type": "View", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#currentview" }, { "name": "views", "description": "<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n", "type": "View[]|ViewsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#views" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }], "schedule/year": [{ "name": "views", "description": "<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n", "type": "View[]|ViewsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#views" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }], "schedule/views-configuration": [{ "name": "currentView", "description": "<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li>Day</li>\n<li>Week</li>\n<li>WorkWeek</li>\n<li>Month</li>\n<li>Agenda</li>\n<li>MonthAgenda</li>\n<li>TimelineDay</li>\n<li>TimelineWeek</li>\n<li>TimelineWorkWeek</li>\n<li>TimelineMonth</li>\n</ul>\n", "type": "View", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#currentview" }, { "name": "views", "description": "<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n", "type": "View[]|ViewsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#views" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }], "schedule/extended-views": [{ "name": "currentView", "description": "<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li>Day</li>\n<li>Week</li>\n<li>WorkWeek</li>\n<li>Month</li>\n<li>Agenda</li>\n<li>MonthAgenda</li>\n<li>TimelineDay</li>\n<li>TimelineWeek</li>\n<li>TimelineWorkWeek</li>\n<li>TimelineMonth</li>\n</ul>\n", "type": "View", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#currentview" }, { "name": "views", "description": "<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n", "type": "View[]|ViewsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#views" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }], "schedule/timeline-resources": [{ "name": "currentView", "description": "<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li>Day</li>\n<li>Week</li>\n<li>WorkWeek</li>\n<li>Month</li>\n<li>Agenda</li>\n<li>MonthAgenda</li>\n<li>TimelineDay</li>\n<li>TimelineWeek</li>\n<li>TimelineWorkWeek</li>\n<li>TimelineMonth</li>\n</ul>\n", "type": "View", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#currentview" }, { "name": "views", "description": "<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n", "type": "View[]|ViewsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#views" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "resourceHeaderTemplate", "description": "<p>Template option to customize the resource header bar. Here, the template accepts either\nthe string or HTMLElement as template design and then the parsed design is displayed onto the resource header cells.\nThe following can be accessible via template.</p>\n<ul>\n<li>resource - All the resource fields.</li>\n<li>resourceData - object collection of current resource.</li>\n</ul>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#resourceheadertemplate" }], "schedule/resources": [{ "name": "currentView", "description": "<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li>Day</li>\n<li>Week</li>\n<li>WorkWeek</li>\n<li>Month</li>\n<li>Agenda</li>\n<li>MonthAgenda</li>\n<li>TimelineDay</li>\n<li>TimelineWeek</li>\n<li>TimelineWorkWeek</li>\n<li>TimelineMonth</li>\n</ul>\n", "type": "View", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#currentview" }, { "name": "views", "description": "<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n", "type": "View[]|ViewsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#views" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }], "schedule/resource": [{ "name": "height", "description": "<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.\nThe string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#height" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }], "schedule/group-editing": [{ "name": "resourceHeaderTemplate", "description": "<p>Template option to customize the resource header bar. Here, the template accepts either\nthe string or HTMLElement as template design and then the parsed design is displayed onto the resource header cells.\nThe following can be accessible via template.</p>\n<ul>\n<li>resource - All the resource fields.</li>\n<li>resourceData - object collection of current resource.</li>\n</ul>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#resourceheadertemplate" }, { "name": "group", "description": "<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n", "type": "GroupModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#group" }, { "name": "resources", "description": "<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n", "type": "ResourcesModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#resources" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }], "schedule/group-custom-work-days": [{ "name": "resourceHeaderTemplate", "description": "<p>Template option to customize the resource header bar. Here, the template accepts either\nthe string or HTMLElement as template design and then the parsed design is displayed onto the resource header cells.\nThe following can be accessible via template.</p>\n<ul>\n<li>resource - All the resource fields.</li>\n<li>resourceData - object collection of current resource.</li>\n</ul>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#resourceheadertemplate" }, { "name": "group", "description": "<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n", "type": "GroupModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#group" }, { "name": "resources", "description": "<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n", "type": "ResourcesModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#resources" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }], "schedule/add-remove-resources": [{ "name": "currentView", "description": "<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li>Day</li>\n<li>Week</li>\n<li>WorkWeek</li>\n<li>Month</li>\n<li>Agenda</li>\n<li>MonthAgenda</li>\n<li>TimelineDay</li>\n<li>TimelineWeek</li>\n<li>TimelineWorkWeek</li>\n<li>TimelineMonth</li>\n</ul>\n", "type": "View", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#currentview" }, { "name": "views", "description": "<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n", "type": "View[]|ViewsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#views" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }], "schedule/adaptive-rows": [{ "name": "rowAutoHeight", "description": "<p>when set to <code>true</code>, allows the height of the work-cells to adjust automatically\nbased on the number of appointments present in those time ranges.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#rowautoheight" }, { "name": "currentView", "description": "<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li>Day</li>\n<li>Week</li>\n<li>WorkWeek</li>\n<li>Month</li>\n<li>Agenda</li>\n<li>MonthAgenda</li>\n<li>TimelineDay</li>\n<li>TimelineWeek</li>\n<li>TimelineWorkWeek</li>\n<li>TimelineMonth</li>\n</ul>\n", "type": "View", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#currentview" }, { "name": "views", "description": "<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n", "type": "View[]|ViewsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#views" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }], "schedule/resource-grouping": [{ "name": "resourceHeaderTemplate", "description": "<p>Template option to customize the resource header bar. Here, the template accepts either\nthe string or HTMLElement as template design and then the parsed design is displayed onto the resource header cells.\nThe following can be accessible via template.</p>\n<ul>\n<li>resource - All the resource fields.</li>\n<li>resourceData - object collection of current resource.</li>\n</ul>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#resourceheadertemplate" }, { "name": "group", "description": "<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n", "type": "GroupModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#group" }, { "name": "resources", "description": "<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n", "type": "ResourcesModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#resources" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }], "schedule/timeline-resource-grouping": [{ "name": "group", "description": "<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n", "type": "GroupModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#group" }, { "name": "resources", "description": "<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n", "type": "ResourcesModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#resources" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }], "schedule/group-by-date": [{ "name": "group", "description": "<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n", "type": "GroupModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#group" }, { "name": "resources", "description": "<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n", "type": "ResourcesModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#resources" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }], "schedule/group-by-child": [{ "name": "startHour", "description": "<p>It is used to specify the starting hour, from which the Schedule starts to display. It accepts the time string in a short skeleton\nformat and also, hides the time beyond the specified start time.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#starthour" }, { "name": "endHour", "description": "<p>It is used to specify the end hour, at which the Schedule ends. It too accepts the time string in a short skeleton format.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#endhour" }, { "name": "group", "description": "<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n", "type": "GroupModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#group" }, { "name": "resources", "description": "<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n", "type": "ResourcesModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#resources" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }], "schedule/cell-template": [{ "name": "width", "description": "<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.\nThe string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#width" }, { "name": "height", "description": "<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.\nThe string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#height" }, { "name": "cellTemplate", "description": "<p>The template option which is used to render the customized work cells on the Schedule. Here, the template accepts either\nthe string or HTMLElement as template design and then the parsed design is displayed onto the work cells.\nThe fields accessible via template are as follows.</p>\n<ul>\n<li>date</li>\n<li>groupIndex</li>\n<li>type</li>\n</ul>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#celltemplate" }, { "name": "views", "description": "<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n", "type": "View[]|ViewsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#views" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }], "schedule/date-header-template": [{ "name": "cssClass", "description": "<p>It is used to customize the Schedule which accepts custom CSS class names that defines specific user-defined styles and themes\nto be applied on the Schedule element.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#cssclass" }, { "name": "dateHeaderTemplate", "description": "<p>It accepts either the string or HTMLElement as template design content and parse it appropriately before displaying it onto\nthe date header cells. The field that can be accessed via this template is <code>date</code>.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#dateheadertemplate" }, { "name": "eventRendered", "description": "<p>Triggers before each of the event getting rendered on the scheduler user interface.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventrendered" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "renderCell", "description": "<p>Triggers before each element of the schedule rendering on the page.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#rendercell" }], "schedule/event-template": [{ "name": "width", "description": "<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.\nThe string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#width" }, { "name": "height", "description": "<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.\nThe string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#height" }, { "name": "cellTemplate", "description": "<p>The template option which is used to render the customized work cells on the Schedule. Here, the template accepts either\nthe string or HTMLElement as template design and then the parsed design is displayed onto the work cells.\nThe fields accessible via template are as follows.</p>\n<ul>\n<li>date</li>\n<li>groupIndex</li>\n<li>type</li>\n</ul>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#celltemplate" }, { "name": "views", "description": "<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n", "type": "View[]|ViewsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#views" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }], "schedule/tooltip": [{ "name": "width", "description": "<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.\nThe string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#width" }, { "name": "height", "description": "<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.\nThe string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#height" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }], "schedule/editor-validation": [{ "name": "width", "description": "<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.\nThe string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#width" }, { "name": "height", "description": "<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.\nThe string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#height" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }], "schedule/editor-custom-field": [{ "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "popupOpen", "description": "<p>Triggers before any of the scheduler popups opens on the page.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#popupopen" }], "schedule/editor-template": [{ "name": "editorTemplate", "description": "<p>The template option to render the customized editor window. The form elements defined within this template should be accompanied\nwith <code>e-field</code> class, so as to fetch and process it from internally.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#editortemplate" }, { "name": "showQuickInfo", "description": "<p>When set to <code>true</code>, displays a quick popup with cell or event details on single clicking over the cells or on events.\nBy default, it is set to <code>true</code>.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#showquickinfo" }, { "name": "eventRendered", "description": "<p>Triggers before each of the event getting rendered on the scheduler user interface.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventrendered" }, { "name": "popupOpen", "description": "<p>Triggers before any of the scheduler popups opens on the page.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#popupopen" }, { "name": "actionBegin", "description": "<p>Triggers on beginning of every scheduler action.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#actionbegin" }], "schedule/header-rows": [{ "name": "height", "description": "<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.\nThe string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#height" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }, { "name": "headerRows", "description": "<p>Allows defining the collection of custom header rows to display the year, month, week, date and hour label as an individual row\non the timeline view of the scheduler.</p>\n", "type": "HeaderRowsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#headerrows" }], "schedule/time-scale": [{ "name": "width", "description": "<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.\nThe string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#width" }, { "name": "height", "description": "<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.\nThe string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#height" }, { "name": "views", "description": "<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n", "type": "View[]|ViewsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#views" }, { "name": "timeScale", "description": "<p>Allows to set different time duration on Schedule along with the customized grid count. It also has template option to\ncustomize the time slots with required time values in its own format.</p>\n", "type": "TimeScaleModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#timescale" }], "schedule/context-menu": [{ "name": "height", "description": "<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.\nThe string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#height" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }], "schedule/header-bar": [{ "name": "width", "description": "<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.\nThe string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#width" }, { "name": "height", "description": "<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.\nThe string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#height" }, { "name": "workHours", "description": "<p>The working hours should be highlighted on Schedule with different color shade and an additional option must be provided to\nhighlight it or not. This functionality is handled through <code>workHours</code> property and the start work hour should be 9 AM by default\nand end work hour should point to 6 PM. The start and end working hours needs to be provided as Time value of short skeleton type.</p>\n", "type": "WorkHoursModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#workhours" }, { "name": "views", "description": "<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n", "type": "View[]|ViewsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#views" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }], "schedule/scroll-to": [{ "name": "width", "description": "<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.\nThe string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#width" }, { "name": "height", "description": "<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.\nThe string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#height" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "eventRendered", "description": "<p>Triggers before each of the event getting rendered on the scheduler user interface.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventrendered" }, { "name": "scrollTo", "description": "<p>Scrolls the Schedule content area to the specified time.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#scrollto" }], "schedule/work-days": [{ "name": "workDays", "description": "<p>It is used to set the working days on Schedule. The only days that are defined in this collection will be rendered on the <code>workWeek</code>\nview whereas on other views, it will display all the usual days and simply highlights the working days with different shade.</p>\n", "type": "number[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#workdays" }, { "name": "views", "description": "<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n", "type": "View[]|ViewsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#views" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }], "schedule/hide-weekend": [{ "name": "showWeekend", "description": "<p>When set to <code>false</code>, it hides the weekend days of a week from the Schedule. The days which are not defined in the working days\ncollection are usually treated as weekend days.\nNote: By default, this option is not applicable on <code>Work Week</code> view.\nFor example, if the working days are defined as [1, 2, 3, 4], then the remaining days of that week will be considered as\nthe weekend days and will be hidden on all the views.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#showweekend" }], "schedule/work-hours": [{ "name": "workHours", "description": "<p>The working hours should be highlighted on Schedule with different color shade and an additional option must be provided to\nhighlight it or not. This functionality is handled through <code>workHours</code> property and the start work hour should be 9 AM by default\nand end work hour should point to 6 PM. The start and end working hours needs to be provided as Time value of short skeleton type.</p>\n", "type": "WorkHoursModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#workhours" }, { "name": "views", "description": "<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n", "type": "View[]|ViewsModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#views" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }], "schedule/start-end-hour": [{ "name": "startHour", "description": "<p>It is used to specify the starting hour, from which the Schedule starts to display. It accepts the time string in a short skeleton\nformat and also, hides the time beyond the specified start time.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#starthour" }, { "name": "endHour", "description": "<p>It is used to specify the end hour, at which the Schedule ends. It too accepts the time string in a short skeleton format.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#endhour" }, { "name": "workHours", "description": "<p>The working hours should be highlighted on Schedule with different color shade and an additional option must be provided to\nhighlight it or not. This functionality is handled through <code>workHours</code> property and the start work hour should be 9 AM by default\nand end work hour should point to 6 PM. The start and end working hours needs to be provided as Time value of short skeleton type.</p>\n", "type": "WorkHoursModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#workhours" }, { "name": "eventRendered", "description": "<p>Triggers before each of the event getting rendered on the scheduler user interface.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventrendered" }], "schedule/cell-dimension": [{ "name": "cssClass", "description": "<p>It is used to customize the Schedule which accepts custom CSS class names that defines specific user-defined styles and themes\nto be applied on the Schedule element.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#cssclass" }, { "name": "showTimeIndicator", "description": "<p>When set to <code>false</code>, hides the current time indicator from the Schedule. Otherwise,\nit visually depicts the live current system time appropriately on the user interface.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#showtimeindicator" }, { "name": "eventRendered", "description": "<p>Triggers before each of the event getting rendered on the scheduler user interface.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventrendered" }, { "name": "created", "description": "<p>Triggers after the scheduler component is created.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#created" }, { "name": "actionComplete", "description": "<p>Triggers on successful completion of the scheduler actions.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#actioncomplete" }], "schedule/read-only-events": [{ "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "eventRendered", "description": "<p>Triggers before each of the event getting rendered on the scheduler user interface.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventrendered" }, { "name": "eventClick", "description": "<p>Triggers when the events are single clicked or on single tapping the events on the mobile devices.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventclick" }, { "name": "popupOpen", "description": "<p>Triggers before any of the scheduler popups opens on the page.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#popupopen" }, { "name": "eventRendered", "description": "<p>Triggers before each of the event getting rendered on the scheduler user interface.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventrendered" }], "schedule/excel-export": [{ "name": "height", "description": "<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.\nThe string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#height" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }], "schedule/calendar-export-import": [{ "name": "importICalendar", "description": "<p>Imports the events from an .ics file downloaded from any of the calendars like Google or Outlook into the Scheduler.\nThis method accepts the blob object of an .ics file to be imported as a mandatory argument.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#importicalendar" }, { "name": "exportToICalendar", "description": "<p>Exports the Scheduler events to a calendar (.ics) file. By default, the calendar is exported with a file name <code>Calendar.ics</code>.\nTo change this file name on export, pass the custom string value as <code>fileName</code> to get the file downloaded with this provided name.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#exporttoicalendar" }], "schedule/print": [{ "name": "height", "description": "<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.\nThe string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#height" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }], "schedule/keyboard-interaction": [{ "name": "width", "description": "<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.\nThe string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#width" }, { "name": "height", "description": "<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.\nThe string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#height" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "selectedDate", "description": "<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n", "type": "Date", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate" }, { "name": "allowKeyboardInteraction", "description": "<p>When set to <code>true</code>, allows the keyboard interaction to take place on Schedule.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#allowkeyboardinteraction" }], "schedule/events": [{ "name": "width", "description": "<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.\nThe string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#width" }, { "name": "height", "description": "<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.\nThe string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#height" }, { "name": "eventSettings", "description": "<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n", "type": "EventSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings" }, { "name": "eventRendered", "description": "<p>Triggers before each of the event getting rendered on the scheduler user interface.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventrendered" }, { "name": "created", "description": "<p>Triggers after the scheduler component is created.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#created" }, { "name": "actionBegin", "description": "<p>Triggers on beginning of every scheduler action.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#actionbegin" }, { "name": "actionComplete", "description": "<p>Triggers on successful completion of the scheduler actions.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#actioncomplete" }, { "name": "actionFailure", "description": "<p>Triggers when a scheduler action gets failed or interrupted and an error information will be returned.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#actionfailure" }, { "name": "cellClick", "description": "<p>Triggers when the scheduler cells are single clicked or on single tap on the same cells in mobile devices.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#cellclick" }, { "name": "cellDoubleClick", "description": "<p>Triggers when the scheduler cells are double clicked.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#celldoubleclick" }, { "name": "destroyed", "description": "<p>Triggers when the scheduler component is destroyed.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#destroyed" }, { "name": "navigating", "description": "<p>Triggers before the date or view navigation takes place on scheduler.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#navigating" }, { "name": "eventClick", "description": "<p>Triggers when the events are single clicked or on single tapping the events on the mobile devices.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#eventclick" }, { "name": "popupOpen", "description": "<p>Triggers before any of the scheduler popups opens on the page.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/schedule/#popupopen" }], "sidebar/default": [{ "name": "type", "description": "<p>Specifies the expanding types of the Sidebar.</p>\n<ul>\n<li><code>Over</code> - The sidebar floats over the main content area.</li>\n<li><code>Push</code> - The sidebar pushes the main content area to appear side-by-side, and shrinks the main content within the screen width.</li>\n<li><code>Slide</code> - The sidebar translates the x and y positions of main content area based on the sidebar width.\nThe main content area will not be adjusted within the screen width.</li>\n<li><code>Auto</code> - Sidebar with <code>Over</code> type in mobile resolution and <code>Push</code> type in other higher resolutions.</li>\n</ul>\n<blockquote>\n<p>For more details about SidebarType refer to\n<a href=\"./variations.html#types\"><code>SidebarType</code></a> documentation.</p>\n</blockquote>\n", "type": "SidebarType", "link": "//ej2.syncfusion.com/react/documentation/api/sidebar/#type" }, { "name": "position", "description": "<p>Specifies the position of the Sidebar (Left/Right) corresponding to the main content.</p>\n<blockquote>\n<p>For more details about SidebarPosition refer to\n<a href=\"https://ej2.syncfusion.com/documentation/sidebar/getting-started/#position\"><code>position</code></a> documentation.</p>\n</blockquote>\n", "type": "SidebarPosition", "link": "//ej2.syncfusion.com/react/documentation/api/sidebar/#position" }, { "name": "showBackdrop", "description": "<p>Specifies the whether to apply overlay options to main content when the Sidebar is in an open state.</p>\n<blockquote>\n<p>For more details about showBackdrop refer to\n<a href=\"https://ej2.syncfusion.com/documentation/sidebar/getting-started/#enable-backdrop\"><code>Backdrop</code></a> documentation.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/sidebar/#showbackdrop" }, { "name": "closeOnDocumentClick", "description": "<p>Specifies whether the Sidebar need to be closed or not when document area is clicked.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/sidebar/#closeondocumentclick" }, { "name": "change", "description": "<p>Triggers when the state(expand/collapse) of the component is changed.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/sidebar/#change" }, { "name": "mediaQuery", "description": "<p>Specifies the media query string for resolution, which when met opens the Sidebar.</p>\n<blockquote>\n<p>For more details about mediaQuery refer to\n<a href=\"https://ej2.syncfusion.com/documentation/sidebar/auto-close/\"><code>Auto Close</code></a> documentation.</p>\n</blockquote>\n", "type": "string|MediaQueryList", "link": "//ej2.syncfusion.com/react/documentation/api/sidebar/#mediaquery" }], "slider/default": [{ "name": "value", "description": "<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n", "type": "number|number[]", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#value" }, { "name": "type", "description": "<p>It is used to denote the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Used to select a single value in the Slider.</li>\n<li>minRange - Used to select a single value in the Slider. It displays shadow from the start value to the current value.</li>\n<li>range - Used to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n", "type": "SliderType", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#type" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#appendto" }], "slider/ticks": [{ "name": "value", "description": "<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n", "type": "number|number[]", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#value" }, { "name": "type", "description": "<p>It is used to denote the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Used to select a single value in the Slider.</li>\n<li>minRange - Used to select a single value in the Slider. It displays shadow from the start value to the current value.</li>\n<li>range - Used to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n", "type": "SliderType", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#type" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#appendto" }, { "name": "enabled", "description": "<p>It is used to enable or disable the slider.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#enabled" }], "slider/tooltip": [{ "name": "value", "description": "<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n", "type": "number|number[]", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#value" }, { "name": "type", "description": "<p>It is used to denote the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Used to select a single value in the Slider.</li>\n<li>minRange - Used to select a single value in the Slider. It displays shadow from the start value to the current value.</li>\n<li>range - Used to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n", "type": "SliderType", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#type" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#appendto" }, { "name": "showButtons", "description": "<p>It is used to show or hide the increase and decrease button of Slider Component,\nwhich is used to change the slider value.\nRefer the documentation <a href=\"../../slider/getting-started#buttons\">here</a>\nto know more about this property with demo.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#showbuttons" }], "slider/orientation": [{ "name": "value", "description": "<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n", "type": "number|number[]", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#value" }, { "name": "type", "description": "<p>It is used to denote the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Used to select a single value in the Slider.</li>\n<li>minRange - Used to select a single value in the Slider. It displays shadow from the start value to the current value.</li>\n<li>range - Used to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n", "type": "SliderType", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#type" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#appendto" }, { "name": "orientation", "description": "<p>It is used to render Slider in either horizontal or vertical orientation.\nRefer the documentation <a href=\"../../slider/getting-started#orientation\">here</a>\nto know more about this property with demo.</p>\n", "type": "SliderOrientation", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#orientation" }], "slider/format": [{ "name": "value", "description": "<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n", "type": "number|number[]", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#value" }, { "name": "type", "description": "<p>It is used to denote the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Used to select a single value in the Slider.</li>\n<li>minRange - Used to select a single value in the Slider. It displays shadow from the start value to the current value.</li>\n<li>range - Used to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n", "type": "SliderType", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#type" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#appendto" }, { "name": "min", "description": "<p>It sets the minimum value of Slider Component</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#min" }, { "name": "max", "description": "<p>It sets the maximum value of Slider Component</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#max" }, { "name": "step", "description": "<p>It is used to denote the step value of Slider component which is the amount of Slider value change\nwhen increase / decrease button is clicked or press arrow keys or drag the thumb.\nRefer the documentation <a href=\"../../slider/ticks#step\">here</a>\nto know more about this property with demo.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#step" }, { "name": "tooltipChange", "description": "<p>We can trigger tooltipChange event when we change the Sider tooltip value.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#tooltipchange" }, { "name": "renderingTicks", "description": "<p>We can trigger renderingTicks event when the ticks rendered on Slider,\nwhich is used to customize the ticks labels dynamically.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#renderingticks" }], "slider/limits": [{ "name": "value", "description": "<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n", "type": "number|number[]", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#value" }, { "name": "type", "description": "<p>It is used to denote the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Used to select a single value in the Slider.</li>\n<li>minRange - Used to select a single value in the Slider. It displays shadow from the start value to the current value.</li>\n<li>range - Used to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n", "type": "SliderType", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#type" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#appendto" }, { "name": "min", "description": "<p>It sets the minimum value of Slider Component</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#min" }, { "name": "max", "description": "<p>It sets the maximum value of Slider Component</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#max" }, { "name": "limits", "description": "<p>It is used to limit the slider movement within certain limits.\nRefer the documentation <a href=\"../../slider/limits\">here</a>\nto know more about this property with demo</p>\n", "type": "LimitDataModel", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#limits" }], "slider/api": [{ "name": "value", "description": "<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n", "type": "number|number[]", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#value" }, { "name": "type", "description": "<p>It is used to denote the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Used to select a single value in the Slider.</li>\n<li>minRange - Used to select a single value in the Slider. It displays shadow from the start value to the current value.</li>\n<li>range - Used to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n", "type": "SliderType", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#type" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#appendto" }, { "name": "min", "description": "<p>It sets the minimum value of Slider Component</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#min" }, { "name": "max", "description": "<p>It sets the maximum value of Slider Component</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#max" }, { "name": "step", "description": "<p>It is used to denote the step value of Slider component which is the amount of Slider value change\nwhen increase / decrease button is clicked or press arrow keys or drag the thumb.\nRefer the documentation <a href=\"../../slider/ticks#step\">here</a>\nto know more about this property with demo.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#step" }, { "name": "showButtons", "description": "<p>It is used to show or hide the increase and decrease button of Slider Component,\nwhich is used to change the slider value.\nRefer the documentation <a href=\"../../slider/getting-started#buttons\">here</a>\nto know more about this property with demo.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#showbuttons" }, { "name": "enabled", "description": "<p>It is used to enable or disable the slider.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#enabled" }, { "name": "orientation", "description": "<p>It is used to render Slider in either horizontal or vertical orientation.\nRefer the documentation <a href=\"../../slider/getting-started#orientation\">here</a>\nto know more about this property with demo.</p>\n", "type": "SliderOrientation", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#orientation" }], "slider/events": [{ "name": "value", "description": "<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n", "type": "number|number[]", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#value" }, { "name": "type", "description": "<p>It is used to denote the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Used to select a single value in the Slider.</li>\n<li>minRange - Used to select a single value in the Slider. It displays shadow from the start value to the current value.</li>\n<li>range - Used to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n", "type": "SliderType", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#type" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#appendto" }, { "name": "change", "description": "<p>We can trigger change event whenever Slider value is changed.\nIn other term, this event will be triggered while drag the slider thumb.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#change" }, { "name": "created", "description": "<p>We can trigger created event when the Slider is created.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#created" }], "slider/thumb-customization": [{ "name": "value", "description": "<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n", "type": "number|number[]", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#value" }, { "name": "type", "description": "<p>It is used to denote the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Used to select a single value in the Slider.</li>\n<li>minRange - Used to select a single value in the Slider. It displays shadow from the start value to the current value.</li>\n<li>range - Used to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n", "type": "SliderType", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#type" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#appendto" }, { "name": "min", "description": "<p>It sets the minimum value of Slider Component</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#min" }, { "name": "max", "description": "<p>It sets the maximum value of Slider Component</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#max" }], "slider/selection-bar-customization": [{ "name": "value", "description": "<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n", "type": "number|number[]", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#value" }, { "name": "type", "description": "<p>It is used to denote the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Used to select a single value in the Slider.</li>\n<li>minRange - Used to select a single value in the Slider. It displays shadow from the start value to the current value.</li>\n<li>range - Used to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n", "type": "SliderType", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#type" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#appendto" }, { "name": "min", "description": "<p>It sets the minimum value of Slider Component</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#min" }, { "name": "max", "description": "<p>It sets the maximum value of Slider Component</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#max" }, { "name": "change", "description": "<p>We can trigger change event whenever Slider value is changed.\nIn other term, this event will be triggered while drag the slider thumb.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#change" }, { "name": "created", "description": "<p>We can trigger created event when the Slider is created.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#created" }], "slider/ticks-customization": [{ "name": "value", "description": "<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n", "type": "number|number[]", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#value" }, { "name": "type", "description": "<p>It is used to denote the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Used to select a single value in the Slider.</li>\n<li>minRange - Used to select a single value in the Slider. It displays shadow from the start value to the current value.</li>\n<li>range - Used to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n", "type": "SliderType", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#type" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#appendto" }, { "name": "min", "description": "<p>It sets the minimum value of Slider Component</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#min" }, { "name": "max", "description": "<p>It sets the maximum value of Slider Component</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#max" }, { "name": "step", "description": "<p>It is used to denote the step value of Slider component which is the amount of Slider value change\nwhen increase / decrease button is clicked or press arrow keys or drag the thumb.\nRefer the documentation <a href=\"../../slider/ticks#step\">here</a>\nto know more about this property with demo.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#step" }, { "name": "renderingTicks", "description": "<p>We can trigger renderingTicks event when the ticks rendered on Slider,\nwhich is used to customize the ticks labels dynamically.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#renderingticks" }, { "name": "renderedTicks", "description": "<p>We can trigger renderedTicks event when the ticks are rendered on the Slider.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#renderedticks" }], "slider/tooltip-customization": [{ "name": "value", "description": "<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n", "type": "number|number[]", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#value" }, { "name": "type", "description": "<p>It is used to denote the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Used to select a single value in the Slider.</li>\n<li>minRange - Used to select a single value in the Slider. It displays shadow from the start value to the current value.</li>\n<li>range - Used to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n", "type": "SliderType", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#type" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#appendto" }, { "name": "min", "description": "<p>It sets the minimum value of Slider Component</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#min" }, { "name": "max", "description": "<p>It sets the maximum value of Slider Component</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#max" }, { "name": "step", "description": "<p>It is used to denote the step value of Slider component which is the amount of Slider value change\nwhen increase / decrease button is clicked or press arrow keys or drag the thumb.\nRefer the documentation <a href=\"../../slider/ticks#step\">here</a>\nto know more about this property with demo.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#step" }, { "name": "tooltipChange", "description": "<p>We can trigger tooltipChange event when we change the Sider tooltip value.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#tooltipchange" }, { "name": "renderingTicks", "description": "<p>We can trigger renderingTicks event when the ticks rendered on Slider,\nwhich is used to customize the ticks labels dynamically.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#renderingticks" }, { "name": "created", "description": "<p>We can trigger created event when the Slider is created.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#created" }], "slider/azure-pricing": [{ "name": "value", "description": "<p>It is used to denote the current value of the Slider.\nThe value should be specified in array of number when render Slider type as range.</p>\n", "type": "number|number[]", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#value" }, { "name": "type", "description": "<p>It is used to denote the type of the Slider. The available options are:</p>\n<ul>\n<li>default - Used to select a single value in the Slider.</li>\n<li>minRange - Used to select a single value in the Slider. It displays shadow from the start value to the current value.</li>\n<li>range - Used to select a range of values in the Slider. It displays shadow in-between the selection range.</li>\n</ul>\n", "type": "SliderType", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#type" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#appendto" }, { "name": "min", "description": "<p>It sets the minimum value of Slider Component</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#min" }, { "name": "max", "description": "<p>It sets the maximum value of Slider Component</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#max" }, { "name": "step", "description": "<p>It is used to denote the step value of Slider component which is the amount of Slider value change\nwhen increase / decrease button is clicked or press arrow keys or drag the thumb.\nRefer the documentation <a href=\"../../slider/ticks#step\">here</a>\nto know more about this property with demo.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#step" }, { "name": "created", "description": "<p>We can trigger created event when the Slider is created.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/slider/#created" }], "spreadsheet/default": [{ "name": "height", "description": "<p>Defines the height of the Spreadsheet. It accepts height as pixels, number, and percentage.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/spreadsheet/#height" }, { "name": "width", "description": "<p>Defines the width of the Spreadsheet. It accepts width as pixels, number, and percentage.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/spreadsheet/#width" }, { "name": "sheets", "description": "<p>Configures sheets and its options.</p>\n", "type": "SheetModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/spreadsheet/#sheets" }], "spreadsheet/formula": [{ "name": "height", "description": "<p>Defines the height of the Spreadsheet. It accepts height as pixels, number, and percentage.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/spreadsheet/#height" }, { "name": "width", "description": "<p>Defines the width of the Spreadsheet. It accepts width as pixels, number, and percentage.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/spreadsheet/#width" }, { "name": "sheets", "description": "<p>Configures sheets and its options.</p>\n", "type": "SheetModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/spreadsheet/#sheets" }], "tab/default": [{ "name": "items", "description": "<p>An array of object that is used to configure the Tab component.</p>\n", "type": "TabItemModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/tab/#items" }], "tab/orientation": [{ "name": "headerPlacement", "description": "<p>Specifies the orientation of Tab header.\nThe possible values are:</p>\n<ul>\n<li>Top: Places the Tab header on the top.</li>\n<li>Bottom: Places the Tab header at the bottom.</li>\n<li>Left: Places the Tab header on the left.</li>\n<li>Right: Places the Tab header at the right.</li>\n</ul>\n", "type": "HeaderPosition", "link": "//ej2.syncfusion.com/react/documentation/api/tab/#headerplacement" }, { "name": "showCloseButton", "description": "<p>Specifies whether to show the close button for header items to remove the item from the Tab.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/tab/#showclosebutton" }], "tab/responsive-modes": [{ "name": "overflowMode", "description": "<p>Specifies the Tab display mode when Tab content exceeds the viewing area.\nThe possible modes are:</p>\n<ul>\n<li>Scrollable: All the elements are displayed in a single line with horizontal scrolling enabled.</li>\n<li>Popup: Tab container holds the items that can be placed within the available space and rest of the items are moved to the popup.\nIf the popup content overflows the height of the page, the rest of the elements can be viewed by scrolling the popup.</li>\n</ul>\n", "type": "OverflowMode", "link": "//ej2.syncfusion.com/react/documentation/api/tab/#overflowmode" }], "timepicker/default": [{ "name": "placeholder", "description": "<p>Specifies the placeholder text that is displayed in textbox.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/timepicker/#placeholder" }], "toolbar/default": [{ "name": "items", "description": "<p>An array of items that is used to configure Toolbar commands.</p>\n", "type": "ItemModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/toolbar/#items" }], "toolbar/popup": [{ "name": "overflowMode", "description": "<p>Specifies the Toolbar display mode when Toolbar content exceeds the viewing area.\nPossible modes are:</p>\n<ul>\n<li>Scrollable: All the elements are displayed in a single line with horizontal scrolling enabled.</li>\n<li>Popup: Prioritized elements are displayed on the Toolbar and the rest of elements are moved to the <em>popup</em>.</li>\n<li>MultiRow: Displays the overflow toolbar items as an in-line of a toolbar.</li>\n<li>Extended: Hide the overflowing toolbar items in the next row.  Show the overflowing toolbar items when you click the expand icons.\nIf the popup content overflows the height of the page, the rest of the elements will be hidden.</li>\n</ul>\n", "type": "OverflowMode", "link": "//ej2.syncfusion.com/react/documentation/api/toolbar/#overflowmode" }], "tooltip/default": [{ "name": "content", "description": "<p>It is used to display the content of Tooltip which can be both string and HTML Elements.\nRefer the documentation <a href=\"https://ej2.syncfusion.com/documentation/tooltip/content.html?lang=typescript\">here</a>\nto know more about this property with demo.</p>\n", "type": "string|HTMLElement", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#content" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#appendto" }, { "name": "position", "description": "<p>It is used to set the position of Tooltip element, with respect to Target element.</p>\n", "type": "Position", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#position" }], "tooltip/template": [{ "name": "content", "description": "<p>It is used to display the content of Tooltip which can be both string and HTML Elements.\nRefer the documentation <a href=\"https://ej2.syncfusion.com/documentation/tooltip/content.html?lang=typescript\">here</a>\nto know more about this property with demo.</p>\n", "type": "string|HTMLElement", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#content" }, { "name": "target", "description": "<p>It is used to denote the target selector where the Tooltip need to be displayed.\nThe target element is considered as parent container.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#target" }, { "name": "beforeRender", "description": "<p>We can trigger <code>beforeRender</code> event before the Tooltip and its contents are added to the DOM.\nWhen one of its arguments <code>cancel</code> is set to true, the Tooltip can be prevented from rendering on the page.\nThis event is mainly used for the purpose of customizing the Tooltip before it shows up on the screen.\nFor example, to load the AJAX content or to set new animation effects on the Tooltip, this event can be opted.\nRefer the documentation\n<a href=\"https://ej2.syncfusion.com/documentation/tooltip/content.html?lang=typescript#dynamic-content-via-ajax\">here</a>\nto know more about this property with demo.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#beforerender" }, { "name": "showTipPointer", "description": "<p>It is used to show or hide the tip pointer of Tooltip.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#showtippointer" }, { "name": "offsetX", "description": "<p>It sets the space between the target and Tooltip element in X axis.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#offsetx" }, { "name": "width", "description": "<p>It is used to set the width of Tooltip component which accepts both string and number values.\nWhen set to auto, the Tooltip width gets auto adjusted to display its content within the viewable screen.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#width" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#appendto" }], "tooltip/ajaxcontent": [{ "name": "content", "description": "<p>It is used to display the content of Tooltip which can be both string and HTML Elements.\nRefer the documentation <a href=\"https://ej2.syncfusion.com/documentation/tooltip/content.html?lang=typescript\">here</a>\nto know more about this property with demo.</p>\n", "type": "string|HTMLElement", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#content" }, { "name": "target", "description": "<p>It is used to denote the target selector where the Tooltip need to be displayed.\nThe target element is considered as parent container.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#target" }, { "name": "beforeRender", "description": "<p>We can trigger <code>beforeRender</code> event before the Tooltip and its contents are added to the DOM.\nWhen one of its arguments <code>cancel</code> is set to true, the Tooltip can be prevented from rendering on the page.\nThis event is mainly used for the purpose of customizing the Tooltip before it shows up on the screen.\nFor example, to load the AJAX content or to set new animation effects on the Tooltip, this event can be opted.\nRefer the documentation\n<a href=\"https://ej2.syncfusion.com/documentation/tooltip/content.html?lang=typescript#dynamic-content-via-ajax\">here</a>\nto know more about this property with demo.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#beforerender" }, { "name": "position", "description": "<p>It is used to set the position of Tooltip element, with respect to Target element.</p>\n", "type": "Position", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#position" }, { "name": "dataBind", "description": "<p>When invoked, applies the pending property changes immediately to the component.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#databind" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#appendto" }], "tooltip/smartposition": [{ "name": "content", "description": "<p>It is used to display the content of Tooltip which can be both string and HTML Elements.\nRefer the documentation <a href=\"https://ej2.syncfusion.com/documentation/tooltip/content.html?lang=typescript\">here</a>\nto know more about this property with demo.</p>\n", "type": "string|HTMLElement", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#content" }, { "name": "target", "description": "<p>It is used to denote the target selector where the Tooltip need to be displayed.\nThe target element is considered as parent container.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#target" }, { "name": "animation", "description": "<p>We can set the same or different animation option to Tooltip while it is in open or close state.\nRefer the documentation <a href=\"https://ej2.syncfusion.com/documentation/tooltip/animation.html?lang=typescript\">here</a>\nto know more about this property with demo.</p>\n", "type": "AnimationModel", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#animation" }, { "name": "open", "description": "<p>It is used to show the Tooltip on the specified target with specific animation settings.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#open" }, { "name": "offsetX", "description": "<p>It sets the space between the target and Tooltip element in X axis.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#offsetx" }, { "name": "close", "description": "<p>It is used to hide the Tooltip with specific animation effect.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#close" }, { "name": "refresh", "description": "<p>It is used to refresh the Tooltip content and its position.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#refresh" }, { "name": "appendTo", "description": "<p>Appends the control within the given HTML element</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#appendto" }], "tooltip/tooltip-menu": [{ "name": "content", "description": "<p>It is used to display the content of Tooltip which can be both string and HTML Elements.\nRefer the documentation <a href=\"https://ej2.syncfusion.com/documentation/tooltip/content.html?lang=typescript\">here</a>\nto know more about this property with demo.</p>\n", "type": "string|HTMLElement", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#content" }, { "name": "target", "description": "<p>It is used to denote the target selector where the Tooltip need to be displayed.\nThe target element is considered as parent container.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#target" }, { "name": "open", "description": "<p>It is used to show the Tooltip on the specified target with specific animation settings.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#open" }, { "name": "close", "description": "<p>It is used to hide the Tooltip with specific animation effect.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#close" }, { "name": "refresh", "description": "<p>It is used to refresh the Tooltip content and its position.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#refresh" }], "tooltip/html-content": [{ "name": "content", "description": "<p>It is used to display the content of Tooltip which can be both string and HTML Elements.\nRefer the documentation <a href=\"https://ej2.syncfusion.com/documentation/tooltip/content.html?lang=typescript\">here</a>\nto know more about this property with demo.</p>\n", "type": "string|HTMLElement", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#content" }, { "name": "target", "description": "<p>It is used to denote the target selector where the Tooltip need to be displayed.\nThe target element is considered as parent container.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#target" }, { "name": "open", "description": "<p>It is used to show the Tooltip on the specified target with specific animation settings.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#open" }, { "name": "close", "description": "<p>It is used to hide the Tooltip with specific animation effect.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#close" }, { "name": "refresh", "description": "<p>It is used to refresh the Tooltip content and its position.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#refresh" }], "tooltip/api": [{ "name": "content", "description": "<p>It is used to display the content of Tooltip which can be both string and HTML Elements.\nRefer the documentation <a href=\"https://ej2.syncfusion.com/documentation/tooltip/content.html?lang=typescript\">here</a>\nto know more about this property with demo.</p>\n", "type": "string|HTMLElement", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#content" }, { "name": "target", "description": "<p>It is used to denote the target selector where the Tooltip need to be displayed.\nThe target element is considered as parent container.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#target" }, { "name": "open", "description": "<p>It is used to show the Tooltip on the specified target with specific animation settings.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#open" }, { "name": "close", "description": "<p>It is used to hide the Tooltip with specific animation effect.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#close" }, { "name": "refresh", "description": "<p>It is used to refresh the Tooltip content and its position.</p>\n", "type": "Method", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#refresh" }, { "name": "width", "description": "<p>It is used to set the width of Tooltip component which accepts both string and number values.\nWhen set to auto, the Tooltip width gets auto adjusted to display its content within the viewable screen.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#width" }, { "name": "height", "description": "<p>It is used to set the height of Tooltip component which accepts both string and number values.\nWhen Tooltip content gets overflow due to height value then the scroll mode will be enabled.\nRefer the documentation <a href=\"https://ej2.syncfusion.com/documentation/tooltip/setting-dimension.html?lang=typescript\">here</a>\nto know more about this property with demo.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#height" }, { "name": "opensOn", "description": "<p>It is used to determine the device mode to display the Tooltip content.\nIf it is in desktop, it will show the Tooltip content when hovering on the target element.\nIf it is in touch device, it will show the Tooltip content when tap and holding on the target element.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/tooltip/#openson" }], "treegrid/treegrid-overview": [{ "name": "queryCellInfo", "description": "<p>Triggered every time a request is made to access cell information, element, or data.\nThis will be triggered before the cell element is appended to the TreeGrid element.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#querycellinfo" }, { "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "enableVirtualization", "description": "<p>If <code>enableVirtualization</code> set to true, then the TreeGrid will render only the rows visible within the view-port\nand load subsequent rows on vertical scrolling. This helps to load large dataset in TreeGrid.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#enablevirtualization" }, { "name": "allowFiltering", "description": "<p>If <code>allowFiltering</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowfiltering" }, { "name": "allowSorting", "description": "<p>If <code>allowSorting</code> is set to true, it allows sorting of treegrid records when column header is clicked.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowsorting" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) TreeGrid records by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowselection" }, { "name": "selectionSettings", "description": "<p>Configures the selection settings.</p>\n", "type": "SelectionSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#selectionsettings" }, { "name": "height", "description": "<p>Defines the scrollable height of the TreeGrid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#height" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "dataBound", "description": "<p>Triggers when data source is populated in the TreeGrid.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#databound" }, { "name": "actionComplete", "description": "<p>Triggers when TreeGrid actions such as sorting, filtering, paging etc. are completed.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#actioncomplete" }, { "name": "load", "description": "<p>This event allows customization of TreeGrid properties before rendering.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#load" }], "treegrid/default": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "height", "description": "<p>Defines the scrollable height of the TreeGrid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#height" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }], "treegrid/localdata": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "height", "description": "<p>Defines the scrollable height of the TreeGrid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#height" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }], "treegrid/remote-data": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "hasChildMapping", "description": "<p>Specifies whether record is parent or not for the remote data binding</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#haschildmapping" }, { "name": "parentIdMapping", "description": "<p>Specifies the name of the field in the dataSource, which contains the parent’s id</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#parentidmapping" }, { "name": "idMapping", "description": "<p>Specifies the name of the field in the dataSource, which contains the id of that row.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#idmapping" }, { "name": "height", "description": "<p>Defines the scrollable height of the TreeGrid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#height" }], "treegrid/selfreference": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "idMapping", "description": "<p>Specifies the name of the field in the dataSource, which contains the id of that row.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#idmapping" }, { "name": "parentIdMapping", "description": "<p>Specifies the name of the field in the dataSource, which contains the parent’s id</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#parentidmapping" }], "treegrid/columnformatting": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }], "treegrid/columntemplate": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "width", "description": "<p>Defines the TreeGrid width.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#width" }, { "name": "height", "description": "<p>Defines the scrollable height of the TreeGrid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#height" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "rowHeight", "description": "<p>Defines the height of TreeGrid rows.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#rowheight" }], "treegrid/reorder": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "allowReordering", "description": "<p>If <code>allowReordering</code> is set to true, TreeGrid columns can be reordered.\nReordering can be done by drag and drop of a particular column from one index to another index.</p>\n<blockquote>\n<p>If TreeGrid is rendered with stacked headers, reordering is allowed only at the same level as the column headers.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowreordering" }, { "name": "actionComplete", "description": "<p>Triggers when TreeGrid actions such as sorting, filtering, paging etc. are completed.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#actioncomplete" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }], "treegrid/column-menu": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "showColumnMenu", "description": "<p>If <code>showColumnMenu</code> set to true, then it will enable the column menu options in each columns.</p>\n<blockquote>\n<p>Check the <a href=\"./columns.html#column-menu\"><code>Column menu</code></a> for its configuration.</p>\n</blockquote>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#showcolumnmenu" }], "treegrid/cellalignment": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }], "treegrid/autowrap": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "allowTextWrap", "description": "<p>If <code>allowTextWrap</code> set to true,\nthen text content will wrap to the next line when its text content exceeds the width of the Column Cells.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowtextwrap" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "pageSettings", "description": "<p>Configures the pager in the TreeGrid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings" }], "treegrid/showhidecolumn": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "allowTextWrap", "description": "<p>If <code>allowTextWrap</code> set to true,\nthen text content will wrap to the next line when its text content exceeds the width of the Column Cells.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowtextwrap" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "pageSettings", "description": "<p>Configures the pager in the TreeGrid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings" }], "treegrid/header-template": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }], "treegrid/stacked-header": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the TreeGrid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }], "treegrid/checkbox-column": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the TreeGrid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }], "treegrid/frozencolumn": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "frozenColumns", "description": "<p>Gets or sets the number of frozen columns.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#frozencolumns" }], "treegrid/rowhover": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "enableHover", "description": "<p>If <code>enableHover</code> is set to true, the row hover is enabled in the TreeGrid.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#enablehover" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }], "treegrid/rowheight": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "rowHeight", "description": "<p>Defines the height of TreeGrid rows.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#rowheight" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }], "treegrid/row-template": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }], "treegrid/detail-template": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "height", "description": "<p>Defines the scrollable height of the TreeGrid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#height" }], "treegrid/drag-drop": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }], "treegrid/inline-editing": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "editSettings", "description": "<p>Configures the edit settings.</p>\n", "type": "EditSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#editsettings" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "height", "description": "<p>Defines the scrollable height of the TreeGrid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#height" }], "treegrid/dialog-editing": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "editSettings", "description": "<p>Configures the edit settings.</p>\n", "type": "EditSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#editsettings" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "height", "description": "<p>Defines the scrollable height of the TreeGrid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#height" }], "treegrid/lockrow": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "editSettings", "description": "<p>Configures the edit settings.</p>\n", "type": "EditSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#editsettings" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "height", "description": "<p>Defines the scrollable height of the TreeGrid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#height" }], "treegrid/celledittype": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "editSettings", "description": "<p>Configures the edit settings.</p>\n", "type": "EditSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#editsettings" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "height", "description": "<p>Defines the scrollable height of the TreeGrid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#height" }], "treegrid/commandcolumn": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "editSettings", "description": "<p>Configures the edit settings.</p>\n", "type": "EditSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#editsettings" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "height", "description": "<p>Defines the scrollable height of the TreeGrid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#height" }], "treegrid/edittemplate": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "editSettings", "description": "<p>Configures the edit settings.</p>\n", "type": "EditSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#editsettings" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "height", "description": "<p>Defines the scrollable height of the TreeGrid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#height" }], "treegrid/sorting": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the TreeGrid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "allowSorting", "description": "<p>If <code>allowSorting</code> is set to true, it allows sorting of treegrid records when column header is clicked.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowsorting" }, { "name": "actionComplete", "description": "<p>Triggers when TreeGrid actions such as sorting, filtering, paging etc. are completed.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#actioncomplete" }, { "name": "sortSettings", "description": "<p>Configures the sort settings of the TreeGrid.</p>\n", "type": "SortSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#sortsettings" }], "treegrid/sortingapi": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the TreeGrid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "allowSorting", "description": "<p>If <code>allowSorting</code> is set to true, it allows sorting of treegrid records when column header is clicked.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowsorting" }, { "name": "actionComplete", "description": "<p>Triggers when TreeGrid actions such as sorting, filtering, paging etc. are completed.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#actioncomplete" }, { "name": "sortSettings", "description": "<p>Configures the sort settings of the TreeGrid.</p>\n", "type": "SortSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#sortsettings" }], "treegrid/filtering": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "allowFiltering", "description": "<p>If <code>allowFiltering</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowfiltering" }, { "name": "filterSettings", "description": "<p>Configures the filter settings of the TreeGrid.</p>\n", "type": "FilterSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#filtersettings" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }], "treegrid/filter-menu": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "allowFiltering", "description": "<p>If <code>allowFiltering</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowfiltering" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "filterSettings", "description": "<p>Configures the filter settings of the TreeGrid.</p>\n", "type": "FilterSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#filtersettings" }], "treegrid/searching": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "pageSettings", "description": "<p>Configures the pager in the TreeGrid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar" }], "treegrid/paging": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "pageSettings", "description": "<p>Configures the pager in the TreeGrid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }], "treegrid/pagingapi": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "pageSettings", "description": "<p>Configures the pager in the TreeGrid.</p>\n", "type": "PageSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }], "treegrid/defaultscrolling": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "height", "description": "<p>Defines the scrollable height of the TreeGrid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#height" }], "treegrid/virtualscrolling": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "height", "description": "<p>Defines the scrollable height of the TreeGrid content.</p>\n", "type": "string|number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#height" }, { "name": "enableVirtualization", "description": "<p>If <code>enableVirtualization</code> set to true, then the TreeGrid will render only the rows visible within the view-port\nand load subsequent rows on vertical scrolling. This helps to load large dataset in TreeGrid.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#enablevirtualization" }], "treegrid/selection": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) TreeGrid records by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowselection" }, { "name": "selectionSettings", "description": "<p>Configures the selection settings.</p>\n", "type": "SelectionSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#selectionsettings" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }], "treegrid/selectionapi": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) TreeGrid records by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowselection" }, { "name": "selectionSettings", "description": "<p>Configures the selection settings.</p>\n", "type": "SelectionSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#selectionsettings" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }], "treegrid/checkbox-selection": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "allowSelection", "description": "<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) TreeGrid records by clicking it.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowselection" }, { "name": "selectionSettings", "description": "<p>Configures the selection settings.</p>\n", "type": "SelectionSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#selectionsettings" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }], "treegrid/aggregate-default": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "aggregates", "description": "<p>Configures the TreeGrid aggregate rows.</p>\n<blockquote>\n<p>Check the <a href=\"./aggregates.html\"><code>Aggregates</code></a> for its configuration.</p>\n</blockquote>\n", "type": "AggregateRowModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#aggregates" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }], "treegrid/custom-aggregate": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "aggregates", "description": "<p>Configures the TreeGrid aggregate rows.</p>\n<blockquote>\n<p>Check the <a href=\"./aggregates.html\"><code>Aggregates</code></a> for its configuration.</p>\n</blockquote>\n", "type": "AggregateRowModel[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#aggregates" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }], "treegrid/contextmenu": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "allowSorting", "description": "<p>If <code>allowSorting</code> is set to true, it allows sorting of treegrid records when column header is clicked.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowsorting" }, { "name": "sortSettings", "description": "<p>Configures the sort settings of the TreeGrid.</p>\n", "type": "SortSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#sortsettings" }], "treegrid/customcontextmenu": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "allowPaging", "description": "<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "allowSorting", "description": "<p>If <code>allowSorting</code> is set to true, it allows sorting of treegrid records when column header is clicked.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#allowsorting" }, { "name": "sortSettings", "description": "<p>Configures the sort settings of the TreeGrid.</p>\n", "type": "SortSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#sortsettings" }], "treegrid/export": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar" }], "treegrid/print": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar" }], "treegrid/conditionalformatting": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }], "treegrid/toolbar-template": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "toolbar", "description": "<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n", "type": "[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar" }], "treegrid/events": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }], "treegrid/keyboard": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }], "treegrid/gridlines": [{ "name": "dataSource", "description": "<p>It is used to render TreeGrid table rows.</p>\n", "type": "Object|DataManager", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource" }, { "name": "childMapping", "description": "<p>Specifies the mapping property path for sub tasks in data source</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping" }, { "name": "treeColumnIndex", "description": "<p>Specifies the index of the column that needs to have the expander button.</p>\n", "type": "number", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex" }, { "name": "columns", "description": "<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n", "type": "ColumnModel[]|string[]|Column[]", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#columns" }, { "name": "gridLines", "description": "<p>Defines the mode of TreeGrid lines. The available modes are,</p>\n<ul>\n<li><code>Both</code>: Displays both horizontal and vertical TreeGrid lines.</li>\n<li><code>None</code>: No TreeGrid lines are displayed.</li>\n<li><code>Horizontal</code>: Displays the horizontal TreeGrid lines only.</li>\n<li><code>Vertical</code>: Displays the vertical TreeGrid lines only.</li>\n<li><code>Default</code>: Displays TreeGrid lines based on the theme.</li>\n</ul>\n", "type": "GridLine", "link": "//ej2.syncfusion.com/react/documentation/api/treegrid/#gridlines" }], "treeview/default": [{ "name": "fields", "description": "<p>Specifies the data source and mapping fields to render TreeView nodes.</p>\n", "type": "FieldsSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treeview/#fields" }], "treeview/icons": [{ "name": "fields", "description": "<p>Specifies the data source and mapping fields to render TreeView nodes.</p>\n", "type": "FieldsSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treeview/#fields" }, { "name": "sortOrder", "description": "<p>Specifies a value that indicates whether the nodes are sorted in the ascending or descending order,\nor are not sorted at all. The available types of sort order are,</p>\n<ul>\n<li><code>None</code> - The nodes are not sorted.</li>\n<li><code>Ascending</code> - The nodes are sorted in the ascending order.</li>\n<li><code>Descending</code> - The nodes are sorted in the ascending order.</li>\n</ul>\n", "type": "SortOrder", "link": "//ej2.syncfusion.com/react/documentation/api/treeview/#sortorder" }], "treeview/check-box": [{ "name": "fields", "description": "<p>Specifies the data source and mapping fields to render TreeView nodes.</p>\n", "type": "FieldsSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treeview/#fields" }, { "name": "showCheckBox", "description": "<p>Indicates that the nodes will display CheckBoxes in the TreeView.\nThe CheckBox will be displayed next to the expand/collapse icon of the node. For more information on CheckBoxes, refer to\n<a href=\"../../treeview/check-box/\">CheckBox</a>.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treeview/#showcheckbox" }], "treeview/node-editing": [{ "name": "fields", "description": "<p>Specifies the data source and mapping fields to render TreeView nodes.</p>\n", "type": "FieldsSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treeview/#fields" }, { "name": "allowEditing", "description": "<p>Enables or disables editing of the text in the TreeView node. When <code>allowEditing</code> property is set\nto true, the TreeView allows you to edit the node by double clicking the node or by navigating to\nthe node and pressing <strong>F2</strong> key. For more information on node editing, refer\nto <a href=\"../../treeview/node-editing/\">Node Editing</a>.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treeview/#allowediting" }], "treeview/multiple-selection": [{ "name": "fields", "description": "<p>Specifies the data source and mapping fields to render TreeView nodes.</p>\n", "type": "FieldsSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treeview/#fields" }, { "name": "allowMultiSelection", "description": "<p>Enables or disables multi-selection of nodes. To select multiple nodes:</p>\n<ul>\n<li>Select the nodes by holding down the CTRL key while clicking on the nodes.</li>\n<li>Select consecutive nodes by clicking the first node to select and hold down the <strong>SHIFT</strong> key\nand click the last node to select.\nFor more information on multi-selection, refer to\n<a href=\"../../treeview/multiple-selection/\">Multi-Selection</a>.</li>\n</ul>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treeview/#allowmultiselection" }], "treeview/drag-and-drop": [{ "name": "fields", "description": "<p>Specifies the data source and mapping fields to render TreeView nodes.</p>\n", "type": "FieldsSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treeview/#fields" }, { "name": "allowDragAndDrop", "description": "<p>Indicates whether the TreeView allows drag and drop of nodes. To drag and drop a node in\ndesktop, hold the mouse on the node, drag it to the target node and drop the node by releasing\nthe mouse. For touch devices, drag and drop operation is performed by touch, touch move\nand touch end. For more information on drag and drop nodes concept, refer to\n<a href=\"../../treeview/drag-and-drop/\">Drag and Drop</a>.</p>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treeview/#allowdraganddrop" }, { "name": "allowMultiSelection", "description": "<p>Enables or disables multi-selection of nodes. To select multiple nodes:</p>\n<ul>\n<li>Select the nodes by holding down the CTRL key while clicking on the nodes.</li>\n<li>Select consecutive nodes by clicking the first node to select and hold down the <strong>SHIFT</strong> key\nand click the last node to select.\nFor more information on multi-selection, refer to\n<a href=\"../../treeview/multiple-selection/\">Multi-Selection</a>.</li>\n</ul>\n", "type": "boolean", "link": "//ej2.syncfusion.com/react/documentation/api/treeview/#allowmultiselection" }, { "name": "nodeDragStop", "description": "<p>Triggers when the TreeView node drag (move) is stopped.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/treeview/#nodedragstop" }], "treeview/template": [{ "name": "fields", "description": "<p>Specifies the data source and mapping fields to render TreeView nodes.</p>\n", "type": "FieldsSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treeview/#fields" }, { "name": "cssClass", "description": "<p>Specifies the CSS classes to be added with root element of the TreeView to help customize the appearance of the component.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treeview/#cssclass" }, { "name": "nodeTemplate", "description": "<p>Specifies a template to render customized content for all the nodes. If the <code>nodeTemplate</code> property\nis set, the template content overrides the displayed node text. The property accepts template string\n<a href=\"http://ej2.syncfusion.com/documentation/base/template-engine.html\">template string</a>\nor HTML element ID holding the content. For more information on template concept, refer to\n<a href=\"../../treeview/template/\">Template</a>.</p>\n", "type": "string", "link": "//ej2.syncfusion.com/react/documentation/api/treeview/#nodetemplate" }], "treeview/local-data": [{ "name": "fields", "description": "<p>Specifies the data source and mapping fields to render TreeView nodes.</p>\n", "type": "FieldsSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treeview/#fields" }], "treeview/remote-data": [{ "name": "fields", "description": "<p>Specifies the data source and mapping fields to render TreeView nodes.</p>\n", "type": "FieldsSettingsModel", "link": "//ej2.syncfusion.com/react/documentation/api/treeview/#fields" }, { "name": "created", "description": "<p>Triggers when the TreeView control is created successfully.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/treeview/#created" }, { "name": "dataBound", "description": "<p>Triggers when data source is populated in the TreeView.</p>\n", "type": "Event", "link": "//ej2.syncfusion.com/react/documentation/api/treeview/#databound" }] };
