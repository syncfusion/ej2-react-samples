"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoCompleteSampleOrder = [
    { 'path': 'auto-complete/default', 'component': 'Default', 'name': 'Default Functionalities', 'description': 'This example demonstrates the default functionalities of the React autocomplete component with minimum configuration.', 'order': '01', 'category': 'AutoComplete', 'api': '{"AutoComplete": ["dataSource", "value", "placeholder"]}', 'sourceFiles': [{ 'displayName': 'default.tsx', 'path': 'src/auto-complete/default.tsx' }, { 'displayName': 'default.jsx', 'path': 'src/auto-complete/default.jsx' }, { 'displayName': 'dataSource.json', 'path': 'src/auto-complete/dataSource.json' }] },
    { 'path': 'auto-complete/grouping-icon', 'component': 'Grouping', 'name': 'Grouping and Icons', 'description': 'This example demonstrates how to group based on the different categories with individual header and icon support using the React autocomplete component.', 'order': '01', 'category': 'AutoComplete', 'api': '{"AutoComplete": ["fields", "placeholder"]}', 'sourceFiles': [{ 'displayName': 'grouping-icon.tsx', 'path': 'src/auto-complete/grouping-icon.tsx' }, { 'displayName': 'grouping-icon.jsx', 'path': 'src/auto-complete/grouping-icon.jsx' }, { 'displayName': 'dataSource.json', 'path': 'src/auto-complete/dataSource.json' }] },
    { 'path': 'auto-complete/data-binding', 'component': 'Data', 'name': 'Data Binding', 'description': 'This example demonstrates how to bind with local data source and fetch data from remote data service in the React autocomplete component.', 'order': '01', 'category': 'AutoComplete', 'api': '{"AutoComplete": ["dataSource", "suggestionCount", "query", "sortOrder", "autofill", "filterType", "change"]}', 'sourceFiles': [{ 'displayName': 'data-binding.tsx', 'path': 'src/auto-complete/data-binding.tsx' }, { 'displayName': 'data-binding.jsx', 'path': 'src/auto-complete/data-binding.jsx' }, { 'displayName': 'dataSource.json', 'path': 'src/auto-complete/dataSource.json' }] },
    { 'path': 'auto-complete/template', 'component': 'Templates', 'name': 'Templates', 'description': 'This example demonstrates how to customize the appearance of each item in the React autocomplete component pop-up list using template.', 'order': '01', 'category': 'AutoComplete', 'api': '{"AutoComplete": ["dataSource", "fields", "headerTemplate", "itemTemplate", "placeholder", "popupHeight"]}', 'sourceFiles': [{ 'displayName': 'template.tsx', 'path': 'src/auto-complete/template.tsx' }, { 'displayName': 'template.jsx', 'path': 'src/auto-complete/template.jsx' }, { 'displayName': 'dataSource.json', 'path': 'src/auto-complete/dataSource.json' }] },
    { 'path': 'auto-complete/highlight', 'component': 'Highlight', 'name': 'Highlight', 'description': 'This example demonstrates how to highlight the searched characters in the suggested list items of the React autocomplete component.', 'order': '01', 'category': 'AutoComplete', 'api': '{"AutoComplete": ["dataSource", "fields", "highlight", "placeholder"]}', 'sourceFiles': [{ 'displayName': 'highlight.tsx', 'path': 'src/auto-complete/highlight.tsx' }, { 'displayName': 'highlight.jsx', 'path': 'src/auto-complete/highlight.jsx' }, { 'displayName': 'dataSource.json', 'path': 'src/auto-complete/dataSource.json' }] },
    { 'path': 'auto-complete/custom-filtering', 'component': 'CustomFiltering', 'name': 'Custom Filtering', 'description': 'This example demonstrates how to achieve the custom filtering functionalities in the React autocomplete component.', 'order': '01', 'category': 'AutoComplete', 'api': '{"AutoComplete": ["dataSource", "filtering", "fields", "placeholder"]}', 'sourceFiles': [{ 'displayName': 'custom-filtering.tsx', 'path': 'src/auto-complete/custom-filtering.tsx' }, { 'displayName': 'custom-filtering.jsx', 'path': 'src/auto-complete/custom-filtering.jsx' }, { 'displayName': 'dataSource.json', 'path': 'src/auto-complete/dataSource.json' }] },
    { 'path': 'auto-complete/diacritics-filtering', 'component': 'DiacriticsFiltering', 'name': 'Diacritics Filtering', 'description': 'This example demonstrates how to achieve the diacritics filter functionalities in the React autocomplete component.', 'order': '01', 'category': 'AutoComplete', 'api': '{"AutoComplete": ["dataSource", "ignoreAccent", "placeholder"]}', 'sourceFiles': [{ 'displayName': 'diacritics-filtering.tsx', 'path': 'src/auto-complete/diacritics-filtering.tsx' }, { 'displayName': 'diacritics-filtering.jsx', 'path': 'src/auto-complete/diacritics-filtering.jsx' }, { 'displayName': 'dataSource.json', 'path': 'src/auto-complete/dataSource.json' }] }
];
