{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { GanttComponent, Inject, Selection, ColumnsDirective, ColumnDirective } from '@syncfusion/ej2-react-gantt';\r\nimport { DataManager, WebApiAdaptor } from '@syncfusion/ej2-data';\r\nimport { SampleBase } from './sample-base';\r\nexport class RemoteData extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.taskFields = {\r\n            id: 'TaskId',\r\n            name: 'TaskName',\r\n            startDate: 'StartDate',\r\n            duration: 'Duration',\r\n            dependency: 'Predecessor',\r\n            child: 'SubTasks'\r\n        };\r\n        this.projectStartDate = new Date('02/24/2019');\r\n        this.projectEndDate = new Date('06/10/2019');\r\n        this.gridLines = 'Both';\r\n        this.timelineSettings = {\r\n            timelineUnitSize: 50,\r\n            topTier: {\r\n                unit: 'Month',\r\n                format: 'MMM dd, y',\r\n            },\r\n            bottomTier: {\r\n                unit: 'Day',\r\n                formatter: (date) => {\r\n                    let month = date.getMonth();\r\n                    if (month === 1) {\r\n                        return '';\r\n                    }\r\n                    else {\r\n                        let presentDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());\r\n                        let start = new Date(presentDate.getFullYear(), 0, 0);\r\n                        let diff = Number(presentDate) - Number(start);\r\n                        let oneDay = 1000 * 60 * 60 * 24;\r\n                        let day = Math.floor(diff / oneDay);\r\n                        return 'day ' + (day - 59);\r\n                    }\r\n                },\r\n            },\r\n        };\r\n        this.dataSource = new DataManager({\r\n            url: 'https://ej2services.syncfusion.com/production/web-services/api/GanttData',\r\n            adaptor: new WebApiAdaptor,\r\n            crossDomain: true\r\n        });\r\n        this.labelSettings = {\r\n            leftLabel: 'TaskName'\r\n        };\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n        <div className='control-section'>\r\n          <GanttComponent id='RemoteData' dataSource={this.dataSource} allowSorting={true} dateFormat={'MMM dd, y'} treeColumnIndex={0} allowSelection={true} highlightWeekends={false} includeWeekend={true} allowUnscheduledTasks={true} projectStartDate={this.projectStartDate} projectEndDate={this.projectEndDate} taskFields={this.taskFields} gridLines={this.gridLines} timelineSettings={this.timelineSettings} labelSettings={this.labelSettings} height='410px'>\r\n            <ColumnsDirective>\r\n              <ColumnDirective field='TaskName' headerText='Task Name' width='250' clipMode='EllipsisWithTooltip'></ColumnDirective>\r\n              <ColumnDirective field='StartDate'></ColumnDirective>\r\n              <ColumnDirective field='Duration'></ColumnDirective>\r\n            </ColumnsDirective>\r\n            <Inject services={[Selection]}/>\r\n          </GanttComponent>\r\n          <div style={{ float: 'right', margin: '10px' }}>Source:\r\n            <a href=\"https://en.wikipedia.org/wiki/Cereal_growth_staging_scales\" target='_blank'>https://en.wikipedia.org/</a>\r\n          </div>\r\n        </div>\r\n\r\n      </div>);\r\n    }\r\n}\r\n\nrender(<RemoteData />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}