{"index.css":".rte-event-panel #EventLog b{\r\n    color: #388e3c;\r\n    word-break: normal;\r\n}\r\n.rte-event-panel hr {\r\n    margin: 1px 10px 1px 0px;\r\n    border-top: 1px solid #eee;\r\n}\r\n.rte-event-panel .eventarea {\r\n    height: 245px;\r\n    overflow: auto;\r\n}\r\n.rte-event-panel .evtbtn {\r\n    padding-bottom: 10px;\r\n}\r\n.rte-control-section {\r\n    margin: 0 auto;\r\n}\r\n\r\n.property-section .right-side {\r\n    padding-left: 10px;\r\n}\r\n\r\n.property-section .left-side {\r\n    padding: 5px;\r\n    width: 25%\r\n}\r\n\r\n.sb-header {\r\n    z-index: 100 !important;\r\n}\r\n\r\n#rteEvent .e-richtexteditor .e-rte-content .e-content {\r\n    float: left;\r\n    width: 100%;\r\n}\r\n\r\n#rteEvent.control-section {\r\n    padding-right: 10px;\r\n}\r\n\r\n#rteEvent .content-wrapper {\r\n    width: auto;\r\n    margin: 0;\r\n}\r\n\r\n#rteEventProperty .property-panel-content {\r\n    overflow: inherit;\r\n}\r\n\r\n#rteEventProperty .property-panel-header {\r\n    padding-top: 40px;\r\n    padding-bottom: 20px;\r\n}\r\n\r\n.sb-content.e-view.hide-header {\r\n    top: 0 !important;\r\n}\r\n\r\n.sb-header.e-view.hide-header {\r\n    display: none;\r\n}","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * RichTextEditor events sample\r\n */\r\nimport * as React from 'react';\r\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\r\nimport { addClass, removeClass, Browser } from '@syncfusion/ej2-base';\r\nimport { RichTextEditorComponent, HtmlEditor, Table, Inject, Toolbar, Link, Image, QuickToolbar } from '@syncfusion/ej2-react-richtexteditor';\r\nimport { SampleBase } from './sample-base';\r\nimport { PropertyPane } from './property-pane';\r\n\r\nexport class RTEEvents extends SampleBase {\r\n    constructor(props) {\r\n        super(props);\r\n        // RichTextEditor items list\r\n        this.items = ['Bold', 'Italic', 'Underline', 'StrikeThrough',\r\n            'FontName', 'FontSize', 'FontColor', 'BackgroundColor',\r\n            'LowerCase', 'UpperCase', '|',\r\n            'Formats', 'Alignments', 'OrderedList', 'UnorderedList',\r\n            'Outdent', 'Indent', '|', 'CreateTable',\r\n            'CreateLink', 'Image', '|', 'ClearFormat', 'Print',\r\n            'SourceCode', 'FullScreen', '|', 'Undo', 'Redo'];\r\n        //RichTextEditor ToolbarSettings\r\n        this.toolbarSettings = {\r\n            items: this.items\r\n        };\r\n        this.EventLogRef = element => {\r\n            this.EventLogEle = element;\r\n        };\r\n    }\r\n    ClearClick() {\r\n        this.EventLogEle.innerHTML = '';\r\n    }\r\n    create() {\r\n        this.appendElement('RichTextEditor <b>create</b> event called<hr>');\r\n    }\r\n    actionBegin(args) {\r\n        this.appendElement('<b>' + args.requestType + '</b> action is called<hr>');\r\n        this.handleFullScreen(args);\r\n    }\r\n    actionComplete(args) {\r\n        this.appendElement('<b>' + args.requestType + '</b> action is completed<hr>');\r\n        this.actionCompleteHandler();\r\n    }\r\n    focus() {\r\n        this.appendElement('RichTextEditor <b>focus</b> event called<hr>');\r\n    }\r\n    blur() {\r\n        this.appendElement('RichTextEditor <b>blur</b> event called<hr>');\r\n    }\r\n    change() {\r\n        this.appendElement('RichTextEditor <b>change</b> event called<hr>');\r\n    }\r\n    toolbarClick() {\r\n        this.appendElement('RichTextEditor <b>toolbar click</b> event called<hr>');\r\n    }\r\n    beforeDialogOpen() {\r\n        this.appendElement('RichTextEditor <b>beforeDialogOpen</b> event called<hr>');\r\n    }\r\n    dialogOpen() {\r\n        this.appendElement('RichTextEditor <b>dialogOpen</b> event called<hr>');\r\n    }\r\n    dialogClose() {\r\n        this.appendElement('RichTextEditor <b>dialogClose</b> event called<hr>');\r\n    }\r\n    beforeQuickToolbarOpen() {\r\n        this.appendElement('RichTextEditor <b>beforeQuickToolbarOpen</b> event called<hr>');\r\n    }\r\n    quickToolbarOpen() {\r\n        this.appendElement('RichTextEditor <b>quickToolbarOpen</b> event called<hr>');\r\n    }\r\n    quickToolbarClose() {\r\n        this.appendElement('RichTextEditor <b>quickToolbarClose</b> event called<hr>');\r\n    }\r\n    imageSelected() {\r\n        this.appendElement('RichTextEditor <b>imageSelected</b> event called<hr>');\r\n    }\r\n    imageUploading() {\r\n        this.appendElement('RichTextEditor <b>imageUploading</b> event called<hr>');\r\n    }\r\n    imageUploadSuccess() {\r\n        this.appendElement('RichTextEditor <b>imageUploadSuccess</b> event called<hr>');\r\n    }\r\n    imageUploadFailed() {\r\n        this.appendElement('RichTextEditor <b>imageUploadFailed</b> event called<hr>');\r\n    }\r\n    imageRemoving() {\r\n        this.appendElement('RichTextEditor <b>imageRemoving</b> event called<hr>');\r\n    }\r\n    destroyed() {\r\n        this.appendElement('RichTextEditor <b>destroyed</b> event called<hr>');\r\n    }\r\n    beforeSanitizeHtml() {\r\n        this.appendElement('RichTextEditor <b>beforeSanitizeHtml</b> event called<hr>');\r\n    }\r\n    resizing() {\r\n        this.appendElement('RichTextEditor <b>resizing</b> event called<hr>');\r\n    }\r\n    resizeStart() {\r\n        this.appendElement('RichTextEditor <b>resizeStart</b> event called<hr>');\r\n    }\r\n    resizeStop() {\r\n        this.appendElement('RichTextEditor <b>resizeStop</b> event called<hr>');\r\n    }\r\n    appendElement(html) {\r\n        let span = document.createElement('span');\r\n        span.innerHTML = html;\r\n        this.EventLogEle.insertBefore(span, this.EventLogEle.firstChild);\r\n    }\r\n    handleFullScreen(e) {\r\n        let sbCntEle = document.querySelector('.sb-content.e-view');\r\n        let sbHdrEle = document.querySelector('.sb-header.e-view');\r\n        let leftBar;\r\n        let transformElement;\r\n        if (Browser.isDevice) {\r\n            leftBar = document.querySelector('#right-sidebar');\r\n            transformElement = document.querySelector('.sample-browser.e-view.e-content-animation');\r\n        }\r\n        else {\r\n            leftBar = document.querySelector('#left-sidebar');\r\n            transformElement = document.querySelector('#right-pane');\r\n        }\r\n        if (e.targetItem === 'Maximize') {\r\n            if (Browser.isDevice && Browser.isIos) {\r\n                addClass([sbCntEle, sbHdrEle], ['hide-header']);\r\n            }\r\n            addClass([leftBar], ['e-close']);\r\n            removeClass([leftBar], ['e-open']);\r\n            if (!Browser.isDevice) {\r\n                transformElement.style.marginLeft = '0px';\r\n            }\r\n            transformElement.style.transform = 'inherit';\r\n        }\r\n        else if (e.targetItem === 'Minimize') {\r\n            if (Browser.isDevice && Browser.isIos) {\r\n                removeClass([sbCntEle, sbHdrEle], ['hide-header']);\r\n            }\r\n            removeClass([leftBar], ['e-close']);\r\n            if (!Browser.isDevice) {\r\n                addClass([leftBar], ['e-open']);\r\n                transformElement.style.marginLeft = leftBar.offsetWidth + 'px';\r\n            }\r\n            transformElement.style.transform = 'translateX(0px)';\r\n        }\r\n    }\r\n    actionCompleteHandler() {\r\n        setTimeout(() => {\r\n            this.rteObj.toolbarModule.refreshToolbarOverflow();\r\n        }, 400);\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className='col-lg-8 control-section' id='rteEvent'>\r\n                    <div className='rte-control-section'>\r\n                        <RichTextEditorComponent id=\"clientsideRTE\" ref={(richtexteditor) => { this.rteObj = richtexteditor; }} toolbarSettings={this.toolbarSettings} created={this.create.bind(this)} actionBegin={this.actionBegin.bind(this)} actionComplete={this.actionComplete.bind(this)} focus={this.focus.bind(this)} blur={this.blur.bind(this)} change={this.change.bind(this)} toolbarClick={this.toolbarClick.bind(this)} beforeDialogOpen={this.beforeDialogOpen.bind(this)} dialogOpen={this.dialogOpen.bind(this)} dialogClose={this.dialogClose.bind(this)} beforeQuickToolbarOpen={this.beforeQuickToolbarOpen.bind(this)} quickToolbarOpen={this.quickToolbarOpen.bind(this)} quickToolbarClose={this.quickToolbarClose.bind(this)} imageSelected={this.imageSelected.bind(this)} imageUploading={this.imageUploading.bind(this)} imageUploadSuccess={this.imageUploadSuccess.bind(this)} imageUploadFailed={this.imageUploadFailed.bind(this)} imageRemoving={this.imageRemoving.bind(this)} destroyed={this.destroyed.bind(this)} beforeSanitizeHtml={this.beforeSanitizeHtml.bind(this)} resizing={this.resizing.bind(this)} resizeStart={this.resizeStart.bind(this)} resizeStop={this.resizeStop.bind(this)}>\r\n                            <p>The rich text editor component is WYSIWYG (\"what you see is what you get\") editor that provides the best user experience to create and update the content.\r\n  Users can format their content using standard toolbar commands.</p>\r\n                            <p><b>Key features:</b></p>\r\n                            <ul>\r\n                                <li>\r\n                                    <p>Provides &lt;IFRAME&gt; and &lt;DIV&gt; modes</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Capable of handling markdown editing.</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Contains a modular library to load the necessary functionality on demand.</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Provides a fully customizable toolbar.</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Provides HTML view to edit the source directly for developers.</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Supports third-party library integration.</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Allows preview of modified content before saving it.</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Handles images, hyperlinks, video, hyperlinks, uploads, etc.</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Contains undo/redo manager.</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Creates bulleted and numbered lists.</p>\r\n                                </li>\r\n                            </ul>\r\n                            <Inject services={[HtmlEditor, Toolbar, Link, Table, Image, QuickToolbar]}/>\r\n                        </RichTextEditorComponent>\r\n                    </div>\r\n                </div>\r\n                <div className='col-lg-4 property-section' id=\"rteEventProperty\">\r\n                    <PropertyPane title='Properties'>\r\n                        <table id=\"property\" title=\"Event Trace\" className='property-panel-table rte-event-panel'>\r\n                            <tbody><tr>\r\n                                <td>\r\n                                    <div className=\"eventarea\" style={{ height: '245px', overflow: 'auto' }}>\r\n                                        <span className=\"EventLog\" ref={this.EventLogRef} id=\"EventLog\" style={{ wordBreak: 'normal' }}></span>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div className=\"evtbtn\" style={{ paddingBottom: '10px' }}>\r\n                                            <ButtonComponent id=\"clear\" ref={(btn) => { this.clear = btn; }} onClick={this.ClearClick.bind(this)}>Clear</ButtonComponent>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </PropertyPane>\r\n                </div>\r\n\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<RTEEvents />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}