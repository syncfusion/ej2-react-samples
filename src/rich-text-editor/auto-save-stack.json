{"index.css":".current-status {\r\n    float: right;\r\n    padding: 11px;\r\n    margin-right: 22px;\r\n    font-size: 12px;\r\n    display: inline-block;\r\n}\r\n\r\n.e-icons.e-icon-refresh::before {\r\n    content: \"\\e606\";\r\n}\r\n\r\n.btn-text {\r\n    display: inline;\r\n    padding: 2px 35px 2px 64px;\r\n}\r\n\r\n.e-icons.e-icon-tick::before {\r\n    content: \"\\e614\";\r\n}\r\n\r\n.status-text {\r\n    padding: 4px;\r\n}\r\n\r\n.e-icon-refresh {\r\n    width: 10px;\r\n    display: inline-block;\r\n    animation: spin 2s linear infinite;\r\n}\r\n\r\n@keyframes spin {\r\n    0% {\r\n        transform: rotate(0deg);\r\n    }\r\n    100% {\r\n        transform: rotate(360deg);\r\n    }\r\n}\r\n\r\n.bootstrap4 .e-icons.e-icon-refresh::before {\r\n    content: \"\\e710\";\r\n}\r\n\r\n.bootstrap4 .e-icons.e-icon-tick::before {\r\n    content: \"\\e718\";\r\n}\r\n\r\n.status-text {\r\n    font-size: 14px;\r\n    display: inline-block;\r\n}\r\n\r\n#rteAPIProperty .property-panel-content div {\r\n    padding-left: 10px;\r\n    padding-top: 10px;\r\n}\r\n\r\n.property-panel-table td {\r\n    width: 50%;\r\n    margin-top: 3px;\r\n}\r\n\r\n#rteAPIProperty .property-panel-content {\r\n    overflow: inherit;\r\n}\r\n\r\n#rteAPIProperty .property-panel-header {\r\n    padding-top: 40px;\r\n    padding-bottom: 20px;\r\n}\r\n\r\n#rteAPI .content-wrapper {\r\n    width: auto;\r\n    margin: 0;\r\n}","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * RichTextEditor Auto Save sample\r\n */\r\nimport * as React from 'react';\r\nimport { RichTextEditorComponent, HtmlEditor, Inject, Toolbar, Image, Link, QuickToolbar } from '@syncfusion/ej2-react-richtexteditor';\r\nimport { SampleBase } from './sample-base';\r\n\r\nimport { SwitchComponent } from '@syncfusion/ej2-react-buttons';\r\nimport { PropertyPane } from './property-pane';\r\nexport class AutoSave extends SampleBase {\r\n    constructor(props) {\r\n        super(props);\r\n        // RichTextEditor items list\r\n        this.items = ['Bold', 'Italic', 'Underline', '|', 'Formats', 'Alignments',\r\n            'OrderedList', 'UnorderedList', '|', 'CreateLink', 'Image', '|', 'SourceCode', 'Undo', 'Redo'];\r\n        //RichTextEditor ToolbarSettings\r\n        this.toolbarSettings = {\r\n            items: this.items\r\n        };\r\n        this.savingRef = element => {\r\n            this.savingEle = element;\r\n        };\r\n        this.savedRef = element => {\r\n            this.savedEle = element;\r\n        };\r\n    }\r\n    updateStatus() {\r\n        this.savingEle.style.display = 'block';\r\n        this.savedEle.style.display = 'none';\r\n        setTimeout(() => {\r\n            this.savingEle.style.display = 'none';\r\n            this.savedEle.style.display = 'block';\r\n        }, 500);\r\n    }\r\n    onChange(e) {\r\n        if (e.checked) {\r\n            this.rteObj.saveInterval = 5000;\r\n        }\r\n        else {\r\n            this.rteObj.saveInterval = 0;\r\n            setTimeout(() => {\r\n                this.savingEle.style.display = 'none';\r\n                this.savedEle.style.display = 'none';\r\n            }, 500);\r\n        }\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className='col-lg-8'>\r\n                    <div className='control-section' id=\"rteAPI\">\r\n                        <div className='rte-control-section'>\r\n                            <RichTextEditorComponent id=\"autoSaveRTE\" ref={(richtexteditor) => { this.rteObj = richtexteditor; }} enablePersistence={true} placeholder={'Start to type a content to save'} saveInterval={5000} toolbarSettings={this.toolbarSettings} change={this.updateStatus.bind(this)}>\r\n                                <div>\r\n                                    <p>Type or edit the content to be saved automatically in the editor</p>\r\n                                </div>\r\n                                <Inject services={[Link, Image, HtmlEditor, Toolbar, QuickToolbar]}/>\r\n                            </RichTextEditorComponent>\r\n                            <div id='statusEle' className='current-status'>\r\n                                <div id='saving' ref={this.savingRef} style={{ display: 'none' }}>\r\n                                    <div className=\"e-icons e-icon-refresh\"> </div>\r\n                                    <p className='status-text'> Saving changes</p>\r\n                                </div>\r\n                                <div id='saved' ref={this.savedRef} style={{ display: 'none' }}>\r\n                                    <span className=\"e-icons e-icon-tick\"> </span>\r\n                                    <p className='status-text'>Changes saved</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='col-lg-4 property-section' id=\"rteAPIProperty\">\r\n                    <PropertyPane title='Properties'>\r\n                        <label htmlFor=\"checked\" style={{ padding: \"10px 72px 10px 0\" }}> Auto Save </label>\r\n                        <SwitchComponent id=\"checked\" ref={(scope) => { this.switchObj = scope; }} change={this.onChange.bind(this)} checked={true}></SwitchComponent>\r\n                    </PropertyPane>\r\n\r\n                </div>\r\n\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<AutoSave />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}