{"index.css":"#rteTools .rte-control-section {\r\n    margin: 0 auto;\r\n}\r\n\r\n#rteTools .e-code-mirror::before {\r\n    content: '\\e345';\r\n}\r\n\r\n#rteTools .e-html-preview::before {\r\n    content: '\\e350';\r\n}\r\n\r\n#rteTools .CodeMirror-linenumber,\r\n#rteTools .CodeMirror-gutters {\r\n    display: none;\r\n}\r\n\r\n.sb-header {\r\n    z-index: 100 !important;\r\n}\r\n\r\n#rteTools .e-richtexteditor .e-rte-content .e-content {\r\n    float: left;\r\n    width: 100%;\r\n}\r\n\r\n#rteTools .content-wrapper {\r\n    width: auto;\r\n    margin: 0;\r\n}\r\n\r\n.highcontrast #rteTools .cm-s-default .cm-tag {color: #00ff00;}\r\n.highcontrast #rteTools .cm-s-default .cm-string {color: #ffd939;}\r\n.highcontrast #rteTools .cm-s-default .cm-attribute {color: #f00;}\r\n.highcontrast #rteTools .CodeMirror {\r\n    background: black;\r\n}\r\n\r\n.sb-content.e-view.hide-header {\r\n    top: 0 !important;\r\n}\r\n\r\n.sb-header.e-view.hide-header {\r\n    display: none;\r\n}\r\n\r\n.e-richtexteditor .e-rte-content .e-content pre {\r\n    padding: 10px;\r\n    background: #F4F5F7;\r\n}\r\n\r\n.highcontrast .e-richtexteditor .e-rte-content .e-content pre {\r\n    padding: 10px;\r\n    background: #303030;\r\n}","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { addClass, removeClass, Browser } from '@syncfusion/ej2-base';\r\nimport { RichTextEditorComponent, Toolbar, Inject, Image, Link, HtmlEditor, Count, QuickToolbar, Table } from '@syncfusion/ej2-react-richtexteditor';\r\nimport { createElement } from '@syncfusion/ej2-base';\r\nimport { SampleBase } from './sample-base';\r\nimport * as CodeMirror from 'codemirror';\r\nimport 'codemirror/mode/javascript/javascript';\r\nimport 'codemirror/mode/css/css.js';\r\nimport 'codemirror/mode/htmlmixed/htmlmixed.js';\r\n\r\nexport class Overview extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        // RichTextEditor items list\r\n        this.items = ['Bold', 'Italic', 'Underline', 'StrikeThrough',\r\n            'FontName', 'FontSize', 'FontColor', 'BackgroundColor',\r\n            'LowerCase', 'UpperCase', '|',\r\n            'Formats', 'Alignments', 'OrderedList', 'UnorderedList',\r\n            'Outdent', 'Indent', 'SuperScript', 'SubScript', '|',\r\n            'CreateTable', 'CreateLink', 'Image', '|', 'ClearFormat', 'Print',\r\n            'SourceCode', 'FullScreen', '|', 'Undo', 'Redo'\r\n        ];\r\n        //RichTextEditor ToolbarSettings\r\n        this.toolbarSettings = {\r\n            items: this.items\r\n        };\r\n    }\r\n    mirrorConversion(e) {\r\n        this.textArea = this.rteObj.contentModule.getEditPanel();\r\n        let id = this.rteObj.getID() + 'mirror-view';\r\n        let mirrorView = this.rteObj.element.querySelector('#' + id);\r\n        let charCount = this.rteObj.element.querySelector('.e-rte-character-count');\r\n        if (e.targetItem === 'Preview') {\r\n            this.textArea.style.display = 'block';\r\n            mirrorView.style.display = 'none';\r\n            this.textArea.innerHTML = this.myCodeMirror.getValue();\r\n            charCount.style.display = 'block';\r\n        }\r\n        else {\r\n            if (!mirrorView) {\r\n                mirrorView = createElement('div', { className: 'e-content' });\r\n                mirrorView.id = id;\r\n                this.textArea.parentNode.appendChild(mirrorView);\r\n            }\r\n            else {\r\n                mirrorView.innerHTML = '';\r\n            }\r\n            this.textArea.style.display = 'none';\r\n            mirrorView.style.display = 'block';\r\n            this.renderCodeMirror(mirrorView, this.rteObj.value);\r\n            charCount.style.display = 'none';\r\n        }\r\n    }\r\n    renderCodeMirror(mirrorView, content) {\r\n        this.myCodeMirror = CodeMirror(mirrorView, {\r\n            value: content,\r\n            lineNumbers: true,\r\n            mode: 'text/html',\r\n            lineWrapping: true,\r\n        });\r\n    }\r\n    handleFullScreen(e) {\r\n        let sbCntEle = document.querySelector('.sb-content.e-view');\r\n        let sbHdrEle = document.querySelector('.sb-header.e-view');\r\n        let leftBar;\r\n        let transformElement;\r\n        if (Browser.isDevice) {\r\n            leftBar = document.querySelector('#right-sidebar');\r\n            transformElement = document.querySelector('.sample-browser.e-view.e-content-animation');\r\n        }\r\n        else {\r\n            leftBar = document.querySelector('#left-sidebar');\r\n            transformElement = document.querySelector('#right-pane');\r\n        }\r\n        if (e.targetItem === 'Maximize') {\r\n            if (Browser.isDevice && Browser.isIos) {\r\n                addClass([sbCntEle, sbHdrEle], ['hide-header']);\r\n            }\r\n            addClass([leftBar], ['e-close']);\r\n            removeClass([leftBar], ['e-open']);\r\n            if (!Browser.isDevice) {\r\n                transformElement.style.marginLeft = '0px';\r\n            }\r\n            transformElement.style.transform = 'inherit';\r\n        }\r\n        else if (e.targetItem === 'Minimize') {\r\n            if (Browser.isDevice && Browser.isIos) {\r\n                removeClass([sbCntEle, sbHdrEle], ['hide-header']);\r\n            }\r\n            removeClass([leftBar], ['e-close']);\r\n            if (!Browser.isDevice) {\r\n                addClass([leftBar], ['e-open']);\r\n                transformElement.style.marginLeft = leftBar.offsetWidth + 'px';\r\n            }\r\n            transformElement.style.transform = 'translateX(0px)';\r\n        }\r\n    }\r\n    actionCompleteHandler(e) {\r\n        if (e.targetItem && (e.targetItem === 'SourceCode' || e.targetItem === 'Preview')) {\r\n            this.rteObj.sourceCodeModule.getPanel().style.display = 'none';\r\n            this.mirrorConversion(e);\r\n        }\r\n        else {\r\n            setTimeout(() => { this.rteObj.toolbarModule.refreshToolbarOverflow(); }, 400);\r\n        }\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n        <div className='control-section' id=\"rteTools\">\r\n          <div className='rte-control-section'>\r\n            <RichTextEditorComponent id=\"toolsRTE\" ref={(richtexteditor) => { this.rteObj = richtexteditor; }} showCharCount={true} actionBegin={this.handleFullScreen.bind(this)} actionComplete={this.actionCompleteHandler.bind(this)} maxLength={2000} toolbarSettings={this.toolbarSettings}>\r\n              <div>\r\n                <p>The rich text editor is WYSIWYG (\"what you see is what you get\") editor useful to create and edit content, and return the valid <a href='https://ej2.syncfusion.com/home/' target='_blank'>HTML markup</a> or <a href='https://ej2.syncfusion.com/home/' target='_blank'>markdown</a> of the content</p> <p><b>Toolbar</b></p><ol><li> <p>Toolbar contains commands to align the text, insert link, insert image, insert list, undo/redo operations, HTML view, etc</p></li><li><p>Toolbar is fully customizable </p></li></ol> <p><b>Links</b></p><ol><li><p>You can insert a hyperlink with its corresponding dialog </p></li><li><p>Attach a hyperlink to the displayed text. </p></li><li><p>Customize the quick toolbar based on the hyperlink </p> </li></ol><p><b>Image.</b></p><ol><li><p>Allows you to insert images from an online source as well as the local computer </p> </li><li><p>You can upload an image</p></li><li><p>Provides an option to customize quick toolbar for an image</p></li></ol><img alt=\"Logo\" src=\"////npmci.syncfusion.com/development/react/demos/src/rich-text-editor/images/RTEImage-Feather.png\" style={{ width: '300px' }}/>\r\n              </div>\r\n              <Inject services={[Toolbar, Image, Link, HtmlEditor, Count, QuickToolbar, Table]}/>\r\n            </RichTextEditorComponent>\r\n          </div>\r\n        </div>\r\n\r\n      </div>);\r\n    }\r\n}\r\n\nrender(<Overview />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}