{"index.css":"#rteAPIProperty .property-panel-content div {\r\n    padding-left: 10px;\r\n    padding-top: 10px;\r\n}\r\n\r\n.property-panel-table td {\r\n    width: 50%;\r\n    margin-top: 3px;\r\n}\r\n\r\n#rteAPIProperty .property-panel-content {\r\n    overflow: inherit;\r\n}\r\n\r\n#rteAPIProperty .property-panel-header {\r\n    padding-top: 40px;\r\n    padding-bottom: 20px;\r\n}\r\n\r\n#rteAPI .content-wrapper {\r\n    width: auto;\r\n    margin: 0;\r\n}\r\n\r\n.pasteStyle td label {\r\n    margin-top: -30px;\r\n}","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * RichTextEditor Paste Cleanup sample\r\n */\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { Count, HtmlEditor, Image, Inject, Link, PasteCleanup, QuickToolbar, RichTextEditorComponent, Toolbar } from '@syncfusion/ej2-react-richtexteditor';\r\nimport * as React from 'react';\r\nimport { PropertyPane } from './property-pane';\r\nimport { SampleBase } from './sample-base';\r\n\r\nexport class PasteCleanupRTE extends SampleBase {\r\n    constructor(props) {\r\n        super(props);\r\n        this.pasteCleanupSettings = {\r\n            prompt: true,\r\n            plainText: false,\r\n            keepFormat: false\r\n        };\r\n        this.popupHeight = '200px';\r\n        this.value = \"prompt\";\r\n        this.fields = { text: \"text\", value: \"value\" };\r\n        this.formatData = [\r\n            { text: 'Prompt', value: 'prompt' },\r\n            { text: 'Plain Text', value: 'plainText' },\r\n            { text: 'Keep Format', value: 'keepFormat' },\r\n            { text: 'Clean Format', value: 'cleanFormat' }\r\n        ];\r\n        this.formatChange = () => {\r\n            if (this.formatOption.value === 'prompt') {\r\n                this.rteObj.pasteCleanupSettings.prompt = true;\r\n            }\r\n            else if (this.formatOption.value === 'plainText') {\r\n                this.rteObj.pasteCleanupSettings.prompt = false;\r\n                this.rteObj.pasteCleanupSettings.plainText = true;\r\n            }\r\n            else if (this.formatOption.value === 'keepFormat') {\r\n                this.rteObj.pasteCleanupSettings.prompt = false;\r\n                this.rteObj.pasteCleanupSettings.plainText = false;\r\n                this.rteObj.pasteCleanupSettings.keepFormat = true;\r\n            }\r\n            else if (this.formatOption.value === 'cleanFormat') {\r\n                this.rteObj.pasteCleanupSettings.prompt = false;\r\n                this.rteObj.pasteCleanupSettings.plainText = false;\r\n                this.rteObj.pasteCleanupSettings.keepFormat = false;\r\n            }\r\n        };\r\n        this.allowedStylePropertiesEle = null;\r\n        this.allowedStylePropertiesRef = element => {\r\n            this.allowedStylePropertiesEle = element;\r\n        };\r\n        this.deniedTagsEle = null;\r\n        this.deniedTagsRef = element => {\r\n            this.deniedTagsEle = element;\r\n        };\r\n        this.deniedAttributesEle = null;\r\n        this.deniedAttributesRef = element => {\r\n            this.deniedAttributesEle = element;\r\n        };\r\n    }\r\n    rendereComplete() {\r\n        let allowedStylePropsElem = this.allowedStylePropertiesEle;\r\n        let deniedTagsElem = this.deniedTagsEle;\r\n        let deniedAttrsElem = this.deniedAttributesEle;\r\n        allowedStylePropsElem.addEventListener('blur', (e) => {\r\n            this.rteObj.pasteCleanupSettings.allowedStyleProps = (eval)('[' + e.target.value + ']');\r\n        });\r\n        deniedAttrsElem.addEventListener('blur', (e) => {\r\n            this.rteObj.pasteCleanupSettings.deniedAttrs = (eval)('[' + e.target.value + ']');\r\n        });\r\n        deniedTagsElem.addEventListener('blur', (e) => {\r\n            this.rteObj.pasteCleanupSettings.deniedTags = (eval)('[' + e.target.value + ']');\r\n        });\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className='col-lg-8'>\r\n                    <div className='control-section' id=\"rteAPI\">\r\n                        <div className='rte-control-section'>\r\n                            <RichTextEditorComponent id=\"PasteCleanup\" ref={(richtexteditor) => { this.rteObj = richtexteditor; }} pasteCleanupSettings={this.pasteCleanupSettings}>\r\n                                <p>RichTextEditor is a WYSIWYG editing control which will reduce the effort for users while trying to express their formatting word content as HTML or Markdown format.</p>\r\n                                <p><b>Paste cleanup properties:</b></p>\r\n                                <ul>\r\n                                    <li>\r\n                                        <p>prompt - specifies whether to enable the prompt when pasting in RichTextEditor.</p>\r\n                                    </li>\r\n                                    <li>\r\n                                        <p>plainText - specifies whether to paste as plain text or not in RichTextEditor.</p>\r\n                                    </li>\r\n                                    <li>\r\n                                        <p>keepFormat- specifies whether to keep or remove the format when pasting in RichTextEditor.</p>\r\n                                    </li>\r\n                                    <li>\r\n                                        <p>deniedTags - specifies the tags to restrict when pasting in RichTextEditor.</p>\r\n                                    </li>\r\n                                    <li>\r\n                                        <p>deniedAttributes - specifies the attributes to restrict when pasting in RichTextEditor.</p>\r\n                                    </li>\r\n                                    <li>\r\n                                        <p>allowedStyleProperties - specifies the allowed style properties when pasting in RichTextEditor.</p>\r\n                                    </li>\r\n                                </ul>\r\n                                <Inject services={[Toolbar, Image, Link, HtmlEditor, Count, QuickToolbar, PasteCleanup]}/>\r\n                            </RichTextEditorComponent>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='col-lg-4 property-section' id=\"rteAPIProperty\">\r\n                    <PropertyPane title='Properties'>\r\n                        <table id=\"property\" title=\"Properties\" className=\"pasteStyle\" style={{ width: '100%', margin: '10px' }}>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td style={{ padding: '8px', width: '50%' }}><div>Prompt </div></td>\r\n                                    <td>\r\n                                        <div style={{ paddingLeft: '10px' }}>\r\n                                            <DropDownListComponent id=\"formattingOption\" dataSource={this.formatData} ref={(dropdownlist) => { this.formatOption = dropdownlist; }} fields={this.fields} change={this.formatChange.bind(this)} value={this.value} popupHeight={this.popupHeight}/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ padding: '8px', width: '50%' }}><div>Denied Tags </div></td>\r\n                                    <td>\r\n                                        <div style={{ paddingLeft: '10px' }}>\r\n                                            <input type=\"text\" id=\"deniedTags\" ref={this.deniedTagsRef} className=\"e-input\" placeholder=\"'img[!href]', 'h1'\"/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ padding: '8px', width: '50%' }}><div>Denied Attributes </div></td>\r\n                                    <td>\r\n                                        <div style={{ paddingLeft: '10px' }}>\r\n                                            <input id=\"deniedAttributes\" ref={this.deniedAttributesRef} type=\"text\" className=\"e-input\" placeholder=\"'id', 'title'\"/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ padding: '8px', width: '50%' }}><div>Allowed Style Properties </div></td>\r\n                                    <td>\r\n                                        <div style={{ paddingLeft: '10px' }}>\r\n                                            <input id=\"allowedStyleProperties\" ref={this.allowedStylePropertiesRef} type=\"text\" className=\"e-input\" placeholder=\"'href', 'style'\"/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </PropertyPane>\r\n                </div>\r\n\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<PasteCleanupRTE />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}