{"index.css":"#rtePreview .e-richtexteditor textarea.e-content#markdownPreview_editable-content {\r\n    float: left;\r\n    border-right: 1px solid rgba(0, 0, 0, 0.12);\r\n}\r\n#rtePreview #markdownPreview .e-richtexteditor .e-rte-content .e-content{\r\n    min-height: 150px;\r\n}\r\n\r\n#rtePreview .e-icon-btn.e-active .e-md-preview::before {\r\n    content: '\\e350';\r\n}\r\n\r\n#rtePreview .e-icon-btn .e-md-preview::before {\r\n    content: '\\e345';\r\n}\r\n\r\n.bootstrap4 #rtePreview .e-icon-btn.e-active .e-md-preview::before {\r\n    content: '\\e790';\r\n}\r\n\r\n.bootstrap4 #rtePreview .e-icon-btn .e-md-preview::before {\r\n    content: '\\e787';\r\n}\r\n\r\n#rtePreview .e-rte-content #markdownPreviewhtml-preview.e-content {\r\n    float: right;\r\n    width: 50%;\r\n    overflow: auto;\r\n    height: inherit;\r\n    height: 100%;\r\n}\r\n\r\n#rtePreview #markdownPreview .e-rte-content .e-content.e-pre-source {\r\n    width: 100%;\r\n}\r\n\r\n.sb-header {\r\n    z-index: 100 !important;\r\n}\r\n\r\n#rtePreview .content-wrapper {\r\n    width: auto;\r\n    margin: 0;\r\n}\r\n\r\n.sb-content.e-view.hide-header {\r\n    top: 0 !important;\r\n}\r\n\r\n.sb-header.e-view.hide-header {\r\n    display: none;\r\n}","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * RichTextEditor markdown preview sample\r\n */\r\nimport { addClass, Browser, createElement, isNullOrUndefined, removeClass } from '@syncfusion/ej2-base';\r\nimport { Image, Inject, Link, MarkdownEditor, QuickToolbar, RichTextEditorComponent, Table, Toolbar } from '@syncfusion/ej2-react-richtexteditor';\r\nimport * as Marked from 'marked';\r\nimport * as React from 'react';\r\nimport { SampleBase } from './sample-base';\r\n\r\nexport class Preview extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        // set the value to RichTextEditor\r\n        this.value = `In RichTextEditor , you click the toolbar buttons to format the words and the changes are visible immediately. \r\nMarkdown is not like that. When you format the word in Markdown format, you need to add Markdown syntax to the word to indicate which words \r\nand phrases should look different from each other\r\n    \r\nRichTextEditor supports markdown editing when the editorMode set as **markdown** and using both *keyboard interaction* and *toolbar action*, you can apply the formatting to text.\r\n    \r\nWe can add our own custom formation syntax for the Markdown formation, [sample link](https://ej2.syncfusion.com/home/).\r\n    \r\nThe third-party library <b>Marked</b> is used in this sample to convert markdown into HTML content`;\r\n        // RichTextEditor items list\r\n        this.items = ['Bold', 'Italic', 'StrikeThrough', '|', 'Formats', 'OrderedList', 'UnorderedList', '|', 'CreateLink', 'Image', 'CreateTable', '|',\r\n            {\r\n                tooltipText: 'Preview', template: '<button id=\"preview-code\" class=\"e-tbar-btn e-control e-btn e-icon-btn\">' +\r\n                    '<span class=\"e-btn-icon e-md-preview e-icons\"></span></button>'\r\n            },\r\n            {\r\n                tooltipText: 'Split Editor', template: '<button id=\"MD_Preview\" class=\"e-tbar-btn e-control e-btn e-icon-btn\">' +\r\n                    '<span class=\"e-btn-icon e-view-side e-icons\"></span></button>'\r\n            }, 'FullScreen', '|', 'Undo', 'Redo'];\r\n        //RichTextEditor ToolbarSettings\r\n        this.toolbarSettings = {\r\n            items: this.items\r\n        };\r\n    }\r\n    markdownConversion() {\r\n        if (this.mdSplit.classList.contains('e-active')) {\r\n            let id = this.rteObj.getID() + 'html-view';\r\n            let htmlPreview = this.rteObj.element.querySelector('#' + id);\r\n            this.htmlPreview.innerHTML = Marked(this.rteObj.contentModule.getEditPanel().value);\r\n        }\r\n    }\r\n    fullPreview(e) {\r\n        let id = this.rteObj.getID() + 'html-preview';\r\n        this.htmlPreview = this.rteObj.element.querySelector('#' + id);\r\n        if ((this.mdsource.classList.contains('e-active') || this.mdSplit.classList.contains('e-active')) && e.mode) {\r\n            this.mdsource.classList.remove('e-active');\r\n            this.mdSplit.classList.remove('e-active');\r\n            this.mdsource.parentElement.title = 'Preview';\r\n            this.textArea.style.display = 'block';\r\n            this.textArea.style.width = '100%';\r\n            this.htmlPreview.style.display = 'none';\r\n        }\r\n        else {\r\n            this.mdsource.classList.add('e-active');\r\n            this.mdSplit.classList.add('e-active');\r\n            if (!this.htmlPreview) {\r\n                this.htmlPreview = createElement('div', { className: 'e-content' });\r\n                this.htmlPreview.id = id;\r\n                this.textArea.parentNode.appendChild(this.htmlPreview);\r\n            }\r\n            if (e.type === 'preview') {\r\n                this.textArea.style.display = 'none';\r\n                this.htmlPreview.classList.add('e-pre-source');\r\n            }\r\n            else {\r\n                this.htmlPreview.classList.remove('e-pre-source');\r\n                this.textArea.style.width = '50%';\r\n            }\r\n            this.htmlPreview.style.display = 'block';\r\n            this.htmlPreview.innerHTML = Marked(this.rteObj.contentModule.getEditPanel().value);\r\n            this.mdsource.parentElement.title = 'Code View';\r\n        }\r\n    }\r\n    rendereComplete() {\r\n        this.textArea = this.rteObj.contentModule.getEditPanel();\r\n        this.textArea.addEventListener('keyup', (e) => { this.markdownConversion(); });\r\n        let rteObj = this.rteObj;\r\n        this.mdsource = document.getElementById('preview-code');\r\n        this.mdsource.addEventListener('click', (e) => {\r\n            this.fullPreview({ mode: true, type: 'preview' });\r\n            if (e.currentTarget.classList.contains('e-active')) {\r\n                rteObj.disableToolbarItem(['Bold', 'Italic', 'StrikeThrough', '|',\r\n                    'Formats', 'OrderedList', 'UnorderedList', '|',\r\n                    'CreateLink', 'Image', 'CreateTable', 'Undo', 'Redo']);\r\n                e.currentTarget.parentElement.nextElementSibling.classList.add('e-overlay');\r\n            }\r\n            else {\r\n                rteObj.enableToolbarItem(['Bold', 'Italic', 'StrikeThrough', '|',\r\n                    'Formats', 'OrderedList', 'UnorderedList', '|',\r\n                    'CreateLink', 'Image', 'CreateTable', 'Undo', 'Redo']);\r\n                e.currentTarget.parentElement.nextElementSibling.classList.remove('e-overlay');\r\n            }\r\n        });\r\n        this.mdSplit = document.getElementById('MD_Preview');\r\n        this.mdSplit.addEventListener('click', (e) => {\r\n            if (rteObj.element.classList.contains('e-rte-full-screen')) {\r\n                this.fullPreview({ mode: true, type: '' });\r\n            }\r\n            this.mdsource.classList.remove('e-active');\r\n            if (!rteObj.element.classList.contains('e-rte-full-screen')) {\r\n                rteObj.showFullScreen();\r\n            }\r\n        });\r\n    }\r\n    actionComplete(e) {\r\n        if (e.targetItem === 'Maximize' && isNullOrUndefined(e.args)) {\r\n            this.fullPreview({ mode: true, type: '' });\r\n        }\r\n        else if (!this.mdSplit.parentElement.classList.contains('e-overlay')) {\r\n            if (e.targetItem === 'Minimize') {\r\n                this.textArea.style.display = 'block';\r\n                this.textArea.style.width = '100%';\r\n                if (this.htmlPreview) {\r\n                    this.htmlPreview.style.display = 'none';\r\n                }\r\n                this.mdSplit.classList.remove('e-active');\r\n                this.mdsource.classList.remove('e-active');\r\n            }\r\n            this.markdownConversion();\r\n        }\r\n        this.rteObj.toolbarModule.refreshToolbarOverflow();\r\n    }\r\n    handleFullScreen(e) {\r\n        let sbCntEle = document.querySelector('.sb-content.e-view');\r\n        let sbHdrEle = document.querySelector('.sb-header.e-view');\r\n        let leftBar;\r\n        let transformElement;\r\n        if (Browser.isDevice) {\r\n            leftBar = document.querySelector('#right-sidebar');\r\n            transformElement = document.querySelector('.sample-browser.e-view.e-content-animation');\r\n        }\r\n        else {\r\n            leftBar = document.querySelector('#left-sidebar');\r\n            transformElement = document.querySelector('#right-pane');\r\n        }\r\n        if (e.targetItem === 'Maximize') {\r\n            if (Browser.isDevice && Browser.isIos) {\r\n                addClass([sbCntEle, sbHdrEle], ['hide-header']);\r\n            }\r\n            addClass([leftBar], ['e-close']);\r\n            removeClass([leftBar], ['e-open']);\r\n            if (!Browser.isDevice) {\r\n                transformElement.style.marginLeft = '0px';\r\n            }\r\n            transformElement.style.transform = 'inherit';\r\n        }\r\n        else if (e.targetItem === 'Minimize') {\r\n            if (Browser.isDevice && Browser.isIos) {\r\n                removeClass([sbCntEle, sbHdrEle], ['hide-header']);\r\n            }\r\n            removeClass([leftBar], ['e-close']);\r\n            if (!Browser.isDevice) {\r\n                addClass([leftBar], ['e-open']);\r\n                transformElement.style.marginLeft = leftBar.offsetWidth + 'px';\r\n            }\r\n            transformElement.style.transform = 'translateX(0px)';\r\n        }\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className='control-section' id=\"rtePreview\">\r\n                    <div className=\"content-wrapper\">\r\n                        <RichTextEditorComponent id=\"markdownPreview\" actionBegin={this.handleFullScreen.bind(this)} actionComplete={this.actionComplete.bind(this)} editorMode='Markdown' height='300px' ref={(richtexteditor) => { this.rteObj = richtexteditor; }} value={this.value} toolbarSettings={this.toolbarSettings}>\r\n                            <Inject services={[MarkdownEditor, Toolbar, Image, Link, QuickToolbar, Table]}/>\r\n                        </RichTextEditorComponent>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<Preview />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}