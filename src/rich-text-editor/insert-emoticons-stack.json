{"index.css":".e-rte-custom-tbar-section #special_char,\r\n.e-rte-custom-tbar-section .char_block {\r\n    display: inline-block;\r\n}\r\n\r\n#rteSection{\r\n    height: 500px;\r\n}\r\n\r\n    #custom_tbar,\r\n    #custom_tbar div{\r\n        cursor: pointer;\r\n    }\r\n\r\n    #rteSpecial_char {\r\n        padding: 15px 0 15px 0;\r\n    }\r\n\r\n    .material .e-rte-custom-tbar-section .char_block.e-active {\r\n        outline: 1px solid #e3165b;\r\n        border-color: #e3165b;\r\n    }\r\n\r\n    .fabric .e-rte-custom-tbar-section .char_block.e-active {\r\n        outline: 1px solid #0078d6;\r\n        border-color: #0078d6;\r\n    }\r\n\r\n    .bootstrap .e-rte-custom-tbar-section .char_block.e-active {\r\n        outline: 1px solid #317ab9;\r\n        border-color: #317ab9;\r\n    }\r\n    #rteEmoticons-smiley , #rteEmoticons-animal {\r\n        padding: 15px 0 15px 8px;\r\n    }\r\n\r\n    .highcontrast .e-rte-custom-tbar-section .char_block.e-active {\r\n        outline: 1px solid #ffd939;\r\n        border-color: #ffd939;\r\n    }\r\n\r\n    .fabric.e-bigger .e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn.e-btn .e-tbar-btn-text,\r\n    .highcontrast.e-bigger .e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn.e-btn .e-tbar-btn-text {\r\n        padding-right: 10px;\r\n    }\r\n\r\n    .bootstrap.e-bigger .e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn.e-btn .e-tbar-btn-text,\r\n    .bootstrap .e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn.e-btn .e-tbar-btn-text {\r\n        padding-right: 6px;\r\n    }\r\n\r\n    .fabric .e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn.e-btn .e-tbar-btn-text,\r\n    .highcontrast .e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn.e-btn .e-tbar-btn-text {\r\n        padding-right: 8px;\r\n    }\r\n\r\n    .e-rte-custom-tbar-section .char_block {\r\n        width: 30px;\r\n        height: 30px;\r\n        line-height: 30px;\r\n        margin: 0 5px 5px 0;\r\n        text-align: center;\r\n        vertical-align: middle;\r\n        border: 1px solid #DDDDDD;\r\n        font-size: 20px;\r\n        cursor: pointer;\r\n        user-select: none;\r\n    }\r\n\r\n    #rteCustomTool .e-richtexteditor .e-rte-content .e-content {\r\n        float: left;\r\n        width: 100%;\r\n    }\r\n\r\n    #rteCustomTool .content-wrapper {\r\n        width: auto;\r\n        margin: 0;\r\n    }\r\n\r\n    #custom_tbar div{\r\n        font-size: 16px;\r\n    }\r\n\r\n    .e-bigger #custom_tbar div{\r\n        font-size: 18px;\r\n    }\r\n\r\n    @media (min-width: 320px) and (max-width: 480px) {\r\n        .fabric.e-bigger #customTbarDlg {\r\n            min-width: 281px;\r\n        }\r\n\r\n        .fabric #customTbarDlg {\r\n            min-width: 241px;\r\n        }\r\n\r\n        .bootstrap.e-bigger #customTbarDlg,\r\n        .bootstrap #customTbarDlg {\r\n            min-width: 223px;\r\n        }\r\n        #rteEmoticons-smiley , #rteEmoticons-animal {\r\n            padding: 15px 0 15px 8px;\r\n        }\r\n        #rteSection {\r\n            height: 500px;\r\n        }\r\n        .highcontrast.e-bigger #customTbarDlg {\r\n            min-width: 283px;\r\n        }\r\n        .highcontrast #customTbarDlg {\r\n            min-width: 243px;\r\n        }\r\n        .material #customTbarDlg {\r\n            min-width: 224px;\r\n        }\r\n        .material.e-bigger #customTbarDlg {\r\n            min-width: 236px;\r\n        }\r\n    }\r\n\r\n#rteSection {\r\n    height: 500px;\r\n}","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * RichTextEditor custom toolbar sample\r\n */\r\nimport { TabComponent, TabItemDirective, TabItemsDirective } from '@syncfusion/ej2-react-navigations';\r\nimport { DialogComponent } from '@syncfusion/ej2-react-popups';\r\nimport { HtmlEditor, Image, Inject, Link, NodeSelection, QuickToolbar, RichTextEditorComponent, Toolbar } from '@syncfusion/ej2-react-richtexteditor';\r\nimport * as React from 'react';\r\nimport { SampleBase } from './sample-base';\r\n\r\nexport class InsertEmoticons extends SampleBase {\r\n    constructor(props) {\r\n        super(props);\r\n        this.selection = new NodeSelection();\r\n        this.smileys = [\r\n            { content: '&#128512;', title: 'Grinning face' },\r\n            { content: '&#128513;', title: 'Grinning face with smiling eyes' },\r\n            { content: '&#128514;', title: 'Face with tears of joy' },\r\n            { content: '&#128515;', title: 'Smiling face with open mouth' },\r\n            { content: '&#128516;', title: 'Smiling face with open mouth and smiling eyes' },\r\n            { content: '&#128517;', title: 'Smiling face with open mouth and cold sweat' },\r\n            { content: '&#128518;', title: 'Smiling face with open mouth and tightly-closed eyes' },\r\n            { content: '&#128519;', title: 'Smiling face with halo' },\r\n            { content: '&#128520;', title: 'Smiling face with horns' },\r\n            { content: '&#128521;', title: 'Winking face' },\r\n            { content: '&#128522;', title: 'Smiling face with smiling eyes' },\r\n            { content: '&#128523;', title: 'Face savouring delicious food' },\r\n            { content: '&#128524;', title: 'Relieved face' },\r\n            { content: '&#128525;', title: 'Smiling face with heart-shaped eyes' },\r\n            { content: '&#128526;', title: 'Smiling face with sunglasses' },\r\n            { content: '&#128527;', title: 'Smirking face\"' },\r\n            { content: '&#128528;', title: 'Neutral face' },\r\n            { content: '&#128529;', title: 'Expressionless face' },\r\n            { content: '&#128530;', title: 'Unamused face' },\r\n            { content: '&#128531;', title: 'Face with cold sweat' },\r\n            { content: '&#128532;', title: 'Pensive face' },\r\n            { content: '&#128533;', title: 'Confused face' },\r\n            { content: '&#128534;', title: 'Confounded face' },\r\n            { content: '&#128535;', title: 'Kissing face' },\r\n            { content: '&#128536;', title: 'Face throwing a kiss' },\r\n            { content: '&#128538;', title: 'Kissing face with smiling eyes' },\r\n            { content: '&#128539;', title: 'Face with stuck-out tongue' },\r\n            { content: '&#128540;', title: 'Face with stuck-out tongue and winking eye' },\r\n            { content: '&#128541;', title: 'Face with stuck-out tongue and tightly-closed eyes' },\r\n            { content: '&#128542;', title: 'Disappointed face' },\r\n            { content: '&#128543;', title: 'Worried face' },\r\n            { content: '&#128544;', title: 'Angry face' },\r\n            { content: '&#128545;', title: 'Pouting face' },\r\n            { content: '&#128546;', title: 'Crying face' },\r\n            { content: '&#128547;', title: 'Persevering face' },\r\n            { content: '&#128548;', title: 'Face with look of triumph' },\r\n            { content: '&#128549;', title: 'Disappointed but relieved face' },\r\n            { content: '&#128550;', title: 'Frowning face with open mouth' },\r\n            { content: '&#128551;', title: 'Anguished face' },\r\n            { content: '&#128552;', title: 'Fearful face' },\r\n            { content: '&#128553;', title: 'Weary face' },\r\n            { content: '&#128554;', title: 'Sleepy face' },\r\n            { content: '&#128555;', title: 'Tired face' },\r\n            { content: '&#128556;', title: 'Grimacing face' },\r\n            { content: '&#128557;', title: 'Loudly crying face' },\r\n            { content: '&#128558;', title: 'Face with open mouth' },\r\n            { content: '&#128559;', title: 'Hushed face' },\r\n            { content: '&#128560;', title: 'Face with open mouth and cold sweat' },\r\n            { content: '&#128561;', title: 'Face screaming in fear' },\r\n            { content: '&#128562;', title: 'Astonished face' },\r\n            { content: '&#128563;', title: 'Flushed face' },\r\n            { content: '&#128564;', title: 'Sleeping face' },\r\n            { content: '&#128565;', title: 'char_block' },\r\n        ];\r\n        this.animals = [\r\n            { title: 'Monkey Face', content: '&#128053;' },\r\n            { title: 'Monkey', content: '&#128018;' },\r\n            { title: 'Gorilla', content: '&#129421;' },\r\n            { title: 'Dog Face', content: '&#128054;' },\r\n            { title: 'Dog', content: '&#128021;' },\r\n            { title: 'Poodle', content: '&#128041;' },\r\n            { title: 'Wolf Face', content: '&#128058;' },\r\n            { title: 'Fox Face', content: '&#129418;' },\r\n            { title: 'Cat Face', content: '&#128049;' },\r\n            { title: 'Cat', content: '&#128008;' },\r\n            { title: 'Lion Face', content: '&#129409;' },\r\n            { title: 'Tiger Face', content: '&#128047;' },\r\n            { title: 'Tiger', content: '&#128005;' },\r\n            { title: 'Leopard', content: '&#128006;' },\r\n            { title: 'Horse Face', content: '&#128052;' },\r\n            { title: 'Horse', content: '&#128014;' },\r\n            { title: 'Unicorn Face', content: '&#129412;' },\r\n            { title: 'Deer', content: '&#129420;' },\r\n            { title: 'Cow Face', content: '&#128046;' },\r\n            { title: 'Ox', content: '&#128002;' },\r\n            { title: 'Water Buffalo', content: '&#128003;' },\r\n            { title: 'Cow', content: '&#128004;' },\r\n            { title: 'Pig Face', content: '&#128055;' },\r\n            { title: 'Pig', content: '&#128022;' },\r\n            { title: 'Boar', content: '&#128023;' },\r\n            { title: 'Pig Nose', content: '&#128061;' },\r\n            { title: 'Ram', content: '&#128015;' },\r\n            { title: 'Ewe', content: '&#128017;' },\r\n            { title: 'Goat', content: '&#128016;' },\r\n            { title: 'Camel', content: '&#128042;' },\r\n            { title: 'Two-Hump Camel', content: '&#128043;' },\r\n            { title: 'Elephant', content: '&#128024;' },\r\n            { title: 'Rhinoceros', content: '&#129423;' },\r\n            { title: 'Mouse Face', content: '&#128045;' },\r\n            { title: 'Mouse', content: '&#128001;' },\r\n            { title: 'Rat', content: '&#128000;' },\r\n            { title: 'Hamster Face', content: '&#128057;' },\r\n            { title: 'Rabbit Face', content: '&#128048;' },\r\n            { title: 'Rabbit', content: '&#128007;' },\r\n            { title: 'Chipmunk', content: '&#128063;' },\r\n            { title: 'Bat', content: '&#129415;' },\r\n            { title: 'Bear Face', content: '&#128059;' },\r\n            { title: 'Koala', content: '&#128040;' },\r\n            { title: 'Panda Face', content: '&#128060;' },\r\n            { title: 'Paw Prints', content: '&#128062;' },\r\n            { title: 'Frog Face', content: '&#128056;' },\r\n            { title: 'Crocodile', content: '&#128010;' },\r\n            { title: 'Turtle', content: '&#128034;' },\r\n            { title: 'Lizard', content: '&#129422;' },\r\n            { title: 'Snake', content: '&#128013;' },\r\n            { title: 'Dragon Face', content: '&#128050;' },\r\n            { title: 'Dragon', content: '&#128009;' },\r\n            { title: 'Sauropod', content: '&#129429;' },\r\n            { title: 'T-Rex', content: '&#129430;' },\r\n        ];\r\n        // RichTextEditor items list\r\n        this.items = ['Bold', 'Italic', 'Underline', '|', 'Formats', 'Alignments', 'OrderedList',\r\n            'UnorderedList', '|', 'CreateLink', 'Image', '|', 'SourceCode',\r\n            {\r\n                tooltipText: 'Insert Emoticons',\r\n                template: '<button class=\"e-tbar-btn e-btn\" tabindex=\"-1\" id=\"custom_tbar\"  style=\"width:100%\"><div class=\"e-tbar-btn-text\" style=\"font-weight: 500;\">&#128578;</div></button>'\r\n            }, '|', 'Undo', 'Redo'\r\n        ];\r\n        //RichTextEditor ToolbarSettings\r\n        this.toolbarSettings = {\r\n            items: this.items\r\n        };\r\n        this.dlgButtons = [{ buttonModel: { content: \"Insert\", isPrimary: true }, click: this.onInsert.bind(this) },\r\n            { buttonModel: { content: 'Cancel' }, click: this.onCancel }];\r\n        this.header = 'Insert Emoticons';\r\n        this.target = this.rteSectionEle;\r\n        this.height = 'auto';\r\n        this.rteSectionEle = null;\r\n        this.rteSectionRef = element => {\r\n            this.rteSectionEle = element;\r\n        };\r\n    }\r\n    onCreate() {\r\n        this.customBtn = document.getElementById('custom_tbar');\r\n        this.customBtn.onclick = (e) => {\r\n            this.rteObj.contentModule.getEditPanel().focus();\r\n            this.dialogObj.element.style.display = '';\r\n            this.range = this.selection.getRange(document);\r\n            this.saveSelection = this.selection.save(this.range, document);\r\n            this.dialogObj.content = this.tabObj.element;\r\n            this.dialogObj.show();\r\n        };\r\n    }\r\n    dialogCreate() {\r\n        this.dialogCtn = this.tabObj.element;\r\n        this.dialogCtn.onclick = (e) => {\r\n            let target = e.target;\r\n            let activeEle = this.dialogObj.element.querySelector('.char_block.e-active');\r\n            if (target.classList.contains('char_block')) {\r\n                target.classList.add('e-active');\r\n                if (activeEle) {\r\n                    activeEle.classList.remove('e-active');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    onInsert() {\r\n        let activeEle = this.dialogObj.element.querySelector('.char_block.e-active');\r\n        if (activeEle) {\r\n            if (this.rteObj.formatter.getUndoRedoStack().length === 0) {\r\n                this.rteObj.formatter.saveData();\r\n            }\r\n            this.saveSelection.restore();\r\n            this.rteObj.executeCommand('insertText', activeEle.textContent);\r\n            this.rteObj.formatter.saveData();\r\n            this.rteObj.formatter.enableUndo(this.rteObj);\r\n        }\r\n        this.dialogOverlay();\r\n    }\r\n    dialogOverlay() {\r\n        let activeEle = this.dialogObj.element.querySelector('.char_block.e-active');\r\n        if (activeEle) {\r\n            activeEle.classList.remove('e-active');\r\n        }\r\n        this.dialogObj.hide();\r\n    }\r\n    onOpen() {\r\n        this.tabObj.refresh();\r\n    }\r\n    onCancel() {\r\n        let activeEle = this.element.querySelector('.char_block.e-active');\r\n        if (activeEle) {\r\n            activeEle.classList.remove('e-active');\r\n        }\r\n        this.hide();\r\n    }\r\n    actionCompleteHandler(e) {\r\n        if (e.requestType === 'SourceCode') {\r\n            this.rteObj.getToolbar().querySelector('#custom_tbar').parentElement.classList.add('e-overlay');\r\n        }\r\n        else if (e.requestType === 'Preview') {\r\n            this.rteObj.getToolbar().querySelector('#custom_tbar').parentElement.classList.remove('e-overlay');\r\n        }\r\n    }\r\n    render() {\r\n        let headerText = [{ text: \"&#128578;\" }, { text: \"&#128053;\" }];\r\n        var smileyItems = this.smileys.map(function (smiley) {\r\n            return (<div className='char_block' title={smiley.title} dangerouslySetInnerHTML={{ __html: smiley.content }}></div>);\r\n        });\r\n        var animalItems = this.animals.map(function (animal) {\r\n            return (<div className='char_block' title={animal.title} dangerouslySetInnerHTML={{ __html: animal.content }}></div>);\r\n        });\r\n        return (<div className='control-pane'>\r\n        <div className='control-section e-rte-custom-tbar-section' id=\"rteCustomTool\">\r\n          <div className='rte-control-section' ref={this.rteSectionRef} id='rteSection'>\r\n            <RichTextEditorComponent id=\"EmotionIconstRTE\" ref={(scope) => { this.rteObj = scope; }} toolbarSettings={this.toolbarSettings} actionComplete={this.actionCompleteHandler.bind(this)} created={this.onCreate.bind(this)}>\r\n              <div style={{ display: 'block;' }}><p style={{ marginRight: '10px' }}>The custom command \"insert emoticons\" is configured as the last item of the toolbar. Click on the command and choose the special character you want to include from the popup.</p></div>\r\n              <Inject services={[HtmlEditor, Toolbar, Link, Image, QuickToolbar]}/>\r\n            </RichTextEditorComponent>\r\n            <DialogComponent id='customTbarDlg' ref={(scope) => { this.dialogObj = scope; }} buttons={this.dlgButtons} overlayClick={this.dialogOverlay.bind(this)} header={this.header} visible={false} showCloseIcon={false} width='43%' target={'#rteSection'} height={this.height} open={this.onOpen.bind(this)} isModal={true}>\r\n            </DialogComponent>\r\n            <div id=\"tabControl\" style={{ display: 'none' }}>\r\n              <TabComponent id='defaultTab' ref={(tab) => { this.tabObj = tab; }} created={this.dialogCreate.bind(this)}>\r\n                <TabItemsDirective>\r\n                  <TabItemDirective header={headerText[0]} content='#rteEmoticons-smiley'/>\r\n                  <TabItemDirective header={headerText[1]} content='#rteEmoticons-animal'/>\r\n                </TabItemsDirective>\r\n              </TabComponent>\r\n            </div>\r\n            <div id=\"rteSpecial_char\" style={{ display: 'none' }}>\r\n              <div id='rteEmoticons-smiley'>\r\n                {smileyItems}\r\n              </div>\r\n\r\n              <div id='rteEmoticons-animal'>\r\n                {animalItems}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>);\r\n    }\r\n}\r\n\nrender(<InsertEmoticons />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}