{"index.css":"#rteTypes .property-section {\r\n    top: -20px;\r\n    width: 200px;\r\n}\r\n\r\n#rteTypes img {\r\n    width: 300px;\r\n}\r\n\r\n.sb-header {\r\n    z-index: 100 !important;\r\n}\r\n\r\n#rteTypes .e-richtexteditor .e-rte-content .e-content {\r\n    float: left;\r\n    width: 100%;\r\n}\r\n\r\n#rteTypes .e-richtexteditor .e-rte-content {\r\n    height: 100%;\r\n}\r\n\r\n#rteTypes {\r\n    padding-right: 10px;\r\n}\r\n\r\n#rteTypes .property-panel-content {\r\n    overflow: inherit;\r\n    min-height: 0;\r\n}\r\n\r\n#rteTypes .content-wrapper {\r\n    width: auto;\r\n    margin: 0;\r\n}\r\n\r\n#rteTypes .property-panel-header {\r\n    padding-top: 22px;\r\n    padding-bottom: 20px;\r\n}\r\n\r\n#rteTypes .property-panel-content div {\r\n    padding-left: 0;\r\n}\r\n\r\n.sb-content.e-view.hide-header {\r\n    top: 0 !important;\r\n}\r\n\r\n.sb-header.e-view.hide-header {\r\n    display: none;\r\n}","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * RichTextEditor toolbar types sample\r\n */\r\nimport { addClass, Browser, removeClass } from '@syncfusion/ej2-base';\r\nimport { CheckBoxComponent } from '@syncfusion/ej2-react-buttons';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { HtmlEditor, Image, Inject, Link, QuickToolbar, RichTextEditorComponent, Toolbar, ToolbarType } from '@syncfusion/ej2-react-richtexteditor';\r\nimport * as React from 'react';\r\nimport { PropertyPane } from './property-pane';\r\nimport { SampleBase } from './sample-base';\r\n\r\nexport class Type extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        // RichTextEditor items list\r\n        this.items = ['Bold', 'Italic', 'Underline', 'StrikeThrough',\r\n            'FontName', 'FontSize', 'FontColor', 'BackgroundColor',\r\n            'LowerCase', 'UpperCase', '|',\r\n            'Formats', 'Alignments', 'OrderedList', 'UnorderedList',\r\n            'Outdent', 'Indent', '|',\r\n            'CreateLink', 'Image', '|', 'ClearFormat', 'Print',\r\n            'SourceCode', 'FullScreen', '|', 'Undo', 'Redo'];\r\n        //RichTextEditor ToolbarSettings\r\n        this.toolbarSettings = {\r\n            type: ToolbarType.Expand,\r\n            items: this.items,\r\n            enableFloating: false\r\n        };\r\n        this.ddlValue = [\r\n            { Id: '1', Text: 'Expand' },\r\n            { Id: '2', Text: 'MultiRow' }\r\n        ];\r\n        // maps the appropriate column to fields property\r\n        this.fields = { text: 'Text', value: 'Id' };\r\n        // set the value to select an item based on mapped value at initial rendering\r\n        this.ddlSelectedValue = '1';\r\n    }\r\n    onChange(args) {\r\n        switch (args.value) {\r\n            case '1':\r\n                this.rteObj.toolbarSettings.type = ToolbarType.Expand;\r\n                break;\r\n            case '2':\r\n                this.rteObj.toolbarSettings.type = ToolbarType.MultiRow;\r\n                break;\r\n        }\r\n    }\r\n    onFloatChange(args) {\r\n        this.rteObj.toolbarSettings.enableFloating = args.checked;\r\n    }\r\n    handleFullScreen(e) {\r\n        let sbCntEle = document.querySelector('.sb-content.e-view');\r\n        let sbHdrEle = document.querySelector('.sb-header.e-view');\r\n        let leftBar;\r\n        let transformElement;\r\n        if (Browser.isDevice) {\r\n            leftBar = document.querySelector('#right-sidebar');\r\n            transformElement = document.querySelector('.sample-browser.e-view.e-content-animation');\r\n        }\r\n        else {\r\n            leftBar = document.querySelector('#left-sidebar');\r\n            transformElement = document.querySelector('#right-pane');\r\n        }\r\n        if (e.targetItem === 'Maximize') {\r\n            if (Browser.isDevice && Browser.isIos) {\r\n                addClass([sbCntEle, sbHdrEle], ['hide-header']);\r\n            }\r\n            addClass([leftBar], ['e-close']);\r\n            removeClass([leftBar], ['e-open']);\r\n            if (!Browser.isDevice) {\r\n                transformElement.style.marginLeft = '0px';\r\n            }\r\n            transformElement.style.transform = 'inherit';\r\n        }\r\n        else if (e.targetItem === 'Minimize') {\r\n            if (Browser.isDevice && Browser.isIos) {\r\n                removeClass([sbCntEle, sbHdrEle], ['hide-header']);\r\n            }\r\n            removeClass([leftBar], ['e-close']);\r\n            if (!Browser.isDevice) {\r\n                addClass([leftBar], ['e-open']);\r\n                transformElement.style.marginLeft = leftBar.offsetWidth + 'px';\r\n            }\r\n            transformElement.style.transform = 'translateX(0px)';\r\n        }\r\n    }\r\n    actionCompleteHandler() {\r\n        setTimeout(() => { this.rteObj.toolbarModule.refreshToolbarOverflow(); }, 400);\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n        <div className='control-section' id='rteTypes'>\r\n          <div className='col-lg-8' style={{ paddingBottom: '20px' }}>\r\n            <RichTextEditorComponent id=\"typesRTE\" ref={(scope) => { this.rteObj = scope; }} floatingToolbarOffset={0} toolbarSettings={this.toolbarSettings} actionBegin={this.handleFullScreen.bind(this)} actionComplete={this.actionCompleteHandler.bind(this)}>\r\n              <p>The rich text editor is WYSIWYG (\"what you see is what you get\") editor useful to create and edit content, and return the valid HTML markup or markdown of the content</p>\r\n              <p><b>Toolbar</b></p>\r\n              <ol>\r\n                <li>\r\n                  <p>Toolbar contains commands to align the text, insert link, insert image, insert list, undo/redo operations, HTML view, etc </p>\r\n                </li>\r\n                <li>\r\n                  <p>Toolbar is fully customizable </p>\r\n                </li>\r\n              </ol>\r\n              <p><b>Links</b></p>\r\n              <ol>\r\n                <li>\r\n                  <p>You can insert a hyperlink with its corresponding dialog </p>\r\n                </li>\r\n                <li>\r\n                  <p>Attach a hyperlink to the displayed text. </p>\r\n                </li>\r\n                <li>\r\n                  <p>Customize the quick toolbar based on the hyperlink </p>\r\n                </li>\r\n              </ol>\r\n              <p><b>Validation</b></p>\r\n              <ul>\r\n                <li>\r\n                  <p>The editorâ€™s content can be validated on form submission by applying validation rules and validation message</p>\r\n                </li>\r\n              </ul>\r\n              <p><b>Locale.</b></p>\r\n              <ul>\r\n                <li>\r\n                  <p>The editor provides an option to localize its static strings to adapt the editor to a local language.</p>\r\n                </li>\r\n              </ul>\r\n              <p><b>Image.</b></p>\r\n              <ol>\r\n                <li>\r\n                  <p>Allows you to insert images from an online source as well as the local computer </p>\r\n                </li>\r\n                <li>\r\n                  <p>You can upload an image </p>\r\n                </li>\r\n                <li>\r\n                  <p>Provides an option to customize quick toolbar for an image </p>\r\n                </li>\r\n              </ol>\r\n              <img alt=\"Logo\" src=\"////npmci.syncfusion.com/development/react/demos/src/rich-text-editor/images/RTEImage-Feather.png\"/>\r\n              <Inject services={[Toolbar, Image, Link, HtmlEditor, QuickToolbar]}/>\r\n            </RichTextEditorComponent>\r\n          </div>\r\n          <div className='col-lg-4 property-section'>\r\n            <PropertyPane title='Properties'>\r\n              <table id=\"property\" title=\"Properties\" style={{ width: '100%', margin: '10px' }}>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>\r\n                      <div style={{ paddingLeft: '10px', paddingBottom: '10px' }}>\r\n                        <DropDownListComponent id=\"types\" dataSource={this.ddlValue} ref={(dropdownlist) => { this.listObj = dropdownlist; }} fields={this.fields} change={this.onChange.bind(this)} floatLabelType='Auto' placeholder=\"Types\" index={0} popupHeight='220px'/>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>\r\n                      <div style={{ paddingLeft: '10px' }}>\r\n                        <CheckBoxComponent checked={false} label='Enable Floating' ref={(scope) => { this.checkboxObj = scope; }} change={this.onFloatChange.bind(this)}></CheckBoxComponent>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </PropertyPane>\r\n          </div>\r\n        </div>\r\n      </div>);\r\n    }\r\n}\r\n\nrender(<Type />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}