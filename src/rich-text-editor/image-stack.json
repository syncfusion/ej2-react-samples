{"index.css":".e-rte-quick-popup .e-rte-quick-toolbar .e-rotate-left::before {\r\n    content: \"\\e341\";\r\n}\r\n\r\n.e-rte-quick-popup .e-rte-quick-toolbar .e-rotate-right::before {\r\n    content: \"\\e354\";\r\n}\r\n\r\n.bootstrap4 .e-rte-quick-popup .e-rte-quick-toolbar .e-rotate-left::before {\r\n    content: \"\\e752\";\r\n}\r\n\r\n.bootstrap4 .e-rte-quick-popup .e-rte-quick-toolbar .e-rotate-right::before {\r\n    content: \"\\e778\";\r\n}\r\n\r\n#rteImage .e-richtexteditor .e-rte-content .e-content {\r\n    float: left;\r\n    width: 100%;\r\n}\r\n\r\n#rteImage .content-wrapper {\r\n    width: auto;\r\n    margin: 0;\r\n}","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { RichTextEditorComponent, HtmlEditor, Inject, Toolbar, QuickToolbar, Image, Link } from '@syncfusion/ej2-react-richtexteditor';\r\nimport { SampleBase } from './sample-base';\r\nimport { NodeSelection } from '@syncfusion/ej2-react-richtexteditor';\r\n\r\nimport { PropertyPane } from './property-pane';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { CheckBoxComponent } from '@syncfusion/ej2-react-buttons';\r\nexport class ImageSample extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.value = \"Blob\";\r\n        this.fields = { text: \"text\", value: \"value\" };\r\n        this.formatData = [\r\n            { text: 'Blob', value: 'Blob' },\r\n            { text: 'Base64', value: 'Base64' }\r\n        ];\r\n        this.image = ['Replace', 'Align', 'Caption', 'Remove', 'InsertLink', 'OpenImageLink', '-',\r\n            'EditImageLink', 'RemoveImageLink', 'Display', 'AltText', 'Dimension',\r\n            {\r\n                tooltipText: 'Rotate Left',\r\n                template: '<button class=\"e-tbar-btn e-btn\" id=\"roatateLeft\"><span class=\"e-btn-icon e-icons e-rotate-left\"></span>'\r\n            },\r\n            {\r\n                tooltipText: 'Rotate Right',\r\n                template: '<button class=\"e-tbar-btn e-btn\" id=\"roatateRight\"><span class=\"e-btn-icon e-icons e-rotate-right\"></span>'\r\n            }];\r\n        this.quickToolbarSettings = {\r\n            image: this.image\r\n        };\r\n        this.onCheckChange = (args) => {\r\n            this.rteObj.enableAutoUrl = args.checked;\r\n        };\r\n        this.ondropChange = () => {\r\n            if (this.formatdrop.value === 'Base64') {\r\n                this.rteObj.insertImageSettings.saveFormat = 'Base64';\r\n            }\r\n            else {\r\n                this.rteObj.insertImageSettings.saveFormat = 'Blob';\r\n            }\r\n        };\r\n    }\r\n    onToolbarClick(e) {\r\n        let nodeObj = new NodeSelection();\r\n        let range = nodeObj.getRange(this.rteObj.contentModule.getDocument());\r\n        let imgEle = nodeObj.getNodeCollection(range)[0];\r\n        if (e.item.tooltipText === 'Rotate Right') {\r\n            let transform = (imgEle.style.transform === '') ? 0 :\r\n                parseInt(imgEle.style.transform.split('(')[1].split(')')[0], 10);\r\n            imgEle.style.transform = 'rotate(' + (transform + 90) + 'deg)';\r\n            this.rteObj.formatter.saveData();\r\n            this.rteObj.formatter.enableUndo(this.rteObj);\r\n        }\r\n        else if (e.item.tooltipText === 'Rotate Left') {\r\n            let transform = (imgEle.style.transform === '') ? 0 :\r\n                Math.abs(parseInt(imgEle.style.transform.split('(')[1].split(')')[0], 10));\r\n            imgEle.style.transform = 'rotate(-' + (transform + 90) + 'deg)';\r\n            this.rteObj.formatter.saveData();\r\n            this.rteObj.formatter.enableUndo(this.rteObj);\r\n        }\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className='col-lg-8'>\r\n                    <div className='control-section' id=\"rteAPI\">\r\n                        <div className='rte-control-section'>\r\n                            <RichTextEditorComponent id=\"imageRTE\" ref={(richtexteditor) => { this.rteObj = richtexteditor; }} toolbarClick={this.onToolbarClick.bind(this)} quickToolbarSettings={this.quickToolbarSettings}>\r\n                                    <p>Rich Text Editor allows to insert images from online source as well as local computer where you want to insert the image in your content.</p>\r\n                                    <p><b>Get started Quick Toolbar to click on the image</b></p>\r\n                                    <p>It is possible to add custom style on the selected image inside the RichTextEditor through quick toolbar.</p>\r\n                                    <img id='rteImageID' style={{ width: '300px', height: '300px', transform: 'rotate(0deg)' }} alt=\"Logo\" src=\"////npmci.syncfusion.com/development/react/demos/src/rich-text-editor/images/RTEImage-Feather.png\"/>\r\n                                <Inject services={[HtmlEditor, Toolbar, Image, Link, QuickToolbar]}/>\r\n                            </RichTextEditorComponent>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='col-lg-4 property-section' id=\"rteAPIProperty\">\r\n                    <PropertyPane title='Properties'>\r\n                        <table id=\"property\" title=\"Properties\" style={{ width: '100%', margin: '10px' }}>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td style={{ padding: '8px', width: '50%' }}><div>EnableAutoUrl</div></td>\r\n                                    <td>\r\n                                        <div style={{ paddingLeft: '10px' }}>\r\n                                            <CheckBoxComponent checked={false} ref={(scope) => { this.readonly = scope; }} change={this.onCheckChange.bind(this)}></CheckBoxComponent>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                <td style={{ padding: '8px', width: '50%' }}><div>Save Format </div></td>\r\n                                    <td>\r\n                                        <div style={{ paddingLeft: '10px' }}>\r\n                                        <DropDownListComponent id=\"formattingOption\" dataSource={this.formatData} ref={(dropdownlist) => { this.formatdrop = dropdownlist; }} fields={this.fields} change={this.ondropChange.bind(this)} value={this.value} popupHeight=\"200px\"/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </PropertyPane>\r\n                    </div>\r\n\r\n\r\n                </div>);\r\n    }\r\n}\r\n\nrender(<ImageSample />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}