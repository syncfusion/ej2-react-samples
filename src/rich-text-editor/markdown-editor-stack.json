{"index.css":"\r\n#rteMarkdown .e-richtexteditor textarea.e-content {\r\n    float: left;\r\n}\r\n\r\n#rteMarkdown .e-icon-btn.e-active .e-md-preview::before {\r\n    content: '\\e350';\r\n}\r\n#rteMarkdown .e-icon-btn .e-md-preview::before {\r\n    content: '\\e345';\r\n}\r\n.bootstrap4 #rteMarkdown .e-icon-btn.e-active .e-md-preview::before {\r\n    content: '\\e790';\r\n}\r\n\r\n.bootstrap4 #rteMarkdown .e-icon-btn .e-md-preview::before {\r\n    content: '\\e787';\r\n}\r\n\r\n#rteMarkdown .content-wrapper {\r\n    width: auto;\r\n    margin: 0;\r\n}","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * RichTextEditor markdown overview sample\r\n */\r\nimport { createElement } from '@syncfusion/ej2-base';\r\nimport { Image, Inject, Link, MarkdownEditor, MarkdownFormatter, QuickToolbar, RichTextEditorComponent, Table, Toolbar } from '@syncfusion/ej2-react-richtexteditor';\r\nimport * as Marked from 'marked';\r\nimport * as React from 'react';\r\nimport { SampleBase } from './sample-base';\r\n\r\nexport class MarkDown extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        // set the value to RichTextEditor\r\n        this.template = `The sample is added to showcase **markdown editing**.\r\n\r\nType or edit the content and apply formatting to view markdown formatted content.\r\n    \r\nWe can add our own custom formation syntax for the Markdown formation, [sample link](https://ej2.syncfusion.com/home/).\r\n    \r\nThe third-party library <b>Marked</b> is used in this sample to convert markdown into HTML content`;\r\n        // RichTextEditor items list\r\n        this.items = ['Bold', 'Italic', 'StrikeThrough', '|',\r\n            'Formats', 'OrderedList', 'UnorderedList', 'SuperScript', 'SubScript', '|',\r\n            'CreateLink', 'Image', 'CreateTable', '|',\r\n            {\r\n                tooltipText: 'Preview',\r\n                template: '<button id=\"preview-code\" class=\"e-tbar-btn e-control e-btn e-icon-btn\">' +\r\n                    '<span class=\"e-btn-icon e-md-preview e-icons\"></span></button>'\r\n            }, '|', 'Undo', 'Redo'];\r\n        //RichTextEditor ToolbarSettings\r\n        this.toolbarSettings = {\r\n            items: this.items\r\n        };\r\n        this.formatter = new MarkdownFormatter({ listTags: { 'OL': '1., 2., 3.' } });\r\n    }\r\n    markdownConversion() {\r\n        if (this.mdsource.classList.contains('e-active')) {\r\n            let id = this.rteObj.getID() + 'html-view';\r\n            let htmlPreview = this.rteObj.element.querySelector('#' + id);\r\n            htmlPreview.innerHTML = Marked(this.rteObj.contentModule.getEditPanel().value);\r\n        }\r\n    }\r\n    fullPreview() {\r\n        let id = this.rteObj.getID() + 'html-preview';\r\n        let htmlPreview = this.rteObj.element.querySelector('#' + id);\r\n        if (this.mdsource.classList.contains('e-active')) {\r\n            this.mdsource.classList.remove('e-active');\r\n            this.mdsource.parentElement.title = 'Preview';\r\n            this.textArea.style.display = 'block';\r\n            htmlPreview.style.display = 'none';\r\n        }\r\n        else {\r\n            this.mdsource.classList.add('e-active');\r\n            if (!htmlPreview) {\r\n                htmlPreview = createElement('div', { className: 'e-content e-pre-source' });\r\n                htmlPreview.id = id;\r\n                this.textArea.parentNode.appendChild(htmlPreview);\r\n            }\r\n            this.textArea.style.display = 'none';\r\n            htmlPreview.style.display = 'block';\r\n            htmlPreview.innerHTML = Marked(this.rteObj.contentModule.getEditPanel().value);\r\n            this.mdsource.parentElement.title = 'Code View';\r\n        }\r\n    }\r\n    rendereComplete() {\r\n        this.textArea = this.rteObj.contentModule.getEditPanel();\r\n        this.textArea.addEventListener('keyup', (e) => {\r\n            this.markdownConversion();\r\n        });\r\n        this.mdsource = document.getElementById('preview-code');\r\n        this.mdsource.addEventListener('click', (e) => {\r\n            this.fullPreview();\r\n            if (e.currentTarget.classList.contains('e-active')) {\r\n                this.rteObj.disableToolbarItem(['Bold', 'Italic', 'StrikeThrough', 'OrderedList',\r\n                    'UnorderedList', 'SuperScript', 'SubScript', 'CreateLink', 'Image', 'CreateTable', 'Formats', 'Undo', 'Redo']);\r\n            }\r\n            else {\r\n                this.rteObj.enableToolbarItem(['Bold', 'Italic', 'StrikeThrough', 'OrderedList',\r\n                    'UnorderedList', 'SuperScript', 'SubScript', 'CreateLink', 'Image', 'CreateTable', 'Formats', 'Undo', 'Redo']);\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        return (<div id=\"markdownSample\" className='control-pane'>\r\n                <div className='control-section' id=\"rteMarkdown\">\r\n                    <div className=\"content-wrapper\">\r\n                        <RichTextEditorComponent id=\"markdownRTE\" ref={(richtexteditor) => { this.rteObj = richtexteditor; }} editorMode='Markdown' height='250px' valueTemplate={this.template} formatter={this.formatter} toolbarSettings={this.toolbarSettings}>\r\n                            <Inject services={[MarkdownEditor, Toolbar, Image, Link, QuickToolbar, Table]}/>\r\n                        </RichTextEditorComponent>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<MarkDown />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}