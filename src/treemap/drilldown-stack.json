{"index.css":"/* css */","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * Drilldown sample for treemap\r\n */\r\nimport * as React from \"react\";\r\nimport { TreeMapComponent, LevelsDirective, LevelDirective, Inject, TreeMapTooltip, TreeMapAjax } from '@syncfusion/ej2-react-treemap';\r\nimport { SampleBase } from './sample-base';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { CheckBoxComponent } from \"@syncfusion/ej2-react-buttons\";\r\nimport { PropertyPane } from './property-pane';\r\nexport class Drilldown extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.headerAlign = [\r\n            { text: 'Near', value: 'Near' },\r\n            { text: 'Far', value: 'Far' },\r\n            { text: 'Center', value: 'Center' }\r\n        ];\r\n        this.labelAlign = [\r\n            { text: 'Near', value: 'Near' },\r\n            { text: 'Far', value: 'Far' },\r\n            { text: 'Center', value: 'Center' }\r\n        ];\r\n    }\r\n    drillViewChange(args) {\r\n        let value = args.checked;\r\n        this.treemapInstance.drillDownView = value;\r\n        this.treemapInstance.refresh();\r\n    }\r\n    breadCrumbChange(args) {\r\n        let value = args.checked;\r\n        this.treemapInstance.enableBreadcrumb = value;\r\n        this.treemapInstance.refresh();\r\n    }\r\n    breadCrumbTextChange(args) {\r\n        let value = document.getElementById('breadCrumbText').value;\r\n        this.treemapInstance.breadcrumbConnector = value;\r\n        this.treemapInstance.refresh();\r\n    }\r\n    headerChange() {\r\n        for (let i = 0; i < this.treemapInstance.levels.length - 1; i++) {\r\n            this.treemapInstance.levels[i].headerAlignment = this.headerElement.value;\r\n        }\r\n        this.treemapInstance.refresh();\r\n    }\r\n    labelChange() {\r\n        this.treemapInstance.levels[2].headerAlignment = this.labelElement.value;\r\n        this.treemapInstance.refresh();\r\n    }\r\n    /* tslint:disable:no-string-literal */\r\n    drillStart(args) {\r\n        if (args.item[Object.keys(args.item)[0]].length === 1) {\r\n            args.treemap.levels[2].showHeader = true;\r\n        }\r\n        else {\r\n            args.treemap.levels[2].showHeader = false;\r\n        }\r\n    }\r\n    tooltipRendering(args) {\r\n        if (args.item['groupIndex'] !== 2) {\r\n            args.cancel = true;\r\n        }\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n\t\t\t\t<style>\r\n\t\t\t\t\t{SAMPLE_CSS}\r\n\t\t\t\t</style>\r\n\t\t\t\t<div className='control-section'>\r\n\t\t\t\t<div className='col-md-9'>\r\n\t\t\t\t\t<TreeMapComponent drillStart={this.drillStart.bind(this)} tooltipRendering={this.tooltipRendering.bind(this)} load={this.load.bind(this)} id='treemap-container' ref={m => this.treemapInstance = m} palette={['#9999ff', '#CCFF99', '#FFFF99', '#FF9999', '#FF99FF', '#FFCC66']} titleSettings={{\r\n            text: 'List of countries by population',\r\n            textStyle: { size: '15px' }\r\n        }} enableDrillDown={true} format={\"n\"} useGroupingSeparator={true} dataSource={new TreeMapAjax('////npmci.syncfusion.com/development/react/demos/src/treemap/treemap-data/drilldown-sample.json')} weightValuePath='Population' tooltipSettings={{\r\n            visible: true,\r\n            format: '${Name} : ${Population}'\r\n        }} leafItemSettings={{\r\n            labelPath: 'Name',\r\n            showLabels: false,\r\n            labelStyle: { size: '0px' },\r\n            border: { color: 'black', width: 0.5 }\r\n        }}>\r\n\t\t\t\t\t\t<Inject services={[TreeMapTooltip]}/>\r\n\t\t\t\t\t\t<LevelsDirective>\r\n\t\t\t\t\t\t\t<LevelDirective groupPath='Continent' fill='#336699' border={{ color: 'black', width: 0.5 }}/>\r\n\t\t\t\t\t\t\t<LevelDirective groupPath='States' fill='#336699' border={{ color: 'black', width: 0.5 }}/>\r\n\t\t\t\t\t\t\t<LevelDirective groupPath='Region' showHeader={true} fill='#336699' border={{ color: 'black', width: 0.5 }}/>\r\n\t\t\t\t\t\t</LevelsDirective>\r\n\t\t\t\t\t</TreeMapComponent>\r\n\t\t\t\t</div>\r\n\t\t\t\t \r\n\t\t\t\t <div className='col-md-3 property-section'>\r\n\t\t\t\t\t\t<PropertyPane title='Properties'>\r\n\t\t\t\t\t\t<table id='property' title='Properties' className='property-panel-table' style={{ width: '110%', marginBottom: '20px' }}>\r\n                  <tr>\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<div>Drill Down View</div>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<CheckBoxComponent id='drillView' checked={false} change={this.drillViewChange.bind(this)} ref={d => this.drillviewElement = d}/>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</td>\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<div>Enable Bread Crumb</div>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t<CheckBoxComponent id='breadCrumb' checked={false} change={this.breadCrumbChange.bind(this)} ref={d => this.breadCrumbElement = d}/>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<div>Bread Crumb Text</div>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<div style={{ marginleft: '10px' }}>\r\n                    <input id=\"breadCrumbText\" ref={d => this.nameElement = d} type='text' defaultValue=' - ' style={{ width: '100px' }} onChange={this.breadCrumbTextChange.bind(this)}/>\r\n                    </div>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t</tr>\t\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<div>Header Alignment</div>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<DropDownListComponent id=\"header\" width=\"120px\" index={0} dataSource={this.headerAlign} fields={{ text: 'text', value: 'value' }} change={this.headerChange.bind(this)} ref={d => this.headerElement = d}/>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<div>Label Alignment</div>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<DropDownListComponent id=\"label\" width=\"120px\" index={0} dataSource={this.labelAlign} fields={{ text: 'text', value: 'value' }} change={this.labelChange.bind(this)} ref={d => this.labelElement = d}/>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t</tr>\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t</PropertyPane>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t<div style={{ float: 'right', marginright: '10px' }}>Source:\r\n       <a href=\"https://en.wikipedia.org/wiki/List_of_continents_by_population\" target=\"_blank\">en.wikipedia.org</a>\r\n\t\t\t\t</div>\r\n\t\t\t\t</div>);\r\n    }\r\n}\r\n\nrender(<Drilldown />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}