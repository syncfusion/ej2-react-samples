{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from \"react\";\r\nimport { TextElement, HierarchicalTree, ConnectorConstraints, SelectorConstraints, DiagramComponent, randomId, Inject } from \"@syncfusion/ej2-react-diagrams\";\r\nimport { StackPanel } from \"@syncfusion/ej2-react-diagrams\";\r\nimport { PortVisibility } from \"@syncfusion/ej2-react-diagrams\";\r\nimport { SampleBase } from './sample-base';\r\nimport { CheckBoxComponent } from \"@syncfusion/ej2-react-buttons\";\r\nlet diagramInstance;\r\n//Initialize shape\r\nlet shape = {\r\n    type: \"Basic\",\r\n    shape: \"Rectangle\",\r\n    cornerRadius: 10\r\n};\r\n//Initialize Diagram Nodes\r\nlet nodes = [\r\n    { id: \"node1\", annotations: [{ content: \"Promotion\" }] },\r\n    { id: \"node2\", annotations: [{ content: \"Lead\" }] },\r\n    { id: \"node3\", annotations: [{ content: \"Account\" }] },\r\n    { id: \"node4\", annotations: [{ content: \"Information\" }] },\r\n    { id: \"node5\", annotations: [{ content: \"Opportunity\" }] },\r\n    { id: \"node6\", offsetX: 540, offsetY: 290, excludeFromLayout: true }\r\n];\r\n//Initialize Diagram connectors\r\nlet connectors = [\r\n    { id: \"connectr\", sourceID: \"node1\", targetID: \"node2\" },\r\n    {\r\n        id: \"connectr1\",\r\n        sourceID: \"node2\",\r\n        sourcePortID: \"port1\",\r\n        targetID: \"node3\",\r\n        targetPortID: \"portIn\"\r\n    },\r\n    {\r\n        id: \"connectr2\",\r\n        sourceID: \"node2\",\r\n        sourcePortID: \"port2\",\r\n        targetID: \"node4\",\r\n        targetPortID: \"portIn\"\r\n    },\r\n    {\r\n        id: \"connectr3\",\r\n        sourceID: \"node2\",\r\n        sourcePortID: \"port3\",\r\n        targetID: \"node5\",\r\n        targetPortID: \"portIn\"\r\n    },\r\n    {\r\n        id: \"connectr4\",\r\n        sourceID: \"node6\",\r\n        sourcePortID: \"port4\",\r\n        targetID: \"node3\",\r\n        targetPortID: \"portOut\"\r\n    },\r\n    {\r\n        id: \"connectr5\",\r\n        sourceID: \"node6\",\r\n        sourcePortID: \"port5\",\r\n        targetID: \"node4\",\r\n        targetPortID: \"portOut\"\r\n    },\r\n    {\r\n        id: \"connectr7\",\r\n        sourceID: \"node6\",\r\n        sourcePortID: \"port6\",\r\n        targetID: \"node5\",\r\n        targetPortID: \"portOut\"\r\n    }\r\n];\r\nconst SAMPLE_CSS = `.image-pattern-style {\r\n        background-color: white;\r\n        background-size: contain;\r\n        background-repeat: no-repeat;\r\n        height: 45px;\r\n        width: calc((100% - 13px) / 3);\r\n        cursor: pointer;\r\n        border: 1px solid #D5D5D5;\r\n        background-position: center;\r\n        float: left;\r\n    }\r\n\r\n    .image-pattern-style:hover {\r\n        border-color: gray;\r\n        border-width: 2px;\r\n    }\r\n\r\n    .row {\r\n        margin-left: 0px;\r\n        margin-right: 0px;\r\n    }\r\n\r\n    .row-header {\r\n        font-size: 13px;\r\n        font-weight: 500;\r\n    }\r\n\r\n    .e-checkbox-wrapper .e-label {\r\n        font-size: 12px;\r\n    }\r\n\r\n    .e-selected-style {\r\n        border-color: #006CE6;\r\n        border-width: 2px;\r\n    }`;\r\nexport class Connectors extends SampleBase {\r\n    lock() {\r\n        let lock = document.getElementById(\"lock\");\r\n        for (let i = 0; i < diagramInstance.connectors.length; i++) {\r\n            this.connector = diagramInstance.connectors[i];\r\n            if (lock.checked) {\r\n                this.connector.constraints &= ~(ConnectorConstraints.DragSourceEnd |\r\n                    ConnectorConstraints.DragTargetEnd |\r\n                    ConnectorConstraints.DragSegmentThumb);\r\n                this.connector.constraints |= ConnectorConstraints.ReadOnly;\r\n            }\r\n            else {\r\n                this.connector.constraints |=\r\n                    ConnectorConstraints.Default & ~ConnectorConstraints.ReadOnly;\r\n            }\r\n            diagramInstance.dataBind();\r\n        }\r\n    }\r\n    rendereComplete() {\r\n        document.getElementById(\"appearance\").onclick = (args) => {\r\n            let target = args.target;\r\n            let selectedElement = document.getElementsByClassName(\"e-selected-style\");\r\n            if (selectedElement.length) {\r\n                selectedElement[0].classList.remove(\"e-selected-style\");\r\n            }\r\n            if (target.className === \"image-pattern-style\") {\r\n                switch (target.id) {\r\n                    case \"normalconnector1\":\r\n                        defaultConnectorStyle(\"Straight\", target);\r\n                        break;\r\n                    case \"normalconnector2\":\r\n                        defaultConnectorStyle(\"Orthogonal\", target);\r\n                        break;\r\n                    case \"normalconnector3\":\r\n                        defaultConnectorStyle(\"Bezier\", target);\r\n                        break;\r\n                    case \"connector1withstroke\":\r\n                        applyConnectorStyle(false, false, false, \"Straight\", target);\r\n                        break;\r\n                    case \"connector2withstroke\":\r\n                        applyConnectorStyle(false, false, false, \"Orthogonal\", target);\r\n                        break;\r\n                    case \"connector3withstroke\":\r\n                        applyConnectorStyle(false, false, false, \"Bezier\", target);\r\n                        break;\r\n                    case \"connector1withdasharray\":\r\n                        applyConnectorStyle(true, false, false, \"Straight\", target);\r\n                        break;\r\n                    case \"connector2withdasharray\":\r\n                        applyConnectorStyle(true, false, false, \"Orthogonal\", target);\r\n                        break;\r\n                    case \"connector3withdasharray\":\r\n                        applyConnectorStyle(true, false, false, \"Bezier\", target);\r\n                        break;\r\n                    case \"cornerradious\":\r\n                        applyConnectorStyle(false, false, true, \"Orthogonal\", target);\r\n                        break;\r\n                    case \"sourcedecorator\":\r\n                        applyConnectorStyle(false, true, false, \"Straight\", target);\r\n                        break;\r\n                    case \"sourcedecoratorwithdasharray\":\r\n                        applyConnectorStyle(true, true, false, \"Straight\", target);\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n    render() {\r\n        return (<div className=\"control-pane diagram-control-pane\">\r\n        <style>{SAMPLE_CSS}</style>\r\n        <div className=\"col-lg-9 control-section\">\r\n          <div className=\"content-wrapper\" style={{ width: \"100%\", background: \"white\" }}>\r\n            <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={580} nodes={nodes} connectors={connectors} selectedItems={{\r\n            constraints: SelectorConstraints.ConnectorSourceThumb |\r\n                SelectorConstraints.ConnectorTargetThumb\r\n        }} \r\n        //Configrues hierarchical tree layout\r\n        layout={{\r\n            type: \"HierarchicalTree\",\r\n            orientation: \"LeftToRight\",\r\n            verticalSpacing: 75,\r\n            margin: { left: 30, right: 0, top: 0, bottom: 0 }\r\n        }} snapSettings={{ constraints: 0 }} \r\n        //Sets the default values of nodes\r\n        getNodeDefaults={(obj) => {\r\n            if (obj.id !== \"node1\") {\r\n                //Set ports\r\n                obj.ports = getPorts(obj);\r\n            }\r\n            if (obj.id !== \"node6\") {\r\n                obj.shape = shape;\r\n                obj.width = 80;\r\n                obj.style.strokeWidth = 2;\r\n                obj.style.strokeColor = \"#6F409F\";\r\n                obj.height = 35;\r\n            }\r\n        }} \r\n        //Sets the default values of connector\r\n        getConnectorDefaults={(obj) => {\r\n            obj.type = \"Bezier\";\r\n            obj.style.strokeColor = \"#6f409f\";\r\n            obj.style.strokeWidth = 2;\r\n            obj.targetDecorator = {\r\n                style: {\r\n                    strokeColor: \"#6f409f\",\r\n                    fill: \"#6f409f\"\r\n                }\r\n            };\r\n        }} \r\n        //Customize the content of the node\r\n        setNodeTemplate={(obj) => {\r\n            if (obj.id === \"node6\") {\r\n                return setNodeTemplate();\r\n            }\r\n            return null;\r\n        }}>\r\n              <Inject services={[HierarchicalTree]}/>\r\n            </DiagramComponent>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-lg-3 property-section\">\r\n          <div className=\"property-panel-header\">Properties</div>\r\n          <div className=\"row property-panel-content\" id=\"appearance\">\r\n            <div className=\"row row-header\">Appearance</div>\r\n            <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n              <div className=\"image-pattern-style\" id=\"normalconnector1\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/connector/Connectors_1.png')\",\r\n            marginRight: \"3px\"\r\n        }}/>\r\n              <div className=\"image-pattern-style\" id=\"normalconnector2\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/connector/Connectors_2.png')\",\r\n            margin: \"0px 3px\"\r\n        }}/>\r\n              <div className=\"image-pattern-style\" id=\"normalconnector3\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/connector/Connectors_3.png')\",\r\n            marginLeft: \"3px\"\r\n        }}/>\r\n            </div>\r\n            <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n              <div className=\"image-pattern-style\" id=\"connector1withstroke\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/connector/Connectors_4.png')\",\r\n            marginRight: \"3px\"\r\n        }}/>\r\n              <div className=\"image-pattern-style\" id=\"connector2withstroke\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/connector/Connectors_5.png')\",\r\n            margin: \"0px 3px\"\r\n        }}/>\r\n              <div className=\"image-pattern-style\" id=\"connector3withstroke\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/connector/Connectors_6.png')\",\r\n            marginLeft: \"3px\"\r\n        }}/>\r\n            </div>\r\n            <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n              <div className=\"image-pattern-style\" id=\"connector1withdasharray\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/connector/Connectors_7.png')\",\r\n            margin: \"3px\"\r\n        }}/>\r\n              <div className=\"image-pattern-style\" id=\"connector2withdasharray\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/connector/Connectors_8.png')\",\r\n            marginRight: \"0px 3px\"\r\n        }}/>\r\n              <div className=\"image-pattern-style\" id=\"connector3withdasharray\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/connector/Connectors_9.png')\",\r\n            marginLeft: \"3px\"\r\n        }}/>\r\n            </div>\r\n            <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n              <div className=\"image-pattern-style\" id=\"cornerradious\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/connector/Connectors_10.png')\",\r\n            marginRight: \"3px\"\r\n        }}/>\r\n              <div className=\"image-pattern-style\" id=\"sourcedecorator\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/connector/Connectors_11.png')\",\r\n            margin: \"0px 3px\"\r\n        }}/>\r\n              <div className=\"image-pattern-style\" id=\"sourcedecoratorwithdasharray\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/connector/Connectors_12.png')\",\r\n            marginLeft: \"3px\"\r\n        }}/>\r\n            </div>\r\n          </div>\r\n          <div className=\"row property-panel-content\" style={{ paddingTop: \"10px\" }}>\r\n            <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n              <CheckBoxComponent checked={false} label=\"Lock\" id=\"lock\" change={this.lock.bind(this)}/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>);\r\n    }\r\n}\r\n//Customize the content of the node\r\nfunction setNodeTemplate() {\r\n    let canvas = new StackPanel();\r\n    canvas.children = [];\r\n    canvas.id = randomId();\r\n    canvas.style.strokeWidth = 0;\r\n    canvas.style.fill = \"#e6e0eb\";\r\n    canvas.children.push(getTextElement(\"Events\", \"#a6a1e0\"));\r\n    canvas.children.push(getTextElement(\"Emails\", \"#db8ec9\"));\r\n    canvas.children.push(getTextElement(\"Calls\", \"#db8ec9\"));\r\n    canvas.children.push(getTextElement(\"Smart Contents\", \"#db8ec9\"));\r\n    return canvas;\r\n}\r\n//creation of the TextElement.\r\nfunction getTextElement(text, color) {\r\n    let textElement = new TextElement();\r\n    textElement.id = randomId();\r\n    textElement.width = 80;\r\n    textElement.height = 35;\r\n    textElement.content = text;\r\n    textElement.style.fill = \"#6f409f\";\r\n    textElement.style.color = \"white\";\r\n    textElement.style.strokeColor = \"#6f409f\";\r\n    textElement.cornerRadius = 5;\r\n    textElement.margin = { top: 10, bottom: 10, left: 10, right: 10 };\r\n    textElement.relativeMode = \"Object\";\r\n    return textElement;\r\n}\r\n//creation of Port for Node.\r\nfunction getPorts(obj) {\r\n    if (obj.id === \"node2\") {\r\n        let node2Ports = [\r\n            {\r\n                id: \"port1\",\r\n                offset: { x: 1, y: 0.25 },\r\n                visibility: PortVisibility.Hidden\r\n            },\r\n            {\r\n                id: \"port2\",\r\n                offset: { x: 1, y: 0.5 },\r\n                visibility: PortVisibility.Hidden\r\n            },\r\n            {\r\n                id: \"port3\",\r\n                offset: { x: 1, y: 0.75 },\r\n                visibility: PortVisibility.Hidden\r\n            }\r\n        ];\r\n        return node2Ports;\r\n    }\r\n    else if (obj.id === \"node6\") {\r\n        let node6Ports = [\r\n            {\r\n                id: \"port4\",\r\n                offset: { x: 0, y: 0.46 },\r\n                visibility: PortVisibility.Hidden\r\n            },\r\n            {\r\n                id: \"port5\",\r\n                offset: { x: 0, y: 0.5 },\r\n                visibility: PortVisibility.Hidden\r\n            },\r\n            {\r\n                id: \"port6\",\r\n                offset: { x: 0, y: 0.54 },\r\n                visibility: PortVisibility.Hidden\r\n            }\r\n        ];\r\n        return node6Ports;\r\n    }\r\n    else {\r\n        let ports = [\r\n            {\r\n                id: \"portIn\",\r\n                offset: { x: 0, y: 0.5 },\r\n                visibility: PortVisibility.Hidden\r\n            },\r\n            {\r\n                id: \"portOut\",\r\n                offset: { x: 1, y: 0.5 },\r\n                visibility: PortVisibility.Hidden\r\n            }\r\n        ];\r\n        return ports;\r\n    }\r\n}\r\n//ConnectorStyle customization\r\nfunction applyConnectorStyle(dashedLine, sourceDec, isRounded, type, target) {\r\n    for (let i = 0; i < diagramInstance.connectors.length; i++) {\r\n        diagramInstance.connectors[i].style.strokeWidth = 2;\r\n        diagramInstance.connectors[i].type = type;\r\n        if (isRounded) {\r\n            diagramInstance.connectors[i].cornerRadius = 5;\r\n        }\r\n        if (sourceDec) {\r\n            diagramInstance.connectors[i].sourceDecorator = {\r\n                style: {\r\n                    strokeColor: \"#6f409f\",\r\n                    fill: \"#6f409f\",\r\n                    strokeWidth: 2\r\n                },\r\n                shape: \"Circle\"\r\n            };\r\n        }\r\n        else {\r\n            diagramInstance.connectors[i].sourceDecorator = { shape: \"None\" };\r\n        }\r\n        if (dashedLine) {\r\n            diagramInstance.connectors[i].style.strokeDashArray = \"5,5\";\r\n        }\r\n        else {\r\n            diagramInstance.connectors[i].style.strokeDashArray = \"\";\r\n        }\r\n        diagramInstance.connectors[i].targetDecorator = {\r\n            style: {\r\n                strokeColor: \"#6f409f\",\r\n                fill: \"#6f409f\",\r\n                strokeWidth: 2\r\n            },\r\n            shape: \"Arrow\"\r\n        };\r\n        diagramInstance.dataBind();\r\n    }\r\n}\r\n//ConnectorStyle customization\r\nfunction defaultConnectorStyle(type, target) {\r\n    for (let i = 0; i < diagramInstance.connectors.length; i++) {\r\n        diagramInstance.connectors[i].style.strokeWidth = 1;\r\n        diagramInstance.connectors[i].type = type;\r\n        diagramInstance.connectors[i].sourceDecorator = { shape: \"None\" };\r\n        diagramInstance.connectors[i].style.strokeDashArray = \"\";\r\n        diagramInstance.connectors[i].targetDecorator = {\r\n            style: {\r\n                strokeColor: \"#6f409f\",\r\n                fill: \"#6f409f\",\r\n                strokeWidth: 1\r\n            },\r\n            shape: \"Arrow\"\r\n        };\r\n        diagramInstance.dataBind();\r\n    }\r\n}\r\n\nrender(<Connectors />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}