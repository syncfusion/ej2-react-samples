{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { DiagramComponent, Connector, NodeConstraints, HierarchicalTree, DataBinding, SnapConstraints, Inject, Node } from '@syncfusion/ej2-react-diagrams';\r\nimport { SampleBase } from './sample-base';\r\nimport { ToolbarComponent } from '@syncfusion/ej2-react-navigations';\r\nimport { DialogComponent } from '@syncfusion/ej2-react-popups';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { TextBoxComponent } from '@syncfusion/ej2-react-inputs';\r\nlet diagramInstance;\r\nlet dialogInstance;\r\nlet toolbarObj;\r\nlet sourceID;\r\nlet targetID;\r\nlet sourceDropdown;\r\nlet targetDropdown;\r\nlet nodeData = [];\r\nexport class Crud extends SampleBase {\r\n    constructor(props) {\r\n        super();\r\n        this.fields = { text: 'Label', value: 'Name' };\r\n        this.buttons = [{\r\n                click: this.dlgButtonClick,\r\n                buttonModel: {\r\n                    content: 'Update',\r\n                    isPrimary: true\r\n                }\r\n            }];\r\n    }\r\n    content(data) {\r\n        return (<div>\r\n        <div className='showLabel'>\r\n        <TextBoxComponent id='Description' floatLabelType={'Always'} placeholder={'Description'}/>\r\n        </div>\r\n        <div className='showLabel' style={{ paddingTop: '14px' }}>\r\n        <TextBoxComponent id='Color' floatLabelType={'Always'} placeholder={'Color'}/>\r\n        </div>\r\n        <div className='showDropdown'>\r\n        <DropDownListComponent id='SourceId' ref={dropdown => (sourceDropdown = dropdown)} change={(args) => {\r\n            sourceID = args.value;\r\n        }} created={(args) => {\r\n            sourceDropdown.fields = { text: 'Label', value: 'Name' };\r\n            sourceDropdown.dataSource = getDataSource();\r\n            sourceDropdown.dataBind();\r\n        }}/>\r\n        </div>\r\n        <div className='showDropdown' style={{ paddingTop: '14px' }}>\r\n        <DropDownListComponent id='TargetId' ref={dropdown => (targetDropdown = dropdown)} change={(args) => {\r\n            targetID = args.value;\r\n        }} created={(args) => {\r\n            targetDropdown.fields = { text: 'Label', value: 'Name' };\r\n            targetDropdown.dataSource = getDataSource();\r\n            targetDropdown.dataBind();\r\n        }}/>\r\n        </div>\r\n      </div>);\r\n    }\r\n    render() {\r\n        return (<div>\r\n      <div className='control-section'>\r\n        <div style={{ width: '100%', height: '10%' }}>\r\n          <ToolbarComponent id='toolbar_diagram' ref={toolbar => (toolbarObj = toolbar)} items={[\r\n            {\r\n                tooltipText: 'Add',\r\n                prefixIcon: 'e-ddb-crudicons e-add',\r\n                id: 'Add',\r\n                text: 'Add'\r\n            },\r\n            {\r\n                type: 'Separator'\r\n            },\r\n            {\r\n                tooltipText: 'Edit',\r\n                prefixIcon: 'e-ddb-crudicons e-update',\r\n                id: 'Edit',\r\n                text: 'Edit'\r\n            },\r\n            {\r\n                type: 'Separator'\r\n            },\r\n            {\r\n                tooltipText: 'Delete',\r\n                prefixIcon: 'e-ddb-crudicons e-delete',\r\n                id: 'Delete',\r\n                text: 'Delete'\r\n            }\r\n        ]} clicked={(args) => {\r\n            let selectedItem;\r\n            if (diagramInstance.selectedItems.nodes.length > 0) {\r\n                selectedItem = diagramInstance.selectedItems.nodes[0];\r\n            }\r\n            if (diagramInstance.selectedItems.connectors.length > 0) {\r\n                selectedItem = diagramInstance.selectedItems.connectors[0];\r\n            }\r\n            if (selectedItem) {\r\n                switch (args.item.tooltipText) {\r\n                    case 'Add':\r\n                        openDialog('Add', '', '', true);\r\n                        break;\r\n                    case 'Edit':\r\n                        if (selectedItem instanceof Connector) {\r\n                            let sourceNode = diagramInstance.getObject(selectedItem.sourceID);\r\n                            let targetNode = diagramInstance.getObject(selectedItem.targetID);\r\n                            openDialog('Edit', sourceNode.Description, targetNode.Description, false);\r\n                        }\r\n                        else {\r\n                            openDialog('Edit', selectedItem.Description, selectedItem.Color, true);\r\n                        }\r\n                        break;\r\n                    case 'Delete':\r\n                        diagramInstance.remove(selectedItem);\r\n                        diagramInstance.doLayout();\r\n                        diagramInstance.removeData();\r\n                        let element = { Name: selectedItem.id, Label: selectedItem.Description };\r\n                        let index = nodeData.indexOf(element);\r\n                        nodeData.splice(index, 1);\r\n                        sourceDropdown.dataSource = getDataSource();\r\n                        sourceDropdown.dataBind();\r\n                        targetDropdown.dataSource = getDataSource();\r\n                        targetDropdown.dataBind();\r\n                }\r\n            }\r\n        }} created={(args) => {\r\n            enableToolbarItems(false);\r\n        }}/>\r\n        </div>\r\n        <div style={{ width: '100%', height: '80%', borderWidth: '0 1px 1px 1px', borderStyle: 'solid', borderColor: '#D7D7D7' }}>\r\n        <div id='diagram-space' className='sb-mobile-diagram'>\r\n        <DiagramComponent id='diagram' ref={diagram => (diagramInstance = diagram)} width={'100%'} height={'600px'} snapSettings={{ constraints: SnapConstraints.None }} dataSourceSettings={{\r\n            id: 'Name',\r\n            //set an URL to perform CRUD operations with node in database\r\n            crudAction: {\r\n                read: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/GetNodes',\r\n                create: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/AddNodes',\r\n                update: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/UpdateNodes',\r\n                destroy: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/DeleteNodes',\r\n                customFields: ['Id', 'Description', 'Color']\r\n            },\r\n            connectionDataSource: {\r\n                id: 'Name',\r\n                sourceID: 'SourceNode',\r\n                targetID: 'TargetNode',\r\n                //set an URL to perform CRUD operations with connector in database\r\n                crudAction: {\r\n                    read: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/GetConnectors',\r\n                    create: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/AddConnectors',\r\n                    update: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/UpdateConnectors',\r\n                    destroy: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/DeleteConnectors',\r\n                    customFields: ['Id']\r\n                }\r\n            }\r\n        }} layout={{\r\n            type: 'HierarchicalTree',\r\n            verticalSpacing: 40,\r\n        }} getNodeDefaults={(obj) => {\r\n            obj.width = 100;\r\n            obj.height = 50;\r\n            obj.shape = { type: 'Basic', shape: 'Rectangle' };\r\n            obj.style = { strokeWidth: 1, strokeColor: '#DDDDDD' };\r\n            return obj;\r\n        }} getConnectorDefaults={(connector) => {\r\n            connector.type = 'Orthogonal';\r\n            connector.style.fill = '#707070';\r\n            connector.style.strokeColor = '#707070';\r\n            connector.targetDecorator = {\r\n                style: {\r\n                    strokeColor: '#707070',\r\n                    fill: '#707070'\r\n                },\r\n            };\r\n            return connector;\r\n        }} selectionChange={(args) => {\r\n            if (args.state === 'Changing') {\r\n                if (args.newValue.length > 0) {\r\n                    if (args.newValue[0] instanceof Node) {\r\n                        enableToolbarItems(true);\r\n                    }\r\n                    else {\r\n                        toolbarObj.enableItems(document.getElementById(toolbarObj.items[0].id).parentElement, false);\r\n                        toolbarObj.enableItems(document.getElementById(toolbarObj.items[2].id).parentElement, true);\r\n                        toolbarObj.enableItems(document.getElementById(toolbarObj.items[4].id).parentElement, false);\r\n                    }\r\n                }\r\n                else {\r\n                    enableToolbarItems(false);\r\n                }\r\n            }\r\n        }} sourcePointChange={(args) => {\r\n            if (args.state === 'Completed') {\r\n                if (!args.connector.targetID || !args.connector.sourceID) {\r\n                    args.cancel = true;\r\n                }\r\n            }\r\n        }} targetPointChange={(args) => {\r\n            if (args.state === 'Completed') {\r\n                if (!args.connector.targetID || !args.connector.sourceID) {\r\n                    args.cancel = true;\r\n                }\r\n            }\r\n        }} setNodeTemplate={(obj) => {\r\n            obj.annotations = [{ style: { color: 'black' } }];\r\n            obj.annotations[0].content = obj.Description;\r\n            obj.style = { fill: obj.Color };\r\n            if (obj.Id === 1) {\r\n                //delete constraints for an root node\r\n                obj.constraints = NodeConstraints.Default & ~NodeConstraints.Delete;\r\n            }\r\n        }}>\r\n           <Inject services={[DataBinding, HierarchicalTree]}/>\r\n              </DiagramComponent>\r\n         </div>\r\n    </div>\r\n</div>\r\n\r\n        <DialogComponent id='editDialog' ref={dialog => (dialogInstance = dialog)} width={'300px'} visible={false} isModal={true} showCloseIcon={true} content={this.content} buttons={this.buttons}/>\r\n      </div>);\r\n    }\r\n}\r\nfunction getDataSource() {\r\n    let i;\r\n    nodeData = [];\r\n    for (i = 0; i < diagramInstance.nodes.length; i++) {\r\n        let node = diagramInstance.nodes[i];\r\n        let element = { Name: node.id, Label: node.Description };\r\n        nodeData.push(element);\r\n    }\r\n    return nodeData;\r\n}\r\n\nrender(<Crud />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}