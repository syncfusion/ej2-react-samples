{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from \"react\";\r\nimport { DiagramComponent, Inject, LineRouting, PortVisibility, SnapConstraints, DiagramConstraints } from \"@syncfusion/ej2-react-diagrams\";\r\nimport { SampleBase } from './sample-base';\r\nlet SAMPLE_CSS = `.image-pattern-style {\r\n  background-color: white;\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  height: 75px;\r\n  width: calc((100% - 12px) / 3);\r\n  cursor: pointer;\r\n  border: 1px solid #D5D5D5;\r\n  background-position: center;\r\n  float: left;\r\n}\r\n\r\n.row {\r\n  margin-left: 0px;\r\n  margin-right: 0px;\r\n}\r\n\r\n.row-header {\r\n  font-size: 13px;\r\n  font-weight: 500;\r\n}\r\n\r\n.property-panel-header {\r\n  color: rgba(0, 0, 0, .7)\r\n}\r\n}`;\r\nlet nodes = [\r\n    {\r\n        id: 'start', offsetX: 115, offsetY: 110,\r\n        shape: { type: 'Flow', shape: 'Terminator' },\r\n        style: { fill: '#D5535D' },\r\n        ports: [{ id: 'port1', offset: { x: 0.5, y: 0 }, visibility: PortVisibility.Hidden }],\r\n        annotations: [{\r\n                content: 'Start'\r\n            }]\r\n    },\r\n    {\r\n        id: 'process', offsetX: 115, offsetY: 255,\r\n        shape: { type: 'Flow', shape: 'Process' },\r\n        style: { fill: \"#65B091\" },\r\n        annotations: [{\r\n                content: 'Process'\r\n            }]\r\n    },\r\n    {\r\n        id: 'document', offsetX: 115, offsetY: 400,\r\n        shape: { type: 'Flow', shape: 'Document' },\r\n        style: { fill: \"#5BA5F0\" },\r\n        ports: [{ id: 'port1', offset: { x: 0, y: 0.5 }, visibility: PortVisibility.Hidden }],\r\n        annotations: [{\r\n                content: 'Document'\r\n            }]\r\n    },\r\n    {\r\n        id: 'decision', offsetX: 390, offsetY: 110,\r\n        shape: { type: 'Flow', shape: 'Decision' },\r\n        style: { fill: \"#9A8AF7\" },\r\n        annotations: [{\r\n                content: 'Decision'\r\n            }]\r\n    },\r\n    {\r\n        id: 'document2', offsetX: 390, offsetY: 255,\r\n        shape: { type: 'Flow', shape: 'Document' },\r\n        style: { fill: \"#5BA5F0\" },\r\n        annotations: [{\r\n                content: 'Document'\r\n            }]\r\n    },\r\n    {\r\n        id: 'end', offsetX: 390, offsetY: 400,\r\n        shape: { type: 'Flow', shape: 'Terminator' },\r\n        style: { fill: \"#9A8AF7\" },\r\n        annotations: [{\r\n                content: 'End'\r\n            }]\r\n    },\r\n    {\r\n        id: 'process2', offsetX: 640, offsetY: 110,\r\n        shape: { type: 'Flow', shape: 'Process' },\r\n        style: { fill: \"#65B091\" },\r\n        annotations: [{\r\n                content: 'Process'\r\n            }]\r\n    },\r\n    {\r\n        id: 'card', offsetX: 640, offsetY: 255,\r\n        shape: { type: 'Flow', shape: 'Card' },\r\n        style: { fill: \"#9A8AF7\" },\r\n        annotations: [{\r\n                content: 'Card',\r\n            }],\r\n        ports: [\r\n            { id: 'port1', offset: { x: 1, y: 0.5 }, visibility: PortVisibility.Hidden },\r\n            { id: 'port2', offset: { x: 0.5, y: 1 }, visibility: PortVisibility.Hidden }\r\n        ],\r\n    }\r\n];\r\nlet connectors = [\r\n    {\r\n        id: 'Connector1', sourceID: 'start', targetID: 'process',\r\n    },\r\n    {\r\n        id: 'Connector2', sourceID: 'process', targetID: 'document'\r\n    },\r\n    {\r\n        id: 'Connector3', sourceID: 'document', targetID: 'end',\r\n    },\r\n    {\r\n        id: 'Connector4', sourceID: 'start', targetID: 'decision'\r\n    },\r\n    {\r\n        id: 'Connector5', sourceID: 'decision', targetID: 'process2',\r\n    },\r\n    {\r\n        id: 'Connector6', sourceID: 'process2', targetID: 'card',\r\n    },\r\n    {\r\n        id: 'Connector7', sourceID: 'process', targetID: 'document2'\r\n    },\r\n    {\r\n        id: 'Connector8', sourceID: 'document2', targetID: 'card',\r\n    },\r\n    {\r\n        id: 'Connector9', sourceID: 'start', sourcePortID: \"port1\",\r\n        targetID: 'card', targetPortID: 'port1'\r\n    },\r\n    {\r\n        id: 'Connector10', sourceID: 'card', sourcePortID: 'port2',\r\n        targetID: 'document', targetPortID: 'port1'\r\n    },\r\n];\r\nlet diagramInstance;\r\nexport class LineRoutingSample extends SampleBase {\r\n    rendereComplete() {\r\n        diagramInstance.fitToPage({ mode: 'Width' });\r\n    }\r\n    render() {\r\n        return (<div className=\"control-pane\">\r\n        <style>{SAMPLE_CSS}</style>\r\n        <div className=\"control-section\">\r\n          <div className=\"content-wrapper\" style={{ width: \"100%\" }}>\r\n            <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={\"499px\"} snapSettings={{ constraints: SnapConstraints.None }} constraints={DiagramConstraints.Default | DiagramConstraints.LineRouting} nodes={nodes} connectors={connectors} getConnectorDefaults={getConnectorDefaults} getNodeDefaults={getNodeDefaults}>\r\n              <Inject services={[LineRouting]}/>\r\n            </DiagramComponent>\r\n          </div>\r\n        </div>\r\n      </div>);\r\n    }\r\n}\r\nfunction getNodeDefaults(node) {\r\n    node.height = 50;\r\n    if (node.id === 'decision') {\r\n        node.height = 70;\r\n    }\r\n    node.width = 120;\r\n    node.style = { strokeColor: 'transparent' };\r\n    return node;\r\n}\r\nfunction getConnectorDefaults(connector) {\r\n    connector.type = 'Orthogonal';\r\n    connector.style = { strokeColor: '#707070 ', strokeWidth: 1.25 };\r\n    connector.targetDecorator = { style: { fill: '#707070 ', strokeColor: '#707070 ' } };\r\n    return connector;\r\n}\r\n\nrender(<LineRoutingSample />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}