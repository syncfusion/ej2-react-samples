{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from \"react\";\r\nimport { DiagramComponent, Inject, UndoRedo, NodeConstraints, SnapConstraints } from \"@syncfusion/ej2-react-diagrams\";\r\nimport { SampleBase } from './sample-base';\r\nimport { Point } from \"@syncfusion/ej2-diagrams/src/diagram/primitives/point\";\r\nimport { CheckBoxComponent } from \"@syncfusion/ej2-react-buttons\";\r\n//Initializes the nodes for the diagram\r\nlet sdlc = [\r\n    { id: \"sdlc\", text: \"SDLC\" },\r\n    { id: \"analysis\", text: \"Analysis\" },\r\n    { id: \"design\", text: \"Design\" },\r\n    { id: \"implement\", text: \"Implement\" },\r\n    { id: \"deploy\", text: \"Deploy\" },\r\n    { id: \"support\", text: \"Support\" }\r\n];\r\n//arranges the nodes in a circular path\r\nlet count = 5;\r\nlet space = 80;\r\nlet radius = (count * 100 + space * count) / (2 * Math.PI);\r\nsdlc[0].offsetX = 300;\r\nsdlc[0].offsetY = 300;\r\nlet delta = 360 / 5;\r\nlet angle = 270;\r\nfor (let i = 1; i < 6; i++) {\r\n    let offset = Point.transform({ x: 300, y: 300 }, angle, radius);\r\n    sdlc[i].offsetX = offset.x;\r\n    sdlc[i].offsetY = offset.y;\r\n    angle += delta;\r\n}\r\n//Initializes the connector for the diagram\r\nlet connections = [];\r\nfor (let i = 1; i < 6; i++) {\r\n    connections.push({ sourceID: sdlc[i].id, targetID: sdlc[(i % 5) + 1].id });\r\n}\r\nconst SAMPLE_CSS = `.image-pattern-style {\r\n        background-color: white;\r\n        background-size: contain;\r\n        background-repeat: no-repeat;\r\n        height: 75px;\r\n        width: calc((100% - 12px) / 3);\r\n        cursor: pointer;\r\n        border: 1px solid #D5D5D5;\r\n        background-position: center;\r\n        float: left;\r\n    }\r\n\r\n    .image-pattern-style:hover {\r\n        border-color: gray;\r\n        border-width: 2px;\r\n    }\r\n\r\n    .row {\r\n        margin-left: 0px;\r\n        margin-right: 0px;\r\n    }\r\n\r\n    .row-header {\r\n        font-size: 13px;\r\n        font-weight: 500;\r\n    }\r\n\r\n    .e-selected-style {\r\n        border-color: #006CE6;\r\n        border-width: 2px;\r\n    }\r\n\r\n    .e-checkbox-wrapper .e-label {\r\n        font-size: 12px;\r\n    }`;\r\nlet diagramInstance;\r\nlet node;\r\nexport class GettingStartedNodes extends SampleBase {\r\n    rendereComplete() {\r\n        //Click event for Appearance of the Property Panel\r\n        document.getElementById(\"appearance\").onclick = (args) => {\r\n            let target = args.target;\r\n            let selectedElement = document.getElementsByClassName(\"e-selected-style\");\r\n            if (selectedElement.length) {\r\n                selectedElement[0].classList.remove(\"e-selected-style\");\r\n            }\r\n            if (target.className === \"image-pattern-style\") {\r\n                for (let i = 0; i < diagramInstance.nodes.length; i++) {\r\n                    node = diagramInstance.nodes[i];\r\n                    switch (target.id) {\r\n                        case \"preview0\":\r\n                            applyStyle(node, 0, undefined, ~NodeConstraints.Shadow, undefined, undefined, target);\r\n                            break;\r\n                        case \"preview1\":\r\n                            applyStyle(node, 2, undefined, ~NodeConstraints.Shadow, undefined, undefined, target);\r\n                            break;\r\n                        case \"preview2\":\r\n                            applyStyle(node, 2, \"5 5\", ~NodeConstraints.Shadow, undefined, undefined, target);\r\n                            break;\r\n                        case \"preview3\":\r\n                            applyStyle(node, 2, \"5 5\", ~NodeConstraints.Shadow, \"Radial\", undefined, target);\r\n                            break;\r\n                        case \"preview4\":\r\n                            let shadow = {\r\n                                angle: 45,\r\n                                distance: 15,\r\n                                opacity: 0.3,\r\n                                color: \"grey\"\r\n                            };\r\n                            applyStyle(node, 2, \"5 5\", NodeConstraints.Shadow, undefined, shadow, target);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n    render() {\r\n        return (<div className=\"control-pane\">\r\n        <style>{SAMPLE_CSS}</style>\r\n        <div className=\"col-lg-8 control-section\">\r\n          <div className=\"content-wrapper\" style={{ width: \"100%\" }}>\r\n            <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={\"645px\"} nodes={sdlc} connectors={connections} getNodeDefaults={(node) => {\r\n            //Sets the default values of a node\r\n            let obj = {};\r\n            obj.width = 100;\r\n            obj.height = 100;\r\n            obj.shape = { shape: \"Ellipse\" };\r\n            obj.style = { fill: \"#37909A\", strokeColor: \"#024249\" };\r\n            obj.annotations = [\r\n                {\r\n                    content: node.text,\r\n                    margin: { left: 10, right: 10 },\r\n                    style: {\r\n                        color: \"white\",\r\n                        fill: \"none\",\r\n                        strokeColor: \"none\",\r\n                        bold: true\r\n                    }\r\n                }\r\n            ];\r\n            return obj;\r\n        }} getConnectorDefaults={(obj) => {\r\n            //Sets the default values of a Connector\r\n            obj.targetDecorator.style = {\r\n                fill: \"#024249\",\r\n                strokeColor: \"#024249\"\r\n            };\r\n            return { style: { strokeColor: \"#024249\", strokeWidth: 2 } };\r\n        }} snapSettings={{ constraints: SnapConstraints.None }}>\r\n              <Inject services={[UndoRedo]}/>\r\n            </DiagramComponent>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-lg-4 property-section\">\r\n          <div className=\"property-panel-header\">Properties</div>\r\n          <div className=\"row property-panel-content\" id=\"appearance\">\r\n            <div className=\"row row-header\" style={{ paddingTop: \"8px\" }}>\r\n              Appearance\r\n            </div>\r\n            <div className=\"row\" style={{ paddingTop: \"3px\" }}>\r\n              <div className=\"image-pattern-style\" id=\"preview0\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/node/Nodes_1.png')\",\r\n            marginRight: \"3px\"\r\n        }}/>\r\n              <div className=\"image-pattern-style\" id=\"preview1\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/node/Nodes_2.png')\",\r\n            marginRight: \"0px 3px\"\r\n        }}/>\r\n              <div className=\"image-pattern-style\" id=\"preview2\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/node/Nodes_3.png')\",\r\n            margin: \"0px 3px\"\r\n        }}/>\r\n            </div>\r\n            <div className=\"row\" style={{ paddingTop: \"3px\" }}>\r\n              <div className=\"image-pattern-style\" id=\"preview3\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/node/Nodes_4.png')\",\r\n            marginRight: \"3px\"\r\n        }}/>\r\n              <div className=\"image-pattern-style\" id=\"preview4\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/node/Nodes_5.png')\",\r\n            margin: \"3px\"\r\n        }}/>\r\n            </div>\r\n          </div>\r\n          <div className=\"row property-panel-content\" style={{ paddingTop: \"10px\" }}>\r\n            <div className=\"row row-header\">Behavior</div>\r\n            <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n              \r\n              <CheckBoxComponent checked={false} label=\"Aspect ratio\" id=\"aspectRatio\" change={changed}/>\r\n            </div>\r\n            <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n              \r\n              <CheckBoxComponent checked={false} label=\"Lock\" id=\"lock\" change={changed}/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>);\r\n    }\r\n}\r\n//Set customStyle for Node.\r\nfunction applyStyle(//it is in dedicated line here.\r\n    node, width, array, con, type, sh, target) {\r\n    node.style.fill = \"#37909A\";\r\n    node.style.strokeWidth = width;\r\n    node.style.strokeColor = \"#024249\";\r\n    node.style.strokeDashArray = array;\r\n    if (!type) {\r\n        node.style.gradient.type = \"None\";\r\n    }\r\n    else {\r\n        let gradient;\r\n        gradient = {\r\n            cx: 50,\r\n            cy: 50,\r\n            fx: 50,\r\n            fy: 50,\r\n            stops: [\r\n                { color: \"#00555b\", offset: 0 },\r\n                { color: \"#37909A\", offset: 90 }\r\n            ],\r\n            type: \"Radial\"\r\n        };\r\n        node.style.gradient = gradient;\r\n    }\r\n    if (con & NodeConstraints.Shadow) {\r\n        node.shadow = { angle: 45, distance: 15, opacity: 0.3, color: \"grey\" };\r\n        node.constraints |= con;\r\n    }\r\n    else {\r\n        node.constraints &= con;\r\n    }\r\n    diagramInstance.dataBind();\r\n}\r\n//Enable or disable the Constraints for Node.\r\nfunction changed(args) {\r\n    let element = document.getElementById(\"aspectRatio\");\r\n    for (let i = 0; i < diagramInstance.nodes.length; i++) {\r\n        node = diagramInstance.nodes[i];\r\n        if (args.event.target.id === \"lock\") {\r\n            if (args.checked) {\r\n                node.constraints &= ~(NodeConstraints.Resize |\r\n                    NodeConstraints.Rotate |\r\n                    NodeConstraints.Drag);\r\n                node.constraints |= NodeConstraints.ReadOnly;\r\n            }\r\n            else {\r\n                node.constraints |= NodeConstraints.Default & ~NodeConstraints.ReadOnly;\r\n            }\r\n        }\r\n        else {\r\n            if (element.checked) {\r\n                node.constraints |= NodeConstraints.AspectRatio;\r\n            }\r\n            else {\r\n                node.constraints &= ~NodeConstraints.AspectRatio;\r\n            }\r\n        }\r\n        diagramInstance.dataBind();\r\n    }\r\n}\r\n\nrender(<GettingStartedNodes />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}