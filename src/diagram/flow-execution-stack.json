{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from \"react\";\r\nimport { Node, DataBinding, DiagramComponent, SnapConstraints, Inject } from \"@syncfusion/ej2-react-diagrams\";\r\nimport { SampleBase } from './sample-base';\r\nimport { RadioButtonComponent } from \"@syncfusion/ej2-react-buttons\";\r\nlet nodes = [];\r\nlet port1 = { id: 'port1', offset: { x: 0.5, y: 1 } };\r\nlet port = { id: 'port', offset: { x: 1, y: 0.5 } };\r\nnodes.push(CreateNodes('node1', 100, 125, 'Terminator', 'Begin', 100, 35));\r\nnodes.push(CreateNodes('node2', 300, 125, 'Process', 'Specify collection', 120, 25, [port]));\r\nnodes.push(CreateNodes('node3', 500, 125, 'Decision', 'Particulars \\n required?', 100, 50, [port1]));\r\nnodes.push(CreateNodes('node4', 730, 125, 'Process', 'Specify particulars', 90, 25));\r\nnodes.push(CreateNodes('node5', 500, 225, 'Process', 'Design collection', 100, 25, [port]));\r\nnodes.push(CreateNodes('node6', 500, 320, 'Process', 'Cluster of events', 100, 25));\r\nnodes.push(CreateNodes('node7', 500, 420, 'Process', 'Start the process', 100, 25));\r\nnodes.push(CreateNodes('node8', 730, 320, 'Process', 'Record and analyze \\n results', 170, 25, [port]));\r\nnodes.push(CreateNodes('node9', 730, 420, 'Terminator', 'End ', 100, 35));\r\nlet connectors = [];\r\nconnectors.push(CreateConnector('connector1', 'node1', 'node2', ''));\r\nconnectors.push(CreateConnector('connector2', 'node2', 'node3', ''));\r\nconnectors.push(CreateConnector('connector3', 'node3', 'node4', 'Yes'));\r\nconnectors.push(CreateConnector('connector4', 'node3', 'node5', 'No'));\r\nconnectors.push(CreateConnector('connector5', 'node5', 'node6', ''));\r\nconnectors.push(CreateConnector('connector6', 'node6', 'node7', ''));\r\nconnectors.push(CreateConnector('connector7', 'node8', 'node6', ''));\r\nconnectors.push(CreateConnector('connector8', 'node7', 'node9', ''));\r\nconnectors.push(CreateConnector('connector10', 'node4', 'node5', '', 'Orthogonal', 'Bottom', 'port', 220));\r\nlet SAMPLE_CSS = `\r\n#flowExecitionPropertySection .row {\r\n            margin-left: 0px;\r\n            margin-right: 0px;\r\n        }\r\n\r\n        #flowExecitionPropertySection .col-xs-7 {\r\n            width: 300px;\r\n        }\r\n\r\n        #flowExecitionPropertySection .col-xs-7 {\r\n            padding-left: 0px;\r\n            padding-right: 0px;\r\n        }\r\n\r\n        #flowExecitionControlSection.content-wrapper {\r\n            border: 1px solid #D7D7D7;\r\n        }\r\n`;\r\nlet diagramInstance;\r\nexport class FlowExecution extends SampleBase {\r\n    renderComplete() {\r\n        diagramInstance.select([diagramInstance.nodes[2]]);\r\n        diagramInstance.selectionChange = (arg) => {\r\n            applyChanges(selectedButton);\r\n        };\r\n    }\r\n    render() {\r\n        return (<div className=\"control-pane1\">\r\n        <div className=\"col-lg-8 control-section\">\r\n          <style>{SAMPLE_CSS}</style>\r\n          <div id=\"flowExecitionControlSection\" className=\"content-wrapper\" style={{ width: \"100%\" }}>\r\n            <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={\"600px\"} nodes={nodes} snapSettings={{ constraints: SnapConstraints.None }} connectors={connectors} created={(args) => {\r\n            diagramInstance.select([diagramInstance.nodes[2]]);\r\n        }} selectionChange={(args) => {\r\n            applyChanges(selectedButton);\r\n        }}>\r\n              <Inject services={[DataBinding]}/>\r\n            </DiagramComponent>\r\n          </div>\r\n        </div>\r\n        <div id=\"flowExecitionPropertySection\" className=\"col-lg-4 property-section\">\r\n          <div className=\"property-panel-header\"> Choose a flow</div>\r\n          <div className=\"row property-panel-content\" id=\"appearance\">\r\n            <div className=\"row property-panel-content\">\r\n              <div className=\"row\">\r\n                <div className=\"col-xs-7\">\r\n                  <RadioButtonComponent id=\"UnhighlightAll\" name='radio' value='UnhighlightAll' label='None' change={(args) => {\r\n            buttonChange(args);\r\n        }}/>\r\n                </div>\r\n              </div>\r\n              <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n                <div className=\"col-xs-7\">\r\n                  <RadioButtonComponent id=\"LinksInto\" name='radio' value='LinksInto' label='Incoming connections' change={(args) => {\r\n            buttonChange(args);\r\n        }}/>\r\n                </div>\r\n              </div>\r\n              <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n                <div className=\"col-xs-7\">\r\n                  <RadioButtonComponent id=\"LinksOutOf\" name='radio' value='LinksOutOf' label='Outgoing connections' change={(args) => {\r\n            buttonChange(args);\r\n        }}/>\r\n                </div>\r\n              </div>\r\n              <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n                <div className=\"col-xs-7\">\r\n                  <RadioButtonComponent id=\"LinksConnected\" name='radio' value='LinksConnected' label='Incoming and outgoing connections' change={(args) => {\r\n            buttonChange(args);\r\n        }} checked={true}/>\r\n                </div>\r\n              </div>\r\n              <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n                <div className=\"col-xs-7\">\r\n                  <RadioButtonComponent id=\"NodesInto\" name='radio' value='NodesInto' label='Incoming nodes' change={(args) => {\r\n            buttonChange(args);\r\n        }}/>\r\n                </div>\r\n              </div>\r\n              <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n                <div className=\"col-xs-7\">\r\n                  <RadioButtonComponent id=\"NodesOutOf\" name='radio' value='NodesOutOf' label='Outgoing nodes' change={(args) => {\r\n            buttonChange(args);\r\n        }}/>\r\n                </div>\r\n              </div>\r\n              <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n                <div className=\"col-xs-7\">\r\n                  <RadioButtonComponent id=\"NodesConnected\" name='radio' value='NodesConnected' label='Incoming and outgoing nodes' change={(args) => {\r\n            buttonChange(args);\r\n        }}/>\r\n                </div>\r\n              </div>\r\n              <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n                <div className=\"col-xs-7\">\r\n                  <RadioButtonComponent id=\"NodesReachable\" name='radio' value='NodesReachable' label='Adjacent nodes' change={(args) => {\r\n            buttonChange(args);\r\n        }}/>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>);\r\n    }\r\n}\r\nfunction CreateConnector(name, source, target, content, type, direction, targePort, length) {\r\n    let connector = {};\r\n    connector.id = name;\r\n    connector.sourceID = source;\r\n    connector.targetID = target;\r\n    connector.style = { strokeWidth: 2 };\r\n    let annotation = {};\r\n    annotation.content = content;\r\n    annotation.style = { fill: 'white' };\r\n    connector.annotations = [annotation];\r\n    connector.style.strokeColor = '#8D8D8D';\r\n    connector.targetDecorator = {};\r\n    connector.targetDecorator.style = {};\r\n    connector.targetDecorator.style.strokeColor = '#8D8D8D';\r\n    connector.targetDecorator.style.fill = '#8D8D8D';\r\n    if (targePort) {\r\n        connector.targetPortID = targePort;\r\n    }\r\n    let segment = {};\r\n    if (type) {\r\n        connector.type = type;\r\n        segment.direction = direction;\r\n        segment.type = type;\r\n        segment.length = length;\r\n        connector.segments = [segment];\r\n    }\r\n    return connector;\r\n}\r\nfunction CreateNodes(name, offsetX, offsetY, shape, content, width, height, ports) {\r\n    let node = {};\r\n    node.id = name;\r\n    node.offsetX = offsetX;\r\n    node.width = 150;\r\n    node.height = 50;\r\n    node.offsetY = offsetY;\r\n    let annotations = {};\r\n    annotations.content = content;\r\n    node.annotations = [annotations];\r\n    node.shape = { type: 'Flow', shape: shape };\r\n    node.style = { fill: '#FBF6E1', strokeColor: '#E8DFB6', strokeWidth: 2 };\r\n    if (ports) {\r\n        node.ports = ports;\r\n    }\r\n    return node;\r\n}\r\nlet highLightedObjects = [];\r\nlet selectedButton = 'LinksConnected';\r\nfunction buttonChange(args) {\r\n    applyChanges(args.event.srcElement.id);\r\n    selectedButton = args.event.srcElement.id;\r\n}\r\nfunction applyChanges(id) {\r\n    Unhighlight();\r\n    switch (id) {\r\n        case 'LinksInto':\r\n            linkedIn();\r\n            break;\r\n        case 'LinksOutOf':\r\n            LinksOut();\r\n            break;\r\n        case 'LinksConnected':\r\n            LinksConnector();\r\n            break;\r\n        case 'NodesInto':\r\n            NodesIn();\r\n            break;\r\n        case 'NodesOutOf':\r\n            NodesOut();\r\n            break;\r\n        case 'NodesConnected':\r\n            NodesConnect();\r\n            break;\r\n        case 'NodesReachable':\r\n            NodeReachable();\r\n            break;\r\n    }\r\n}\r\nfunction linkedIn() {\r\n    if (diagramInstance.selectedItems.nodes.length) {\r\n        let node = diagramInstance.selectedItems.nodes[0].inEdges;\r\n        for (let i = 0; i < node.length; i++) {\r\n            let index = diagramInstance.connectors.indexOf(diagramInstance.nameTable[node[i]]);\r\n            highLightedObjects.push(node[i]);\r\n            diagramInstance.connectors[index].style.strokeColor = '#1413F8';\r\n            diagramInstance.connectors[index].targetDecorator.style.strokeColor = '#1413F8';\r\n            diagramInstance.connectors[index].targetDecorator.style.fill = '#1413F8';\r\n            diagramInstance.dataBind();\r\n        }\r\n    }\r\n}\r\nfunction LinksOut() {\r\n    if (diagramInstance.selectedItems.nodes.length) {\r\n        let node = diagramInstance.selectedItems.nodes[0].outEdges;\r\n        for (let i = 0; i < node.length; i++) {\r\n            let index = diagramInstance.connectors.indexOf(diagramInstance.nameTable[node[i]]);\r\n            highLightedObjects.push(node[i]);\r\n            diagramInstance.connectors[index].style.strokeColor = '#1413F8';\r\n            diagramInstance.connectors[index].targetDecorator.style.strokeColor = '#1413F8';\r\n            diagramInstance.connectors[index].targetDecorator.style.fill = '#1413F8';\r\n            diagramInstance.dataBind();\r\n        }\r\n    }\r\n}\r\nfunction LinksConnector() {\r\n    LinksOut();\r\n    linkedIn();\r\n}\r\nfunction NodesIn() {\r\n    if (diagramInstance.selectedItems.nodes.length) {\r\n        let node = diagramInstance.selectedItems.nodes[0].inEdges;\r\n        for (let i = 0; i < node.length; i++) {\r\n            let nodeId = diagramInstance.nameTable[node[i]].sourceID;\r\n            highLightedObjects.push(nodeId);\r\n            let index = diagramInstance.nodes.indexOf(diagramInstance.nameTable[nodeId]);\r\n            diagramInstance.nodes[index].style.strokeColor = '#1413F8';\r\n            diagramInstance.dataBind();\r\n        }\r\n    }\r\n}\r\nfunction NodesOut() {\r\n    if (diagramInstance.selectedItems.nodes.length) {\r\n        let node = diagramInstance.selectedItems.nodes[0].outEdges;\r\n        for (let i = 0; i < node.length; i++) {\r\n            let nodeId = diagramInstance.nameTable[node[i]].targetID;\r\n            highLightedObjects.push(nodeId);\r\n            let index = diagramInstance.nodes.indexOf(diagramInstance.nameTable[nodeId]);\r\n            diagramInstance.nodes[index].style.strokeColor = '#1413F8';\r\n            diagramInstance.dataBind();\r\n        }\r\n    }\r\n}\r\nfunction NodesConnect() {\r\n    NodesOut();\r\n    NodesIn();\r\n}\r\nfunction NodeReachable() {\r\n    if (diagramInstance.selectedItems.nodes.length) {\r\n        let connectors = diagramInstance.selectedItems.nodes[0].outEdges;\r\n        let nodeList = foundNode(connectors, []);\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            let index = diagramInstance.connectors.indexOf(diagramInstance.nameTable[nodeList[i]]);\r\n            highLightedObjects.push(nodeList[i]);\r\n            diagramInstance.connectors[index].style.strokeColor = '#1413F8';\r\n            diagramInstance.connectors[index].targetDecorator.style.strokeColor = '#1413F8';\r\n            diagramInstance.connectors[index].targetDecorator.style.fill = '#1413F8';\r\n            diagramInstance.dataBind();\r\n        }\r\n    }\r\n}\r\nfunction foundNode(list, nodeList) {\r\n    for (let i = 0; i < list.length; i++) {\r\n        let connector = diagramInstance.nameTable[list[i]];\r\n        if (nodeList.indexOf(connector.id) > -1) {\r\n            break;\r\n        }\r\n        if (!connector.annotations[0] || (connector.annotations[0] && connector.annotations[0].content !== 'No')) {\r\n            nodeList.push(connector.id);\r\n        }\r\n        if (diagramInstance.nameTable[connector.targetID].outEdges.length) {\r\n            if (list.indexOf(connector.targetID) === -1) {\r\n                foundNode(diagramInstance.nameTable[connector.targetID].outEdges, nodeList);\r\n            }\r\n        }\r\n    }\r\n    return nodeList;\r\n}\r\nfunction Unhighlight() {\r\n    for (let i = highLightedObjects.length - 1; i >= 0; i--) {\r\n        if (diagramInstance.nameTable[highLightedObjects[i]] instanceof Node) {\r\n            let index = diagramInstance.nodes.indexOf(diagramInstance.nameTable[highLightedObjects[i]]);\r\n            diagramInstance.nodes[index].style.strokeColor = '#E8DFB6';\r\n            diagramInstance.dataBind();\r\n        }\r\n        else {\r\n            let index = diagramInstance.connectors.indexOf(diagramInstance.nameTable[highLightedObjects[i]]);\r\n            diagramInstance.connectors[index].style.strokeColor = '#8D8D8D';\r\n            diagramInstance.connectors[index].targetDecorator.style.strokeColor = '#8D8D8D';\r\n            diagramInstance.connectors[index].targetDecorator.style.fill = '#8D8D8D';\r\n            diagramInstance.dataBind();\r\n        }\r\n    }\r\n    highLightedObjects = [];\r\n}\r\n\nrender(<FlowExecution />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}