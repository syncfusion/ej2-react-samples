{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from \"react\";\r\nimport { BpmnDiagrams, SnapConstraints, DiagramComponent, Inject, DataBinding, NodeConstraints } from \"@syncfusion/ej2-react-diagrams\";\r\nimport { SampleBase } from './sample-base';\r\nlet basicShapeModel = [\r\n    {\r\n        shape: { type: \"Text\", content: \"Basic Shapes\" },\r\n        constraints: NodeConstraints.PointerEvents,\r\n        style: {\r\n            fontSize: 16,\r\n            fill: \"None\",\r\n            fontFamily: \"sans-serif\",\r\n            bold: true,\r\n            strokeWidth: 0\r\n        }\r\n    },\r\n    {\r\n        shape: { type: \"Basic\", shape: \"Rectangle\" },\r\n        annotations: [{ content: \"Rectangle\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Basic\", shape: \"Ellipse\" },\r\n        annotations: [{ content: \"Ellipse\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Basic\", shape: \"Triangle\" },\r\n        annotations: [{ content: \"Triangle\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Basic\", shape: \"Plus\" },\r\n        annotations: [{ content: \"Plus\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Basic\", shape: \"Star\" },\r\n        annotations: [{ content: \"Star\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Basic\", shape: \"Pentagon\" },\r\n        annotations: [{ content: \"Pentagon\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Basic\", shape: \"Heptagon\" },\r\n        annotations: [{ content: \"Heptagon\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Basic\", shape: \"Octagon\" },\r\n        annotations: [{ content: \"Octagon\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Basic\", shape: \"Trapezoid\" },\r\n        annotations: [{ content: \"Trapezoid\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Basic\", shape: \"Decagon\" },\r\n        annotations: [{ content: \"Decagon\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Basic\", shape: \"RightTriangle\" },\r\n        annotations: [{ content: \"Right Triangle\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Basic\", shape: \"Parallelogram\" },\r\n        annotations: [{ content: \"Parallelogram\" }]\r\n    }\r\n];\r\nlet flowShapeModel = [\r\n    {\r\n        shape: { type: \"Text\", content: \"Flow Shapes\" },\r\n        constraints: NodeConstraints.PointerEvents,\r\n        style: {\r\n            fontSize: 16,\r\n            fill: \"None\",\r\n            fontFamily: \"sans-serif\",\r\n            bold: true,\r\n            strokeWidth: 0\r\n        }\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"Terminator\" },\r\n        annotations: [{ content: \"Terminator\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"Process\" },\r\n        annotations: [{ content: \"Process\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"Decision\" },\r\n        annotations: [{ content: \"Decision\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"Document\" },\r\n        annotations: [{ content: \"Document\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"PreDefinedProcess\" },\r\n        annotations: [{ content: \"Predefined Process\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"PaperTap\" },\r\n        annotations: [{ content: \"Paper Tape\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"DirectData\" },\r\n        annotations: [{ content: \"Direct Data\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"SequentialData\" },\r\n        annotations: [{ content: \"Direct Data\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"Sort\" },\r\n        annotations: [{ content: \"Sort\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"MultiDocument\" },\r\n        annotations: [{ content: \"Multi-Document\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"Collate\" },\r\n        annotations: [{ content: \"Collate\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"SummingJunction\" },\r\n        annotations: [{ content: \"Summing Junction\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"Or\" },\r\n        annotations: [{ content: \"Or\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"InternalStorage\" },\r\n        annotations: [{ content: \"Internal Storage\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"Extract\" },\r\n        annotations: [{ content: \"Extract\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"ManualOperation\" },\r\n        annotations: [{ content: \"Manual Operation\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"Merge\" },\r\n        annotations: [{ content: \"Merge\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"OffPageReference\" },\r\n        annotations: [{ content: \"Off-Page Reference\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"SequentialAccessStorage\" },\r\n        annotations: [{ content: \"Sequential Access Storage\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"Data\" },\r\n        annotations: [{ content: \"Data\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Flow\", shape: \"Card\" },\r\n        annotations: [{ content: \"Card\" }]\r\n    }\r\n];\r\nlet bpmnShapeModel = [\r\n    {\r\n        shape: { type: \"Text\", content: \"BPMN Shapes\" },\r\n        constraints: NodeConstraints.PointerEvents,\r\n        style: {\r\n            fontSize: 16,\r\n            fill: \"none\",\r\n            fontFamily: \"sans-serif\",\r\n            bold: true,\r\n            strokeWidth: 0\r\n        }\r\n    },\r\n    {\r\n        shape: {\r\n            type: \"Bpmn\",\r\n            shape: \"Event\",\r\n            event: { event: \"Start\", trigger: \"None\" }\r\n        },\r\n        annotations: [{ content: \"Start Event\" }]\r\n    },\r\n    {\r\n        shape: {\r\n            type: \"Bpmn\",\r\n            shape: \"Event\",\r\n            event: { event: \"Intermediate\", trigger: \"None\" }\r\n        },\r\n        annotations: [{ content: \"Intermediate Event\" }]\r\n    },\r\n    {\r\n        shape: {\r\n            type: \"Bpmn\",\r\n            shape: \"Event\",\r\n            event: { event: \"End\", trigger: \"None\" }\r\n        },\r\n        annotations: [{ content: \"End Event\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Bpmn\", shape: \"Gateway\" },\r\n        annotations: [{ content: \"Gateway\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Bpmn\", shape: \"Activity\", activity: { activity: \"Task\" } },\r\n        annotations: [{ content: \"Task\" }]\r\n    },\r\n    {\r\n        shape: {\r\n            type: \"Bpmn\",\r\n            shape: \"Activity\",\r\n            activity: {\r\n                activity: \"SubProcess\",\r\n                subProcess: {\r\n                    type: \"Transaction\",\r\n                    transaction: {\r\n                        success: { visible: false },\r\n                        failure: { visible: false },\r\n                        cancel: { visible: false }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        annotations: [{ content: \"Transaction\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Bpmn\", shape: \"Message\" },\r\n        annotations: [{ content: \"Message\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Bpmn\", shape: \"DataObject\" },\r\n        annotations: [{ content: \"Data Object\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Bpmn\", shape: \"DataSource\" },\r\n        annotations: [{ content: \"Data Source\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Bpmn\", shape: \"Group\" },\r\n        annotations: [{ content: \"Group\" }]\r\n    },\r\n    {\r\n        shape: { type: \"Bpmn\", shape: \"TextAnnotation\" },\r\n        annotations: [{ content: \"Text Annotation\" }]\r\n    }\r\n];\r\nlet shape = [\r\n    { shapeName: \"Basic Shapes\", shapeId: \"Basic\" },\r\n    { shapeName: \"Flow Shapes\", shapeId: \"Flow\" },\r\n    { shapeName: \"BPMN Shapes\", shapeId: \"Bpmn\" }\r\n];\r\nconst SAMPLE_CSS = `.image-pattern-style {\r\n    background-color: white;\r\n    background-size: contain;\r\n    background-repeat: no-repeat;\r\n    height: 75px;\r\n    width: calc((100% - 12px) / 3);\r\n    cursor: pointer;\r\n    border: 1px solid #D5D5D5;\r\n    background-position: center;\r\n    float: left;\r\n}\r\n\r\n.row {\r\n    margin-left: 0px;\r\n    margin-right: 0px;\r\n}\r\n\r\n.row-header {\r\n    font-size: 13px;\r\n    font-weight: 500;\r\n}\r\n\r\n.property-panel-header {\r\n    color: rgba(0, 0, 0, .7)\r\n}\r\n}`;\r\nlet diagramInstance;\r\nexport class ShapeGallery extends SampleBase {\r\n    rendereComplete() {\r\n        diagramInstance.fitToPage({ mode: \"Width\" });\r\n    }\r\n    render() {\r\n        return (<div className=\"control-pane\">\r\n        <style>{SAMPLE_CSS}</style>\r\n        <div className=\"control-section\">\r\n          <div className=\"content-wrapper\" style={{ width: \"100%\" }}>\r\n            <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={\"499px\"} snapSettings={{ constraints: SnapConstraints.None }} nodes={getNodes()} \r\n        //Defines the default node and connector properties\r\n        getNodeDefaults={(obj, diagram) => {\r\n            return obj;\r\n        }}>\r\n              <Inject services={[DataBinding, BpmnDiagrams]}/>\r\n            </DiagramComponent>\r\n          </div>\r\n        </div>\r\n      </div>);\r\n    }\r\n}\r\nfunction getNodes() {\r\n    var nodes1 = basicShapeModel;\r\n    nodes1 = nodes1.concat(flowShapeModel).concat(bpmnShapeModel);\r\n    var offsetx = 60;\r\n    var offsety = 50;\r\n    var count = 1;\r\n    for (var i = 0; i < nodes1.length; i++) {\r\n        var node = nodes1[i];\r\n        node.width = 40;\r\n        node.height = 40;\r\n        if (node.shape.type === \"Flow\") {\r\n            let shapeType = node.shape.shape;\r\n            if (shapeType === \"Process\" || shapeType === \"Terminator\") {\r\n                node.height = 20;\r\n            }\r\n            else if (shapeType === \"Decision\") {\r\n                node.height = 35;\r\n            }\r\n            else if (shapeType === \"Document\" ||\r\n                shapeType === \"DirectData\" ||\r\n                shapeType === \"MultiDocument\" ||\r\n                shapeType === \"PreDefinedProcess\") {\r\n                node.height = 30;\r\n            }\r\n        }\r\n        node.offsetX = offsetx;\r\n        node.offsetY = offsety;\r\n        if (!(node.shape.type === \"Text\")) {\r\n            node.annotations[0].verticalAlignment = \"Top\";\r\n            node.annotations[0].offset = { y: 1 };\r\n            node.annotations[0].margin = { top: 10 };\r\n            offsetx = offsetx + 90;\r\n            if (count % 10 === 0) {\r\n                offsety = offsety + 100;\r\n                offsetx = 60;\r\n            }\r\n            count++;\r\n        }\r\n        if (node.shape.type === \"Text\") {\r\n            offsetx = 60;\r\n            offsety = offsety + 50;\r\n            count = 1;\r\n            node.width = 150;\r\n            node.height = 100;\r\n            node.offsetX = 90;\r\n            if (!(node.shape.content === \"Basic Shapes\")) {\r\n                node.offsetX = 90;\r\n                node.offsetY = offsety + 50;\r\n                offsety = offsety + 100;\r\n            }\r\n        }\r\n    }\r\n    return nodes1;\r\n}\r\n\nrender(<ShapeGallery />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}