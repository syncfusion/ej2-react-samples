{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { DiagramComponent, SnapConstraints, Inject, NodeConstraints, BpmnDiagrams } from '@syncfusion/ej2-react-diagrams';\r\nimport { SampleBase } from './sample-base';\r\nimport { NumericTextBoxComponent, TextBoxComponent } from '@syncfusion/ej2-react-inputs';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\n/**\r\n * Tooltip sample\r\n */\r\nconst SAMPLE_CSS = `#tooltipDiagramSection .image-pattern-style {\r\n    background-color: white;\r\n    background-size: contain;\r\n    background-repeat: no-repeat;\r\n    height: 75px;\r\n    width: calc((100% - 12px) / 3);\r\n    cursor: pointer;\r\n    border: 1px solid #D5D5D5;\r\n    background-position: center;\r\n    float: left;\r\n}\r\n\r\n#tooltipDiagramSection .image-pattern-style:hover {\r\n    border-color: gray;\r\n    border-width: 2px;\r\n}\r\n\r\n#tooltipDiagramSection .row {\r\n    margin-left: 0px;\r\n    margin-right: 0px;\r\n}\r\n\r\n#tooltipDiagramSection .row-header {\r\n    font-size: 13px;\r\n    font-weight: 500;\r\n}\r\n\r\n#tooltipDiagramSection .e-selected-style {\r\n    border-color: #006CE6;\r\n    border-width: 2px;\r\n}\r\n\r\n#tooltipDiagramSection .e-checkbox-wrapper .e-label {\r\n    font-size: 12px;\r\n}\r\n.content-wrapper {\r\n    border: 1px solid #D7D7D7;\r\n}\r\n#tooltipPropertySection .property-panel-header {\r\n    margin-left: 10px;\r\n}`;\r\n// FontType Collection\r\nexport let modevalue = [\r\n    { type: 'Object', text: 'Object' },\r\n    { type: 'Mouse', text: 'Mouse' },\r\n];\r\n// FontType Collection\r\nexport let PositionValue = [\r\n    { type: 'TopLeft', text: 'TopLeft' },\r\n    { type: 'TopCenter', text: 'TopCenter' },\r\n    { type: 'TopRight', text: 'TopRight' },\r\n    { type: 'BottomLeft', text: 'BottomLeft' },\r\n    { type: 'BottomCenter', text: 'BottomCenter' },\r\n    { type: 'BottomRight', text: 'BottomRight' },\r\n    { type: 'LeftTop', text: 'LeftTop' },\r\n    { type: 'LeftCenter', text: 'LeftCenter' },\r\n    { type: 'LeftBottom', text: 'LeftBottom' },\r\n    { type: 'RightTop', text: 'RightTop' },\r\n    { type: 'RightCenter', text: 'RightCenter' },\r\n    { type: 'RightBottom', text: 'RightBottom' },\r\n];\r\n//FontType Collection\r\nexport let EffectValue = [\r\n    { type: 'FadeIn', text: 'FadeIn' },\r\n    { type: 'FadeOut', text: 'FadeOut' },\r\n    { type: 'FadeZoomIn', text: 'FadeZoomIn' },\r\n    { type: 'FadeZoomOut', text: 'FadeZoomOut' },\r\n    { type: 'FlipXDownIn', text: 'FlipXDownIn' },\r\n    { type: 'FlipXDownOut', text: 'FlipXDownOut' },\r\n    { type: 'FlipXUpIn', text: 'FlipXUpIn' },\r\n    { type: 'FlipXUpOut', text: 'FlipXUpOut' },\r\n    { type: 'FlipYLeftIn', text: 'FlipYLeftIn' },\r\n    { type: 'FlipYLeftOut', text: 'FlipYLeftOut' },\r\n    { type: 'FlipYRightIn', text: 'FlipYRightIn' },\r\n    { type: 'FlipYRightOut', text: 'FlipYRightOut' },\r\n    { type: 'ZoomIn', text: 'ZoomIn' },\r\n    { type: 'ZoomOut', text: 'ZoomOut' },\r\n    { type: 'None', text: 'None' },\r\n];\r\nexport let contentValue = [\r\n    { type: 'HTML Element', text: 'HTML Element' },\r\n    { type: 'Text', text: 'Text' },\r\n];\r\nlet diagramInstance;\r\nlet modeDropdown;\r\nlet positionDropdown;\r\nlet contentDropdown;\r\nlet effectDropdown;\r\nlet nodes = [\r\n    {\r\n        id: 'node1', width: 60, height: 60, offsetX: 35, offsetY: 120,\r\n        annotations: [{ content: 'Customer query', offset: { x: 0.5, y: 1 }, margin: { top: 15 } }],\r\n        tooltip: { content: 'Queries from the customer' },\r\n        shape: { type: 'Bpmn', shape: 'Event', event: { event: 'Start', trigger: 'Message' } }\r\n    },\r\n    {\r\n        id: 'node2', width: 75, height: 70, offsetX: 140, offsetY: 120,\r\n        annotations: [{ content: 'Enough details?', offset: { x: 0.50, y: 0.50 } }],\r\n        tooltip: { content: 'Whether the provided information is enough?' }, shape: { type: 'Bpmn', shape: 'Gateway' }\r\n    },\r\n    {\r\n        id: 'node3', width: 60, height: 50, offsetX: 270, offsetY: 120,\r\n        annotations: [{ content: 'Analyse', offset: { x: 0.50, y: 0.50 } }],\r\n        tooltip: { content: 'Analysing the query' },\r\n        shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task' } },\r\n    },\r\n    {\r\n        id: 'node4', width: 75, height: 70, offsetX: 370, offsetY: 120, shape: {\r\n            type: 'Bpmn', shape: 'Gateway',\r\n            gateway: { type: 'Exclusive' }\r\n        },\r\n        tooltip: { content: 'proceed to validate?' },\r\n    },\r\n    {\r\n        id: 'node5', width: 75, height: 70, offsetX: 570, offsetY: 120,\r\n        annotations: [{ content: 'Validate', offset: { x: 0.50, y: 0.50 } }],\r\n        tooltip: { content: 'Whether the reported/requested bug/feature is valid?' }, shape: { type: 'Bpmn', shape: 'Gateway' }\r\n    },\r\n    {\r\n        id: 'node6', width: 60, height: 60, offsetX: 720, offsetY: 120,\r\n        tooltip: { content: 'Send the invalid message to customer' },\r\n        shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'Message' } }\r\n    },\r\n    {\r\n        id: 'node7', width: 60, height: 50, offsetX: 140, offsetY: 280,\r\n        annotations: [{ content: 'Request', offset: { x: 0.50, y: 0.50 }, margin: { top: 5 } }],\r\n        tooltip: { content: 'Requesting for more information' },\r\n        shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task', task: { type: 'Send' } } }\r\n    },\r\n    {\r\n        id: 'node8', width: 60, height: 60, offsetX: 370, offsetY: 280,\r\n        tooltip: { content: 'Share the User Guide/Knowledge Base link' },\r\n        shape: { type: 'Bpmn', shape: 'Event', event: { event: 'Start', trigger: 'Message' } }\r\n    },\r\n    {\r\n        id: 'node9', width: 70, height: 50, offsetX: 570, offsetY: 280,\r\n        annotations: [{ content: 'Log bug/feature', offset: { x: 0.50, y: 0.50 } }], tooltip: { content: 'Log the bug/feature' },\r\n        shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task' } }\r\n    },\r\n    {\r\n        id: 'node10', width: 75, height: 55, offsetX: 390, offsetY: 430,\r\n        annotations: [{ content: 'Implement', offset: { x: 0.50, y: 0.50 } }], tooltip: { content: 'Fix the bug/Add the feature' },\r\n        shape: {\r\n            type: 'Bpmn', shape: 'Activity', activity: {\r\n                activity: 'SubProcess', subProcess: {\r\n                    collapsed: false,\r\n                    events: [{ event: 'Intermediate', trigger: 'Timer', offset: { x: 0.5, y: 1 }, width: 25, height: 25 }]\r\n                }\r\n            }\r\n        }\r\n    },\r\n    {\r\n        id: 'node12', width: 60, height: 60, offsetX: 265, offsetY: 430, tooltip: { content: 'Provide the solution' },\r\n        shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'Message' } }\r\n    },\r\n    {\r\n        id: 'node13', width: 60, height: 60, offsetX: 720, offsetY: 430, tooltip: { content: 'Share the task details' },\r\n        shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'Message' } }\r\n    },\r\n    {\r\n        id: 'node14', width: 60, height: 60, offsetX: 570, offsetY: 430, shape: {\r\n            type: 'Bpmn', shape: 'Gateway',\r\n            gateway: { type: 'Parallel' }\r\n        },\r\n        tooltip: { content: 'can log?' },\r\n    },\r\n];\r\nlet connectors = [\r\n    { id: 'connector1', sourceID: 'node1', targetID: 'node2' },\r\n    { id: 'connector2', sourceID: 'node2', targetID: 'node3' },\r\n    { id: 'connector3', sourceID: 'node3', targetID: 'node4' },\r\n    {\r\n        id: 'connector4', sourceID: 'node4', targetID: 'node5',\r\n        annotations: [{ content: 'Feature/Bug', offset: 0.5, style: { fill: 'white', textWrapping: 'Wrap' } }]\r\n    },\r\n    {\r\n        id: 'connector5', sourceID: 'node5', targetID: 'node6',\r\n        annotations: [{ content: 'Invalid', offset: 0.5, style: { fill: 'white' } }]\r\n    },\r\n    { id: 'connector6', sourceID: 'node2', targetID: 'node7' },\r\n    {\r\n        id: 'connector7', sourceID: 'node4', targetID: 'node8',\r\n        annotations: [{ content: 'How to?', offset: 0.5, style: { fill: 'white' } }]\r\n    },\r\n    { id: 'connector8', sourceID: 'node5', targetID: 'node9' },\r\n    { id: 'connector9', sourceID: 'node14', targetID: 'node13' },\r\n    {\r\n        id: 'connector10', sourceID: 'node7', targetID: 'node3', type: 'Orthogonal',\r\n        segments: [{ type: 'Orthogonal', length: 100, direction: 'Right' }, { type: 'Orthogonal', length: 100, direction: 'Top' }]\r\n    },\r\n    { id: 'connector11', sourceID: 'node14', targetID: 'node10' },\r\n    { id: 'connector12', sourceID: 'node10', targetID: 'node12' },\r\n    { id: 'connector13', sourceID: 'node9', targetID: 'node14' },\r\n];\r\nexport class Tooltip extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.fields = { text: 'text', value: 'type' };\r\n    }\r\n    rendereComplete() {\r\n        diagramInstance.fitToPage({ mode: 'Width' });\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className='col-lg-8 control-section'>\r\n                    <style>{SAMPLE_CSS}</style>\r\n                    <div id=\"tooltipDiagramSection\" className=\"content-wrapper\" style={{ width: \"100%\" }}>\r\n                        <DiagramComponent id='diagram' ref={diagram => (diagramInstance = diagram)} width={'100%'} height={'645px'} nodes={nodes} connectors={connectors} snapSettings={{ constraints: SnapConstraints.None }} getConnectorDefaults={getConnectorDefaults} getNodeDefaults={getNodeDefaults} tooltip={{ content: getcontent(), position: 'TopLeft', relativeMode: 'Object', animation: { open: { effect: 'FadeZoomIn', delay: 0 }, close: { effect: 'FadeZoomOut', delay: 0 } } }}>\r\n                            <Inject services={[BpmnDiagrams]}/>\r\n                        </DiagramComponent>\r\n                    </div>\r\n                </div>\r\n                <div id='tooltipPropertySection' className='col-lg-4 property-section'>\r\n                    <div className='property-panel-header' style={{ marginLeft: '0px' }}>Properties</div>\r\n                    <table id='property' title='Properties'>\r\n                        <tr>\r\n                            <td>\r\n                                <div>\r\n                                    Relative Mode\r\n                                </div>\r\n                            </td>\r\n                            <td>\r\n                                <div style={{ paddingLeft: \"15px\" }}>\r\n                                    <DropDownListComponent id='mode' ref={dropdown => (modeDropdown = dropdown)} dataSource={modevalue} fields={this.fields} placeholder='select a mode value' popupWidth='150' width='100%' index='0' change={(args) => {\r\n            if (args.value === 'Mouse') {\r\n                diagramInstance.tooltip.relativeMode = 'Mouse';\r\n            }\r\n            else {\r\n                diagramInstance.tooltip.relativeMode = 'Object';\r\n            }\r\n            diagramInstance.dataBind();\r\n        }}>\r\n                                    </DropDownListComponent>\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <div>\r\n                                    Position\r\n                               </div>\r\n                            </td>\r\n                            <td>\r\n                                <div style={{ paddingLeft: \"15px\" }}>\r\n                                    <DropDownListComponent id='position' ref={dropdown => (positionDropdown = dropdown)} dataSource={PositionValue} fields={this.fields} index='0' placeholder='select a position' popupWidth='150' width='100%' change={(args) => {\r\n            let nodes = diagramInstance.nodes;\r\n            for (let i = 0; i < nodes.length; i++) {\r\n                if (nodes[i].tooltip) {\r\n                    nodes[i].tooltip.position = args.value;\r\n                    diagramInstance.dataBind();\r\n                }\r\n            }\r\n        }}>\r\n                                    </DropDownListComponent>\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td>\r\n                                <div id='textContentDiv' className='row' style={{ display: 'none' }}>\r\n                                    <div>\r\n                                        <TextBoxComponent id='textContent' placeholder='Enter text content' floatLabelType='Auto' change={(args) => {\r\n            diagramInstance.tooltip.content = args.value.toString();\r\n            diagramInstance.dataBind();\r\n        }}>\r\n                                        </TextBoxComponent>\r\n                                    </div>\r\n                                </div>\r\n                                <div id='htmlContentDiv' className='row' style={{ display: 'none' }}>\r\n                                    <div>\r\n                                        <TextBoxComponent id='htmlContent' placeholder='Enter html content' floatLabelType='Auto' change={(args) => {\r\n            let tooltipContent = document.createElement('div');\r\n            let Description = args.value.toString();\r\n            tooltipContent.innerHTML = '<div style=\"background-color: #f4f4f4; color: black; border-width:1px;border-style: solid;border-color: #d3d3d3; border-radius: 8px;corner-radius:2px;white-space: nowrap;\"> <span style=\"margin: 10px;\"> ' + Description + ' </span>';\r\n            diagramInstance.tooltip.content = tooltipContent;\r\n            diagramInstance.dataBind();\r\n        }}>\r\n                                        </TextBoxComponent>\r\n                                    </div>\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <div>\r\n                                    Animation\r\n                                </div>\r\n                            </td>\r\n                            <td style={{ paddingLeft: \"15px\" }}>\r\n                                <NumericTextBoxComponent id='duration' value={1000} min={1000} max={6000} step={100} change={(args) => {\r\n            diagramInstance.tooltip.animation.close.duration = args.value;\r\n            diagramInstance.tooltip.animation.open.duration = args.value;\r\n            diagramInstance.dataBind();\r\n        }}></NumericTextBoxComponent>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <div>\r\n                                    Effect\r\n                               </div>\r\n                            </td>\r\n                            <td>\r\n                                <div style={{ paddingLeft: \"15px\" }}>\r\n                                    <DropDownListComponent id='effect' ref={dropdown => (effectDropdown = dropdown)} dataSource={EffectValue} fields={this.fields} placeholder='select a effect' popupWidth='150' width='100%' index='0' change={(args) => {\r\n            diagramInstance.tooltip.animation.open.effect = args.value;\r\n            diagramInstance.tooltip.animation.close.effect = args.value;\r\n            diagramInstance.dataBind();\r\n        }}>\r\n                                    </DropDownListComponent>\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\nfunction getConnectorDefaults(connector, diagram) {\r\n    connector.type = 'Orthogonal';\r\n    connector.style = { strokeWidth: 2 };\r\n    return connector;\r\n}\r\nfunction getNodeDefaults(obj) {\r\n    obj.offsetX += 0.5;\r\n    obj.offsetY += 0.5;\r\n    obj.constraints = NodeConstraints.Default | NodeConstraints.Tooltip;\r\n    obj.style = { strokeWidth: 2 };\r\n    return obj;\r\n}\r\nfunction getcontent() {\r\n    let tooltipContent = document.createElement('div');\r\n    tooltipContent.innerHTML = '<div style=\"background-color: #f4f4f4; color: black; border-width:1px;border-style: solid;border-color: #d3d3d3; border-radius: 8px;white-space: nowrap;\"> <span style=\"margin: 10px;\"> Tooltip !!! </span> </div>';\r\n    return tooltipContent;\r\n}\r\n\nrender(<Tooltip />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}