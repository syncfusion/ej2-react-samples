{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from \"react\";\r\nimport { DiagramComponent, Inject, UndoRedo, SnapConstraints } from \"@syncfusion/ej2-react-diagrams\";\r\nimport { SampleBase } from './sample-base';\r\nimport { ButtonComponent } from \"@syncfusion/ej2-react-buttons\";\r\nimport { NumericTextBoxComponent } from \"@syncfusion/ej2-react-inputs\";\r\nimport { ListViewComponent } from \"@syncfusion/ej2-react-lists\";\r\nlet SAMPLE_CSS = `#historyPropertySection .row {\r\n            margin-left: 0px;\r\n            margin-right: 0px;\r\n        }\r\n        #historyControlSection.content-wrapper {\r\n            border: 1px solid #D7D7D7;\r\n        }\r\n\r\n        #historyPropertySection .listbox {\r\n            width: 100%;\r\n            height: 50%;\r\n        }\r\n\r\n        #historyPropertySection .property-panel-content div:not(.heading) {\r\n         padding: 0px;\r\n        }\r\n\r\n        #historyPropertySection .heading {\r\n            color: #807f7f;\r\n            font-size: 15px;\r\n            height: 50px;\r\n            width: 100%;\r\n            border-bottom: 1px solid #d9dedd;\r\n            padding: 10px;\r\n        }`;\r\nlet nodes = [\r\n    {\r\n        id: 'node1', offsetX: 400, offsetY: 30, style: { fill: '#FFB2B2', strokeColor: '#FFB2B2' }, width: 70, height: 40,\r\n        shape: { type: 'Flow', shape: 'Terminator' },\r\n        annotations: [{ id: 'label1', content: 'Start' }],\r\n    },\r\n    {\r\n        id: 'node2', offsetX: 400, offsetY: 100, style: { fill: '#DCDCDC', strokeColor: '#DCDCDC' },\r\n        shape: { type: 'Flow', shape: 'Process' }, annotations: [{ id: 'label1', content: 'Design' }],\r\n        ports: [{ id: 'designPort', offset: { x: 0, y: 0.5 } }]\r\n    },\r\n    {\r\n        id: 'node3', offsetX: 400, offsetY: 180, style: { fill: '#DCDCDC', strokeColor: '#DCDCDC' },\r\n        annotations: [{ id: 'label1', content: 'Coding' }],\r\n        shape: { type: 'Flow', shape: 'Process' }, ports: [{ id: 'codingPort', offset: { x: 0, y: 0.5 } }]\r\n    },\r\n    {\r\n        id: 'node4', offsetX: 400, offsetY: 260, style: { fill: '#DCDCDC', strokeColor: '#DCDCDC' },\r\n        annotations: [{ id: 'label1', content: 'Testing' }], shape: { type: 'Flow', shape: 'Process' }\r\n    },\r\n    {\r\n        id: 'node5', offsetX: 400, offsetY: 340, style: { fill: '#A2D8B0', strokeColor: '#A2D8B0' }, width: 80, height: 60,\r\n        annotations: [{ id: 'label1', content: 'Errors?' }], shape: { type: 'Flow', shape: 'Decision' }\r\n    },\r\n    {\r\n        id: 'node6', offsetX: 400, offsetY: 430, style: { fill: '#FFB2B2', strokeColor: '#FFB2B2' }, width: 70, height: 40,\r\n        annotations: [{ id: 'label1', content: 'End' }], shape: { type: 'Flow', shape: 'Terminator' }\r\n    },\r\n    {\r\n        id: 'node7', width: 100, offsetX: 220, offsetY: 180, style: { fill: '#A2D8B0', strokeColor: '#A2D8B0' }, height: 60,\r\n        annotations: [{ id: 'label1', content: 'Design Error?' }], shape: { type: 'Flow', shape: 'Decision' },\r\n        ports: [\r\n            { id: 'porterror', offset: { x: 0.5, y: 0 } },\r\n            { id: 'portcoding', offset: { x: 1, y: 0.5 } },\r\n            { id: 'portdesign', offset: { x: 0.5, y: 1 } }\r\n        ]\r\n    }\r\n];\r\nlet connectors = [\r\n    { id: 'connector1', sourceID: 'node1', targetID: 'node2' },\r\n    { id: 'connector2', sourceID: 'node2', targetID: 'node3' },\r\n    { id: 'connector3', sourceID: 'node3', targetID: 'node4' },\r\n    { id: 'connector4', sourceID: 'node4', targetID: 'node5' },\r\n    {\r\n        id: 'connector5', sourceID: 'node5', targetID: 'node6',\r\n        annotations: [{ content: 'No', style: { fill: 'white' } }]\r\n    },\r\n    {\r\n        id: 'connector6', sourceID: 'node5', targetID: 'node7', type: 'Orthogonal',\r\n        segments: [{ type: 'Orthogonal', length: 150, direction: 'Left' }],\r\n        annotations: [{ content: 'Yes', style: { fill: 'white' } }]\r\n    },\r\n    {\r\n        id: 'connector7', sourceID: 'node7', targetID: 'node3', sourcePortID: 'portcoding',\r\n        targetPortID: 'codingPort', type: 'Orthogonal',\r\n        segments: [{ type: 'Orthogonal', length: 10, direction: 'left' }],\r\n        annotations: [{ content: 'No', style: { fill: 'white' } }]\r\n    },\r\n    {\r\n        id: 'connector8', sourceID: 'node7', targetID: 'node2', sourcePortID: 'porterror',\r\n        targetPortID: 'designPort', type: 'Orthogonal',\r\n        annotations: [{ content: 'Yes', style: { fill: 'white' } }]\r\n    }\r\n];\r\nlet diagramInstance;\r\nlet clearHistory;\r\nlet startActionInstance;\r\nlet endGroupAction;\r\nlet redoListInstance;\r\nlet undoListInstance;\r\nlet undoInstance;\r\nlet redoInstance;\r\nexport class HistoryManager extends SampleBase {\r\n    rendereComplete() {\r\n        diagramInstance.fitToPage({ mode: 'Width' });\r\n        document.getElementById(\"undo\").onclick = (args) => {\r\n            diagramInstance.undo();\r\n        };\r\n        document.getElementById(\"redo\").onclick = (args) => {\r\n            diagramInstance.redo();\r\n        };\r\n        document.getElementById(\"StackLimit\").onclick = (args) => {\r\n            diagramInstance.setStackLimit(args.value);\r\n        };\r\n        document.getElementById(\"startGroupAction\").onclick = (args) => {\r\n            startAction();\r\n        };\r\n        document.getElementById(\"clearHistory\").onclick = (args) => {\r\n            diagramInstance.clearHistory();\r\n            getValue();\r\n        };\r\n    }\r\n    render() {\r\n        return (<div className=\"control-pane1\">\r\n        <div className=\"col-lg-8 control-section\">\r\n          <div id=\"historyControlSection\" className=\"content-wrapper\" style={{ width: \"100%\" }}>\r\n            <style>{SAMPLE_CSS}</style>\r\n            <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"500px\"} height={\"580px\"} snapSettings={{ constraints: SnapConstraints.None }} nodes={nodes} connectors={connectors} getConnectorDefaults={getConnectorDefaults} historyChange={(arg) => {\r\n            getValue();\r\n        }} getNodeDefaults={(obj) => {\r\n            obj.annotations[0].style.color = '#717171';\r\n            return obj;\r\n        }}>\r\n              <Inject services={[UndoRedo]}/>\r\n            </DiagramComponent>\r\n          </div>\r\n        </div>\r\n        <div id=\"historyPropertySection\" className=\"col-lg-4 property-section\" style={{ paddingRight: \"0px\" }}>\r\n          <div className=\"property-panel-header\">\r\n            History manager settings\r\n    </div>\r\n          <div className=\"row property-panel-content\" id=\"appearance\">\r\n            <div className=\"row property-panel-content\">\r\n              <div className=\"row\">\r\n                <div className=\"listbox\" style={{ height: \"100%\", border: \"1px solid #e0e0e0\" }}>\r\n                  <div className=\"heading\" style={{ height: \"40px\" }}>\r\n                    <span>\r\n                      Undo Stack\r\n                        </span>\r\n                    <div style={{ float: \"right\", marginTop: \"-5px\" }}>\r\n                      <ButtonComponent id=\"undo\" style={{ width: \"100%\" }} disabled={true} ref={undoList => (undoInstance = undoList)}>\r\n                        Undo\r\n                     </ButtonComponent>\r\n                    </div>\r\n                  </div>\r\n                  <div id='undoList'></div>\r\n                  <ListViewComponent id='undoList' height={'180px'} ref={undoList => (undoListInstance = undoList)}>\r\n                  </ListViewComponent>\r\n                </div>\r\n              </div>\r\n              <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n                <div className=\"listbox\" style={{ height: \"100%\", border: \"1px solid #e0e0e0\" }}>\r\n                  <div className=\"heading\" style={{ height: \"40px\" }}>\r\n                    <span>\r\n                      Redo Stack\r\n                        </span>\r\n                    <div style={{ float: \"right\", marginTop: \"-5px\" }}>\r\n                      <ButtonComponent id=\"redo\" style={{ width: \"100%\" }} disabled={true} ref={redoList => (redoInstance = redoList)}>\r\n                        Redo\r\n                            </ButtonComponent>\r\n                    </div>\r\n                  </div>\r\n                  <ListViewComponent id='redoList' height={'180px'} ref={redoList => (redoListInstance = redoList)}>\r\n                  </ListViewComponent>\r\n                </div>\r\n              </div>\r\n              <div className=\"row\" style={{ paddingTop: \"10px\" }}>\r\n                <div style={{ display: \"table\", height: \"35px\", paddingLeft: \"0px\" }} className=\"col-xs-6\">\r\n                  <div style={{ display: \"table-cell\", verticalAlign: \"middle\" }}>Stack Limit</div>\r\n                </div>\r\n                <div className=\"col-xs-6\" style={{ paddingLeft: \"0px\", paddingRight: \"0px\" }}>\r\n                  <NumericTextBoxComponent id=\"StackLimit\" value={0} min={0} max={50} width='100%' format='##.##' step={1}></NumericTextBoxComponent>\r\n                </div>\r\n              </div>\r\n              <div className=\"row\" style={{ paddingTop: \"10px\" }}>\r\n                <div className=\"col-xs-6\" style={{ paddingLeft: \"0px\" }}>\r\n                  <ButtonComponent ref={startGroupAction => (startActionInstance = startGroupAction)} id=\"startGroupAction\" title='startGroupAction' style={{ width: \"100%\", overflow: \"hidden\", textOverflow: \"ellipsis\" }} isToggle={true}>\r\n                    Start Group Action\r\n                    </ButtonComponent></div>\r\n                <div className=\"col-xs-6\" title='clearHistory' style={{ paddingLeft: \"0px\", paddingReft: \"0px\" }}>\r\n                  <ButtonComponent id=\"clearHistory\" style={{ width: \"100%\" }}>\r\n                    Clear History\r\n                    </ButtonComponent>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </div>);\r\n    }\r\n}\r\nfunction getConnectorDefaults(connector) {\r\n    connector.type = 'Orthogonal';\r\n    connector.style.strokeColor = \"#717171\";\r\n    connector.sourceDecorator.style.strokeColor = \"#717171\";\r\n    connector.targetDecorator.style.strokeColor = \"#717171\";\r\n    connector.sourceDecorator.style.fill = \"#717171\";\r\n    connector.targetDecorator.style.fill = \"#717171\";\r\n    return connector;\r\n}\r\nfunction getValue() {\r\n    let undoStack = diagramInstance.historyManager.undoStack;\r\n    let redoStack = diagramInstance.historyManager.redoStack;\r\n    let undo = [];\r\n    for (let i = 0; i < undoStack.length; i++) {\r\n        undo.push({ 'text': undoStack[i].type, 'value': undoStack[i].type });\r\n    }\r\n    let redo = [];\r\n    for (let i = 0; i < redoStack.length; i++) {\r\n        redo.push({ 'text': redoStack[i].type, 'value': redoStack[i].type });\r\n    }\r\n    let itemsCount = diagramInstance.historyManager.stackLimit ? diagramInstance.historyManager.stackLimit : 0;\r\n    undoListInstance.dataSource = undo;\r\n    undoListInstance.fields = { text: 'text', value: 'text' };\r\n    undoListInstance.index = 0;\r\n    undoListInstance.dataBind();\r\n    undoInstance.disabled = undo.length ? false : true;\r\n    redoInstance.disabled = redo.length ? false : true;\r\n    redoListInstance.dataSource = redo;\r\n    redoListInstance.fields = { text: 'text', value: 'text' };\r\n    redoListInstance.index = 0;\r\n    redoListInstance.dataBind();\r\n}\r\nfunction startAction() {\r\n    if (startActionInstance.element.classList.contains('e-active')) {\r\n        startActionInstance.content = 'End Group Action';\r\n        diagramInstance.startGroupAction();\r\n    }\r\n    else {\r\n        diagramInstance.endGroupAction();\r\n        startActionInstance.content = 'Start Group Action';\r\n    }\r\n}\r\n;\r\n\nrender(<HistoryManager />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}