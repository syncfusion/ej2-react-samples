{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { DiagramComponent } from '@syncfusion/ej2-react-diagrams';\r\nimport { SampleBase } from './sample-base';\r\nlet nodes = [\r\n    {\r\n        id: 'Patient',\r\n        shape: {\r\n            type: 'UmlClassifier',\r\n            classShape: {\r\n                name: 'Patient',\r\n                attributes: [\r\n                    createProperty('accepted', 'Date'),\r\n                    createProperty('sickness', 'History'),\r\n                    createProperty('prescription', 'String[*]'),\r\n                    createProperty('allergies', 'String[*]')\r\n                ],\r\n                methods: [createMethods('getHistory', 'History')]\r\n            },\r\n            classifier: 'Class'\r\n        },\r\n        offsetX: 200,\r\n        offsetY: 250\r\n    },\r\n    {\r\n        id: 'Doctor',\r\n        shape: {\r\n            type: 'UmlClassifier',\r\n            classShape: {\r\n                name: 'Doctor',\r\n                attributes: [\r\n                    createProperty('specialist', 'String[*]'),\r\n                    createProperty('locations', 'String[*]')\r\n                ]\r\n            },\r\n            classifier: 'Class'\r\n        },\r\n        offsetX: 240,\r\n        offsetY: 545\r\n    },\r\n    {\r\n        id: 'Person',\r\n        shape: {\r\n            type: 'UmlClassifier',\r\n            classShape: {\r\n                name: 'Person',\r\n                attributes: [\r\n                    createProperty('name', 'Name'),\r\n                    createProperty('title', 'String[*]'),\r\n                    createProperty('gender', 'Gender')\r\n                ]\r\n            },\r\n            classifier: 'Class'\r\n        },\r\n        offsetX: 405,\r\n        offsetY: 105\r\n    },\r\n    {\r\n        id: 'Hospital',\r\n        shape: {\r\n            type: 'UmlClassifier',\r\n            classShape: {\r\n                name: 'Hospital',\r\n                attributes: [\r\n                    createProperty('name', 'Name'),\r\n                    createProperty('address', 'Address'),\r\n                    createProperty('phone', 'Phone')\r\n                ],\r\n                methods: [createMethods('getDepartment', 'String')]\r\n            },\r\n            classifier: 'Class'\r\n        },\r\n        offsetX: 638,\r\n        offsetY: 100\r\n    },\r\n    {\r\n        id: 'Department',\r\n        shape: {\r\n            type: 'UmlClassifier',\r\n            classShape: {\r\n                name: 'Department',\r\n                methods: [createMethods('getStaffCount', 'Int')]\r\n            },\r\n            classifier: 'Class'\r\n        },\r\n        offsetX: 638,\r\n        offsetY: 280\r\n    },\r\n    {\r\n        id: 'Staff',\r\n        shape: {\r\n            type: 'UmlClassifier',\r\n            classShape: {\r\n                name: 'Staff',\r\n                attributes: [\r\n                    createProperty('joined', 'Date'),\r\n                    createProperty('education', 'string[*]'),\r\n                    createProperty('certification', 'string[*]'),\r\n                    createProperty('languages', 'string[*]')\r\n                ],\r\n                methods: [\r\n                    createMethods('isDoctor', 'bool'),\r\n                    createMethods('getHistory', 'bool')\r\n                ]\r\n            },\r\n            classifier: 'Class'\r\n        },\r\n        offsetX: 635,\r\n        offsetY: 455\r\n    },\r\n    createNode('OperationStaff', 410, 455, 'OperationStaff'),\r\n    createNode('Nurse', 410, 545, 'Nurse'),\r\n    createNode('Surgeon', 240, 665, 'Surgeon'),\r\n    createNode('AdministrativeStaff', 632, 605, 'AdministrativeStaff'),\r\n    createNode('FrontDeskStaff', 630, 695, 'FrontDeskStaff'),\r\n    createNode('TechnicalStaff', 928, 445, 'TechnicalStaff'),\r\n    createNode('Technician', 815, 535, 'Technician'),\r\n    createNode('Technologist', 1015, 535, 'Technologist'),\r\n    createNode('SurgicalTechnologist', 1015, 630, 'SurgicalTechnologist')\r\n];\r\nlet connectors = [\r\n    createConnector('connect1', 'Patient', 'Person'),\r\n    createConnector('connect2', 'Person', 'Hospital'),\r\n    createConnector('connect3', 'Department', 'Hospital'),\r\n    createConnector('connect4', 'OperationStaff', 'Patient'),\r\n    createConnector('connect5', 'Doctor', 'OperationStaff'),\r\n    createConnector('connect6', 'Nurse', 'OperationStaff'),\r\n    createConnector('connect7', 'Surgeon', 'Doctor'),\r\n    createConnector('connect8', 'FrontDeskStaff', 'AdministrativeStaff'),\r\n    createConnector('connect9', 'Technician', 'TechnicalStaff'),\r\n    createConnector('connect10', 'Technologist', 'TechnicalStaff'),\r\n    createConnector('connect11', 'SurgicalTechnologist', 'Technologist'),\r\n    createConnector('connect12', 'Staff', 'Department'),\r\n    createConnector('connect13', 'Staff', 'Person'),\r\n    createConnector('connect14', 'OperationStaff', 'Staff'),\r\n    createConnector('connect15', 'AdministrativeStaff', 'Staff'),\r\n    createConnector('connect16', 'TechnicalStaff', 'Staff')\r\n];\r\nexport class UMLClassDiagram extends SampleBase {\r\n    render() {\r\n        return (<div className=\"control-section\">\r\n                <DiagramComponent id=\"diagram\" width={\"100%\"} height={\"800px\"} nodes={nodes} connectors={connectors} \r\n        //Sets the default values of a node\r\n        getNodeDefaults={(obj) => {\r\n            obj.style = { fill: '#26A0DA', strokeColor: 'white' };\r\n            return obj;\r\n        }} \r\n        //Sets the default values of a connector\r\n        getConnectorDefaults={(connector) => {\r\n            return connector;\r\n        }} \r\n        //set an label style for nodes\r\n        setNodeTemplate={(node) => {\r\n            if (node.annotations && node.annotations.length > 0) {\r\n                for (let i = 0; i < node.annotations.length; i++) {\r\n                    let annotation = node.annotations[i];\r\n                    if (annotation && annotation.style) {\r\n                        annotation.style.color = 'white';\r\n                    }\r\n                }\r\n            }\r\n        }}/>\r\n            </div>);\r\n    }\r\n}\r\n//Create a connector.\r\nfunction createConnector(id, sourceID, targetID) {\r\n    let connector = {};\r\n    connector.id = id;\r\n    connector.sourceID = sourceID;\r\n    connector.targetID = targetID;\r\n    return connector;\r\n}\r\n//Create class Diagram shapes.\r\nfunction createNode(id, offsetX, offsetY, className) {\r\n    let node = {};\r\n    node.id = id;\r\n    node.offsetX = offsetX;\r\n    node.offsetY = offsetY;\r\n    node.shape = {\r\n        type: 'UmlClassifier',\r\n        classShape: {\r\n            name: className\r\n        },\r\n        classifier: 'Class'\r\n    };\r\n    return node;\r\n}\r\n//create class Property\r\nfunction createProperty(name, type) {\r\n    return { name: name, type: type };\r\n}\r\n//create class Methods\r\nfunction createMethods(name, type) {\r\n    return { name: name, type: type };\r\n}\r\n\nrender(<UMLClassDiagram />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}