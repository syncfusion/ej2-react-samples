{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from \"react\";\r\nimport { DiagramComponent, SnapConstraints, DiagramTools, UndoRedo, Snapping, PortConstraints, PortVisibility, Inject } from \"@syncfusion/ej2-react-diagrams\";\r\nimport { SampleBase } from './sample-base';\r\nimport { CheckBoxComponent } from \"@syncfusion/ej2-react-buttons\";\r\nlet shape = [\r\n    { shapeName: \"BasicShape\", shapeId: \"Basic\" },\r\n    { shapeName: \"FlowShape\", shapeId: \"Flow\" },\r\n    { shapeName: \"Connector\", shapeId: \"Segment\" },\r\n    { shapeName: \"Path\", shapeId: \"Path\" },\r\n    { shapeName: \"Image\", shapeId: \"Image\" },\r\n    { shapeName: \"SVG\", shapeId: \"SVG\" },\r\n    { shapeName: \"Text\", shapeId: \"Text\" }\r\n];\r\nlet basic = [\r\n    \"Rectangle\",\r\n    \"Ellipse\",\r\n    \"Hexagon\",\r\n    \"Parallelogram\",\r\n    \"Triangle\",\r\n    \"Plus\",\r\n    \"Star\",\r\n    \"Pentagon\",\r\n    \"Heptagon\",\r\n    \"Octagon\",\r\n    \"Trapezoid\",\r\n    \"Decagon\",\r\n    \"RightTriangle\",\r\n    \"Cylinder\",\r\n    \"Diamond\"\r\n];\r\nlet flow = [\r\n    \"Process\",\r\n    \"Decision\",\r\n    \"Document\",\r\n    \"PreDefinedProcess\",\r\n    \"Terminator\",\r\n    \"PaperTap\",\r\n    \"DirectData\",\r\n    \"SequentialData\"\r\n];\r\nlet connector = [\"Straight\", \"Orthogonal\"];\r\nlet node;\r\nlet diagramInstance;\r\nlet interval;\r\ninterval = [\r\n    1,\r\n    9,\r\n    0.25,\r\n    9.75,\r\n    0.25,\r\n    9.75,\r\n    0.25,\r\n    9.75,\r\n    0.25,\r\n    9.75,\r\n    0.25,\r\n    9.75,\r\n    0.25,\r\n    9.75,\r\n    0.25,\r\n    9.75,\r\n    0.25,\r\n    9.75,\r\n    0.25,\r\n    9.75\r\n];\r\nlet gridlines = {\r\n    lineColor: \"#e0e0e0\",\r\n    lineIntervals: interval\r\n};\r\nlet snapSettings = {\r\n    snapObjectDistance: 5,\r\n    constraints: SnapConstraints.SnapToObject |\r\n        SnapConstraints.SnapToLines |\r\n        SnapConstraints.ShowLines,\r\n    horizontalGridlines: gridlines,\r\n    verticalGridlines: gridlines\r\n};\r\nconst SAMPLE_CSS = `.image-pattern-style {\r\n        background-color: white;\r\n        background-size: contain;\r\n        background-repeat: no-repeat;\r\n        height: 45px;\r\n        width: calc((100% - 12px) / 3);\r\n        cursor: pointer;\r\n        border: 1px solid #D5D5D5;\r\n        background-position: center;\r\n        float: left;\r\n    }\r\n\r\n    .image-pattern-style:hover {\r\n        border-color: gray;\r\n        border-width: 2px;\r\n    }\r\n\r\n    .row {\r\n        margin-left: 0px;\r\n        margin-right: 0px;\r\n    }\r\n\r\n    .row-header {\r\n        font-size: 12px;\r\n        font-weight: 500;\r\n    }\r\n\r\n    .e-checkbox-wrapper .e-label {\r\n        font-size: 12px;\r\n    }\r\n\r\n    .property-panel-header {\r\n        padding-top: 15px;\r\n        padding-bottom: 5px\r\n    }\r\n\r\n    .e-selected-style {\r\n        border-color: #006CE6;\r\n        border-width: 2px;\r\n    }\r\n\r\n    .control-section {\r\n        padding-top: 0px;\r\n        padding-bottom: 0px;\r\n        padding-right: 0px;\r\n    }\r\n\r\n    .container-fluid {\r\n        padding-left: 0px;\r\n    }\r\n\r\n    .diagram-control-pane .col-xs-6 {\r\n        padding-left: 0px;\r\n        padding-right: 0px;\r\n    }`;\r\nexport class DrawingTools extends SampleBase {\r\n    rendereComplete() {\r\n        SetShape(\"Rectangle\");\r\n        diagramInstance.tool = DiagramTools.ContinuousDraw;\r\n        diagramInstance.dataBind();\r\n        //Click Event used to decide the drawing object.\r\n        document.getElementById(\"appearance\").onclick = (args) => {\r\n            let target = args.target;\r\n            let selectedElement = document.getElementsByClassName(\"e-selected-style\");\r\n            if (target.className === \"image-pattern-style e-selected-style\") {\r\n                switch (target.id) {\r\n                    case \"shape1\":\r\n                        SetShape(\"Rectangle\");\r\n                        break;\r\n                    case \"shape2\":\r\n                        SetShape(\"Ellipse\");\r\n                        break;\r\n                    case \"shape3\":\r\n                        SetShape(\"Hexagon\");\r\n                        break;\r\n                    case \"shape4\":\r\n                        SetShape(\"Pentagon\");\r\n                        break;\r\n                    case \"shape5\":\r\n                        SetShape(\"Polygon\");\r\n                        break;\r\n                    case \"straight\":\r\n                        setdrawobject(null, { type: \"Straight\" });\r\n                        break;\r\n                    case \"ortho\":\r\n                        setdrawobject(null, { type: \"Orthogonal\" });\r\n                        break;\r\n                    case \"cubic\":\r\n                        setdrawobject(null, { type: \"Bezier\" });\r\n                        break;\r\n                    case \"path\":\r\n                        getPathShape();\r\n                        target.classList.add(\"e-selected-style\");\r\n                        break;\r\n                    case \"image\":\r\n                        getImageNode();\r\n                        break;\r\n                    case \"svg\":\r\n                        getSVGNode();\r\n                        break;\r\n                    case \"text\":\r\n                        getTextNode();\r\n                        break;\r\n                    default:\r\n                        if (selectedElement.length &&\r\n                            target.id !== \"\" &&\r\n                            target.id !== \"checked\") {\r\n                            selectedElement[0].classList.remove(\"e-selected-style\");\r\n                        }\r\n                }\r\n            }\r\n        };\r\n    }\r\n    render() {\r\n        return (<div className=\"control-pane diagram-control-pane\">\r\n        <style>{SAMPLE_CSS}</style>\r\n        <div className=\"col-lg-8 control-section\">\r\n          <div className=\"content-wrapper\" style={{ width: \"100%\" }}>\r\n            <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={\"540px\"} snapSettings={snapSettings} rulerSettings={{ showRulers: true }} \r\n        //Sets the default values of a node\r\n        getNodeDefaults={(node) => {\r\n            let obj = node;\r\n            let basicShape = node.shape;\r\n            if (basicShape.shape === \"Rectangle\" ||\r\n                basicShape.shape === \"Ellipse\") {\r\n                obj.ports = getPorts(node);\r\n            }\r\n            else if (basicShape.shape === \"Hexagon\") {\r\n                obj.ports = getHexagonPorts(node);\r\n            }\r\n            else if (basicShape.shape === \"Pentagon\") {\r\n                obj.ports = getPentagonPorts(node);\r\n            }\r\n            else if (basicShape.type === \"Path\") {\r\n                obj.ports = getPathPorts(node);\r\n            }\r\n        }}/>\r\n            <Inject services={[UndoRedo, Snapping]}/>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"col-lg-4  property-section\">\r\n          <div className=\"property-panel-header\">Properties</div>\r\n          <div className=\"row property-panel-content\" id=\"appearance\">\r\n            <div className=\"row row-header\" style={{ paddingTop: \"10px\" }}>\r\n              Shapes\r\n            </div>\r\n            <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n              <div title=\"Retangle\" className=\"image-pattern-style e-selected-style\" id=\"shape1\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/drawingTool/basicshape/DrawingTool_1.png')\",\r\n            marginRight: \"3px\"\r\n        }}/>\r\n              <div title=\"Ellipse\" className=\"image-pattern-style\" id=\"shape2\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/drawingTool/basicshape/DrawingTool_2.png')\",\r\n            margin: \"0px 3px\"\r\n        }}/>\r\n              <div title=\"Hexagon\" className=\"image-pattern-style\" id=\"shape3\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/drawingTool/basicshape/DrawingTool_3.png')\"\r\n        }}/>\r\n            </div>\r\n            <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n              <div title=\"Pentagon\" className=\"image-pattern-style\" id=\"shape4\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/drawingTool/basicshape/DrawingTool_4.png')\",\r\n            marginRight: \"3px\"\r\n        }}/>\r\n              <div title=\"Polygon\" className=\"image-pattern-style\" id=\"shape5\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/drawingTool/basicshape/DrawingTool_5.png')\",\r\n            margin: \"0px 3px\"\r\n        }}/>\r\n              <div title=\"Path\" className=\"image-pattern-style\" id=\"path\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/drawingTool/DrawingTool_6.png')\"\r\n        }}/>\r\n            </div>\r\n            <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n              <div title=\"Image\" className=\"image-pattern-style\" id=\"image\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/drawingTool/DrawingTool_7.png')\",\r\n            marginRight: \"3px\"\r\n        }}/>\r\n              <div title=\"SVG\" className=\"image-pattern-style\" id=\"svg\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/drawingTool/DrawingTool_8.png')\",\r\n            marginRight: \"3px\"\r\n        }}/>\r\n              <div title=\"Text\" className=\"image-pattern-style\" id=\"text\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/drawingTool/DrawingTool_9.png')\",\r\n            marginRight: \"3px\"\r\n        }}/>\r\n            </div>\r\n            <div className=\"row row-header\" style={{ paddingTop: \"10px\" }}>\r\n              Connector\r\n            </div>\r\n            <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n              <div className=\"image-pattern-style\" id=\"straight\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/drawingTool/connector/Connectors_1.png')\",\r\n            marginRight: \"3px\"\r\n        }}/>\r\n              <div className=\"image-pattern-style\" id=\"ortho\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/drawingTool/connector/Connectors_2.png')\",\r\n            margin: \"0px 3px\"\r\n        }}/>\r\n              <div className=\"image-pattern-style\" id=\"cubic\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/drawingTool/connector/Connectors_3.png')\"\r\n        }}/>\r\n            </div>\r\n            <div className=\"row property-panel-content\" style={{ paddingTop: \"10px\" }}>\r\n              <CheckBoxComponent id=\"checked\" label=\"Continuous Draw\" checked={true} change={onChange}/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </div>);\r\n    }\r\n}\r\nfunction onChange(args) {\r\n    diagramInstance.tool = args.checked\r\n        ? DiagramTools.ContinuousDraw\r\n        : DiagramTools.DrawOnce;\r\n}\r\n//Enable drawing object.\r\nfunction setdrawobject(node, connector) {\r\n    let continuousDraw = document.getElementById(\"checked\");\r\n    if (!continuousDraw.checked) {\r\n        diagramInstance.tool = DiagramTools.DrawOnce;\r\n    }\r\n    if (connector == null) {\r\n        diagramInstance.drawingObject = node;\r\n    }\r\n    else {\r\n        diagramInstance.drawingObject = connector;\r\n    }\r\n    diagramInstance.dataBind();\r\n}\r\n//Enable drawing Tool.\r\nfunction enableTool() {\r\n    let continuousDraw = document.getElementById(\"checked\");\r\n    if (!continuousDraw.checked) {\r\n        diagramInstance.tool = DiagramTools.DrawOnce;\r\n    }\r\n    diagramInstance.dataBind();\r\n}\r\n//Set the Shape of the drawing Object.\r\nfunction SetShape(obj) {\r\n    let drawingshape;\r\n    drawingshape = { type: \"Basic\", shape: obj };\r\n    node = {\r\n        shape: drawingshape\r\n    };\r\n    diagramInstance.drawingObject = node;\r\n    enableTool();\r\n}\r\n//Set TextNode Shape.\r\nfunction getTextNode() {\r\n    let drawingshape;\r\n    drawingshape = { type: \"Text\" };\r\n    node = {\r\n        shape: drawingshape\r\n    };\r\n    setdrawobject(node, null);\r\n}\r\n//Set SVG Node\r\nfunction getSVGNode() {\r\n    // tslint:disable-next-line:max-line-length\r\n    let drawingshape;\r\n    drawingshape = {\r\n        type: \"Native\",\r\n        content: getPath()\r\n    };\r\n    node = {\r\n        shape: drawingshape\r\n    };\r\n    setdrawobject(node, null);\r\n}\r\nfunction getPath() {\r\n    let str = '<svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"350.000000pt\" ' +\r\n        'height=\"229.000000pt\" viewBox=\"0 0 350.000000 229.000000\" ' +\r\n        'preserveAspectRatio=\"xMidYMid meet\"> <metadata>' +\r\n        \" Created by potrace 1.11, written by Peter Selinger 2001-2013\" +\r\n        ' </metadata> <g transform=\"translate(0.000000,229.000000) scale(0.100000,-0.100000)\"' +\r\n        ' fill=\"#de6ca9\" stroke=\"none\"><path d=\"M0 1145 l0 -1145 1750 0 1750 0 0 1145 0 1145' +\r\n        \" -1750 0 -1750 0 0 -1145z m1434 186 c19 -8 26 -18 26 -37 0 -24 -3 -26\" +\r\n        \" -27 -19 -16 3 -58 9 -94 12 -63 5 -67 4 -88 -23 -23 -29 -21 -60 6 -81 8\" +\r\n        \" -6 47 -19 86 -29 55 -13 80 -25 106 -51 31 -31 33 -37 29 -88 -8 -94 -69\" +\r\n        \" -133 -193 -122 -90 7 -115 20 -115 58 0 26 3 30 18 24 91 -38 168 -41 204\" +\r\n        \" -8 23 21 23 75 1 96 -10 8 -49 23 -88 33 -88 22 -135 63 -135 118 0 92 67 140\" +\r\n        \" 181 131 31 -2 68 -9 83 -14z m854 -6 c38 -15 42 -21 42 -51 l0 -33 -47 25\" +\r\n        \" c-41 22 -58 25 -115 22 -58 -3 -72 -8 -97 -32 -79 -75 -59 -259 32 -297 35\" +\r\n        \" -15 106 -18 150 -6 26 7 27 10 27 67 l0 60 -50 0 c-47 0 -50 2 -50 25 0 25\" +\r\n        \" 1 25 80 25 l81 0 -3 -97 -3 -98 -40 -20 c-22 -10 -65 -21 -95 -23 -153 -11\" +\r\n        \" -242 74 -243 230 0 145 93 235 233 224 30 -2 74 -12 98 -21z m-638 -169 l67\" +\r\n        \" -178 40 103 c22 57 53 139 69 182 28 75 29 77 62 77 19 0 32 -4 30 -9 -1 -5\" +\r\n        \" -39 -104 -83 -220 l-80 -211 -37 0 c-35 0 -37 2 -56 53 -11 28 -48 124 -81 \" +\r\n        '211 -34 87 -61 163 -61 168 0 5 14 8 32 6 31 -3 32 -5 98 -182z\" />' +\r\n        \"</g> </svg>\";\r\n    return str;\r\n}\r\nfunction getImageNode() {\r\n    let drawingshape;\r\n    drawingshape = { type: \"Image\", source: \"////npmci.syncfusion.com/development/react/demos/src/diagram/employee.png\" };\r\n    node = {\r\n        shape: drawingshape\r\n    };\r\n    setdrawobject(node, null);\r\n}\r\nfunction getPathShape() {\r\n    // tslint:disable-next-line:max-line-length\r\n    let drawingshape;\r\n    drawingshape = {\r\n        type: \"Path\",\r\n        data: \"M540.3643,137.9336L546.7973,159.7016L570.3633,159.7296L550.7723,171.9366L558.9053,194.9966L540.3643,179.4996L521.8223,194.9966L529.9553,171.9366L510.3633,159.7296L533.9313,159.7016L540.3643,137.9336z\"\r\n    };\r\n    node = {\r\n        shape: drawingshape\r\n    };\r\n    setdrawobject(node, null);\r\n}\r\nfunction getPorts(obj) {\r\n    let ports = [\r\n        createPort(\"port1\", { x: 0, y: 0.5 }),\r\n        createPort(\"port2\", { x: 0.5, y: 1 }),\r\n        createPort(\"port3\", { x: 1, y: 0.5 }),\r\n        createPort(\"port4\", { x: 0.5, y: 0 })\r\n    ];\r\n    return ports;\r\n}\r\nfunction getPathPorts(obj) {\r\n    let ports = [\r\n        createPort(\"port1\", { x: 0.5, y: 0 }),\r\n        createPort(\"port2\", { x: 0, y: 0.39 }),\r\n        createPort(\"port3\", { x: 1, y: 0.39 }),\r\n        createPort(\"port4\", { x: 0.2, y: 1 }),\r\n        createPort(\"port5\", { x: 0.8, y: 1 })\r\n    ];\r\n    return ports;\r\n}\r\nfunction getHexagonPorts(obj) {\r\n    let ports = [\r\n        createPort(\"port1\", { x: 0, y: 0.5 }),\r\n        createPort(\"port2\", { x: 0.5, y: 0 }),\r\n        createPort(\"port3\", { x: 0.3, y: 0 }),\r\n        createPort(\"port4\", { x: 0.7, y: 0 }),\r\n        createPort(\"port5\", { x: 1, y: 0.5 }),\r\n        createPort(\"port6\", { x: 0.5, y: 1 }),\r\n        createPort(\"port7\", { x: 0.3, y: 1 }),\r\n        createPort(\"port8\", { x: 0.7, y: 1 })\r\n    ];\r\n    return ports;\r\n}\r\nfunction getPentagonPorts(obj) {\r\n    let ports = [\r\n        createPort(\"port1\", { x: 0.5, y: 0 }),\r\n        createPort(\"port2\", { x: 0, y: 0.4 }),\r\n        createPort(\"port3\", { x: 1, y: 0.4 }),\r\n        createPort(\"port4\", { x: 0.2, y: 1 }),\r\n        createPort(\"port5\", { x: 0.85, y: 1 })\r\n    ];\r\n    return ports;\r\n}\r\nfunction createPort(id, offset) {\r\n    let port = {\r\n        id: id,\r\n        shape: \"Square\",\r\n        offset: offset,\r\n        constraints: PortConstraints.Draw,\r\n        visibility: PortVisibility.Hover\r\n    };\r\n    return port;\r\n}\r\n\nrender(<DrawingTools />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}