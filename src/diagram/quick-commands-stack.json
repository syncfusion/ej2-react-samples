{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from \"react\";\r\nimport { MoveTool, randomId, SelectorConstraints, cloneObject, DiagramComponent, SnapConstraints } from \"@syncfusion/ej2-react-diagrams\";\r\nimport { SampleBase } from './sample-base';\r\nconst SAMPLE_CSS = `.image-pattern-style {\r\n        background-color: white;\r\n        background-size: contain;\r\n        background-repeat: no-repeat;\r\n        height: 50px;\r\n        width: calc((100% - 18px) / 3);\r\n        cursor: pointer;\r\n        border: 1px solid #D5D5D5;\r\n        background-position: center;\r\n        float: left;\r\n    }\r\n\r\n    .image-pattern-style:hover {\r\n        border-color: gray;\r\n        border-width: 2px;\r\n    }\r\n\r\n    .row {\r\n        margin: 10px 0px 0px 0px;\r\n    }\r\n\r\n    .e-selected-style {\r\n        border-color: #006CE6;\r\n        border-width: 2px;\r\n    }\r\n\r\n    .row-header {\r\n        font-size: 15px;\r\n        font-weight: 500;\r\n        margin-top: 10px\r\n    }\r\n\r\n    .property-panel-header {\r\n        padding-top: 2px;\r\n        padding-bottom: 5px;\r\n    }\r\n\r\n    .e-checkbox-wrapper .e-label {\r\n        font-size: 12px;\r\n    }\r\n\r\n    .container-fluid {\r\n        padding-left: 0px;\r\n    }\r\n\r\n    .diagram-control-pane .col-xs-6 {\r\n        padding-left: 0px;\r\n        padding-right: 0px;\r\n        padding-top: 5px;\r\n    }`;\r\nlet diagramInstance;\r\n//Defines the nodes collection in diagram\r\nlet nodes = [\r\n    {\r\n        id: \"NewIdea\",\r\n        width: 150,\r\n        height: 60,\r\n        offsetX: 300,\r\n        offsetY: 60,\r\n        shape: { type: \"Flow\", shape: \"Terminator\" },\r\n        annotations: [{ content: \"New idea identified\" }]\r\n    },\r\n    {\r\n        id: \"Meeting\",\r\n        width: 150,\r\n        height: 60,\r\n        offsetX: 300,\r\n        offsetY: 155,\r\n        shape: { type: \"Flow\", shape: \"Process\" },\r\n        annotations: [{ content: \"Meeting with board\" }]\r\n    },\r\n    {\r\n        id: \"BoardDecision\",\r\n        width: 150,\r\n        height: 110,\r\n        offsetX: 300,\r\n        offsetY: 280,\r\n        shape: { type: \"Flow\", shape: \"Decision\" },\r\n        annotations: [{ content: \"Board decides \\n whether to proceed\" }]\r\n    },\r\n    {\r\n        id: \"Project\",\r\n        width: 150,\r\n        height: 100,\r\n        offsetX: 300,\r\n        offsetY: 430,\r\n        shape: { type: \"Flow\", shape: \"Decision\" },\r\n        annotations: [{ content: \"Find Project manager\" }]\r\n    },\r\n    {\r\n        id: \"End\",\r\n        width: 150,\r\n        height: 60,\r\n        offsetX: 300,\r\n        offsetY: 555,\r\n        shape: { type: \"Flow\", shape: \"Process\" },\r\n        annotations: [{ content: \"Implement and Deliver\" }]\r\n    },\r\n    {\r\n        id: \"Decision\",\r\n        width: 250,\r\n        height: 60,\r\n        offsetX: 550,\r\n        offsetY: 60,\r\n        shape: { type: \"Flow\", shape: \"Card\" },\r\n        annotations: [{ content: \"Decision process for new software ideas\" }]\r\n    },\r\n    {\r\n        id: \"Reject\",\r\n        width: 150,\r\n        height: 60,\r\n        offsetX: 550,\r\n        offsetY: 280,\r\n        shape: { type: \"Flow\", shape: \"Process\" },\r\n        annotations: [{ content: \"Reject\" }]\r\n    },\r\n    {\r\n        id: \"Resources\",\r\n        width: 150,\r\n        height: 60,\r\n        offsetX: 550,\r\n        offsetY: 430,\r\n        shape: { type: \"Flow\", shape: \"Process\" },\r\n        annotations: [{ content: \"Hire new resources\" }]\r\n    }\r\n];\r\n//Defines the connectors collection in diagram\r\nlet connectors = [\r\n    {\r\n        id: \"connector1\",\r\n        type: \"Straight\",\r\n        sourceID: \"NewIdea\",\r\n        targetID: \"Meeting\"\r\n    },\r\n    {\r\n        id: \"connector2\",\r\n        type: \"Straight\",\r\n        sourceID: \"Meeting\",\r\n        targetID: \"BoardDecision\"\r\n    },\r\n    {\r\n        id: \"connector3\",\r\n        type: \"Straight\",\r\n        sourceID: \"BoardDecision\",\r\n        targetID: \"Project\"\r\n    },\r\n    { id: \"connector4\", type: \"Straight\", sourceID: \"Project\", targetID: \"End\" },\r\n    {\r\n        id: \"connector5\",\r\n        type: \"Straight\",\r\n        sourceID: \"BoardDecision\",\r\n        targetID: \"Reject\"\r\n    },\r\n    {\r\n        id: \"connector6\",\r\n        type: \"Straight\",\r\n        sourceID: \"Project\",\r\n        targetID: \"Resources\"\r\n    }\r\n];\r\n//Defines the user handle collection for nodes in diagram\r\nlet handles = [\r\n    {\r\n        name: \"clone\",\r\n        pathData: \"M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,\" +\r\n            \"0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z \" +\r\n            \"M68.5,72.5h-30V34.4h30V72.5z\",\r\n        visible: true,\r\n        offset: 0,\r\n        side: \"Bottom\",\r\n        margin: { top: 0, bottom: 0, left: 0, right: 0 },\r\n        pathColor: \"white\"\r\n    }\r\n];\r\nexport class UserHandle extends SampleBase {\r\n    rendereComplete() {\r\n        diagramInstance.fitToPage();\r\n        diagramInstance.select([diagramInstance.nodes[0]]);\r\n        document.getElementById(\"appearance\").onclick = (args) => {\r\n            let target = args.target;\r\n            if (target.className === \"image-pattern-style\") {\r\n                switch (target.id) {\r\n                    case \"left\":\r\n                        setuserhandleposition(0, \"Bottom\", target);\r\n                        break;\r\n                    case \"right\":\r\n                        setuserhandleposition(1, \"Bottom\", target);\r\n                        break;\r\n                    case \"topr\":\r\n                        setuserhandleposition(0, \"Right\", target);\r\n                        break;\r\n                }\r\n            }\r\n            diagramInstance.dataBind();\r\n        };\r\n        document.getElementById(\"pattern\").onclick = (args) => {\r\n            let target = args.target;\r\n            if (target.className === \"image-pattern-style\") {\r\n                switch (target.id) {\r\n                    case \"pattern1\":\r\n                        applyuserhandlestyle(\"#1E90FF\", target);\r\n                        break;\r\n                    case \"pattern2\":\r\n                        applyuserhandlestyle(\"#3CB371\", target);\r\n                        break;\r\n                    case \"pattern3\":\r\n                        applyuserhandlestyle(\"#FF6347\", target);\r\n                        break;\r\n                }\r\n            }\r\n            diagramInstance.dataBind();\r\n        };\r\n    }\r\n    render() {\r\n        return (<div className=\"control-pane\">\r\n        <style>{SAMPLE_CSS}</style>\r\n        <div className=\"col-lg-8 control-section\">\r\n          <div className=\"content-wrapper\" style={{ width: \"100%\" }}>\r\n            <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={\"600px\"} nodes={nodes} connectors={connectors} selectedItems={{\r\n            constraints: SelectorConstraints.UserHandle,\r\n            userHandles: handles\r\n        }} snapSettings={{ constraints: SnapConstraints.None }} \r\n        //set Node default value\r\n        getNodeDefaults={(node) => {\r\n            return {\r\n                style: { fill: \"#578CA9\", strokeColor: \"none\" },\r\n                annotations: [{ style: { color: \"white\" } }]\r\n            };\r\n        }} \r\n        //set CustomTool\r\n        getCustomTool={getTool}>\r\n            </DiagramComponent>\r\n          </div>\r\n        </div>\r\n          <div className=\"col-lg-4 property-section\">\r\n            <div className=\"property-panel-header\">Properties</div>\r\n            <div className=\"row property-panel-content\" id=\"appearance\">\r\n              <div className=\"row row-header\">Alignment</div>\r\n              <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n                <div className=\"image-pattern-style e-selected-style\" id=\"left\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/user-handle/bottoml.png')\",\r\n            marginRight: \"4px\"\r\n        }}/>\r\n                <div className=\"image-pattern-style\" id=\"right\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/user-handle/bottomr.png')\",\r\n            margin: \"0px 4px\"\r\n        }}/>\r\n                <div className=\"image-pattern-style\" id=\"topr\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/user-handle/topr.png')\"\r\n        }}/>\r\n              </div>\r\n            </div>\r\n            <div className=\"row property-panel-content\" id=\"pattern\">\r\n              <div className=\"row row-header\">Appearance</div>\r\n              <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n                <div className=\"image-pattern-style\" id=\"pattern1\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/user-handle/pattern1.png')\",\r\n            marginRight: \"4px\"\r\n        }}/>\r\n                <div className=\"image-pattern-style\" id=\"pattern2\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/user-handle/pattern2.png')\",\r\n            margin: \"0px 4px\"\r\n        }}/>\r\n                <div className=\"image-pattern-style\" id=\"pattern3\" style={{\r\n            backgroundImage: \"url('////npmci.syncfusion.com/development/react/demos/src/diagram/Images/user-handle/pattern3.png')\"\r\n        }}/>\r\n              </div>\r\n          </div>\r\n        </div>\r\n      </div>);\r\n    }\r\n}\r\n//Defines the clone tool used to copy Node/Connector\r\nclass CloneTool extends MoveTool {\r\n    mouseDown(args) {\r\n        let newObject;\r\n        if (diagramInstance.selectedItems.nodes.length > 0) {\r\n            newObject = cloneObject(diagramInstance.selectedItems.nodes[0]);\r\n        }\r\n        else {\r\n            newObject = cloneObject(diagramInstance.selectedItems.connectors[0]);\r\n        }\r\n        newObject.id += randomId();\r\n        diagramInstance.paste([newObject]);\r\n        args.source = diagramInstance.nodes[diagramInstance.nodes.length - 1];\r\n        args.sourceWrapper = args.source.wrapper;\r\n        super.mouseDown(args);\r\n        this.inAction = true;\r\n    }\r\n}\r\n//Enable the clone Tool for UserHandle.\r\nfunction getTool(action) {\r\n    let tool;\r\n    if (action === \"clone\") {\r\n        tool = new CloneTool(diagramInstance.commandHandler);\r\n    }\r\n    return tool;\r\n}\r\n//set the position of the userhandle.\r\nfunction setuserhandleposition(offset, side, target) {\r\n    diagramInstance.selectedItems.userHandles[0].offset = offset;\r\n    diagramInstance.selectedItems.userHandles[0].side = side;\r\n}\r\n//set the style of the userhandle.\r\nfunction applyuserhandlestyle(bgcolor, target) {\r\n    diagramInstance.selectedItems.userHandles[0].backgroundColor = bgcolor;\r\n    diagramInstance.selectedItems.userHandles[0].pathColor = \"White\";\r\n}\r\n\nrender(<UserHandle />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}