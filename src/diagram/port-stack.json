{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from \"react\";\r\nimport { PortVisibility, DiagramComponent, Node } from \"@syncfusion/ej2-react-diagrams\";\r\nimport { SampleBase } from './sample-base';\r\nimport { DropDownListComponent } from \"@syncfusion/ej2-react-dropdowns\";\r\nimport { MultiSelectComponent } from \"@syncfusion/ej2-react-dropdowns\";\r\nimport { NumericTextBoxComponent, ColorPickerComponent } from \"@syncfusion/ej2-react-inputs\";\r\nlet diagramInstance;\r\nlet portDrop;\r\nlet portVisibilityDrop;\r\nlet portFillDrop;\r\nlet portBorderDrop;\r\nlet portShapeDrop;\r\nlet portSizeNum;\r\nlet portWidthNum;\r\n//Initializes the ports for the diagram\r\nlet node1Port = [\r\n    {\r\n        id: \"port1\",\r\n        shape: \"Circle\",\r\n        offset: { x: 0, y: 0.5 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"In - 1\"\r\n    },\r\n    {\r\n        id: \"port2\",\r\n        shape: \"Circle\",\r\n        offset: { x: 1, y: 0.5 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"OUT - 1\"\r\n    },\r\n    {\r\n        id: \"port3\",\r\n        shape: \"Circle\",\r\n        offset: { x: 0.25, y: 1 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"In - 2\"\r\n    },\r\n    {\r\n        id: \"port4\",\r\n        shape: \"Circle\",\r\n        offset: { x: 0.5, y: 1 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"OUT - 2\"\r\n    },\r\n    {\r\n        id: \"port5\",\r\n        shape: \"Circle\",\r\n        offset: { x: 0.75, y: 1 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"In - 3\"\r\n    }\r\n];\r\nlet node2Port = [\r\n    {\r\n        id: \"port6\",\r\n        shape: \"Circle\",\r\n        offset: { x: 0, y: 0.5 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"In - 1\"\r\n    },\r\n    {\r\n        id: \"port7\",\r\n        shape: \"Circle\",\r\n        offset: { x: 1, y: 0.35 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"OUT - 1\"\r\n    },\r\n    {\r\n        id: \"port8\",\r\n        shape: \"Circle\",\r\n        offset: { x: 1, y: 0.7 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"In - 2\"\r\n    },\r\n    {\r\n        id: \"port9\",\r\n        shape: \"Circle\",\r\n        offset: { x: 0.5, y: 1 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"OUT - 2\"\r\n    }\r\n];\r\nlet node3Port = [\r\n    {\r\n        id: \"port10\",\r\n        shape: \"Circle\",\r\n        offset: { x: 0, y: 0.5 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"Out - 1\"\r\n    },\r\n    {\r\n        id: \"port11\",\r\n        shape: \"Circle\",\r\n        offset: { x: 0.5, y: 0 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"In - 1\"\r\n    },\r\n    {\r\n        id: \"port12\",\r\n        shape: \"Circle\",\r\n        offset: { x: 0.5, y: 1 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"OUT - 2\"\r\n    }\r\n];\r\nlet node4Port = [\r\n    {\r\n        id: \"port13\",\r\n        shape: \"Circle\",\r\n        offset: { x: 0, y: 0.5 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"In - 1\"\r\n    },\r\n    {\r\n        id: \"port14\",\r\n        shape: \"Circle\",\r\n        offset: { x: 0.5, y: 0 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"In - 2\"\r\n    },\r\n    {\r\n        id: \"port15\",\r\n        shape: \"Circle\",\r\n        offset: { x: 0.5, y: 1 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"OUT - 1\"\r\n    }\r\n];\r\nlet node5Port = [\r\n    {\r\n        id: \"port16\",\r\n        shape: \"Circle\",\r\n        offset: { x: 0, y: 0.5 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"out - 1\"\r\n    },\r\n    {\r\n        id: \"port17\",\r\n        shape: \"Circle\",\r\n        offset: { x: 0.5, y: 0 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"In - 1\"\r\n    },\r\n    {\r\n        id: \"port18\",\r\n        shape: \"Circle\",\r\n        offset: { x: 1, y: 0.5 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"OUT - 2\"\r\n    }\r\n];\r\nlet node6Port = [\r\n    {\r\n        id: \"port19\",\r\n        shape: \"Circle\",\r\n        offset: { x: 0, y: 0.35 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"In - 1\"\r\n    },\r\n    {\r\n        id: \"port20\",\r\n        shape: \"Circle\",\r\n        offset: { x: 0.5, y: 1 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"Out - 1\"\r\n    }\r\n];\r\nlet node7Port = [\r\n    {\r\n        id: \"port21\",\r\n        shape: \"Circle\",\r\n        offset: { x: 0.5, y: 0 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"In - 1\"\r\n    },\r\n    {\r\n        id: \"port22\",\r\n        shape: \"Circle\",\r\n        offset: { x: 0.5, y: 1 },\r\n        height: 8,\r\n        width: 8,\r\n        visibility: PortVisibility.Visible,\r\n        text: \"Out - 1\"\r\n    }\r\n];\r\nlet shape1 = { type: \"Basic\", shape: \"Rectangle\" };\r\nlet shape2 = { type: \"Basic\", shape: \"Diamond\" };\r\nlet nodes = [\r\n    {\r\n        id: \"node1\",\r\n        offsetX: 100,\r\n        offsetY: 100,\r\n        annotations: [{ content: \"Publisher\" }],\r\n        ports: node1Port\r\n    },\r\n    {\r\n        id: \"node2\",\r\n        offsetX: 300,\r\n        offsetY: 100,\r\n        annotations: [{ content: \"Completed Book\", margin: { left: 5, right: 5 } }],\r\n        ports: node2Port\r\n    },\r\n    {\r\n        id: \"node3\",\r\n        offsetX: 300,\r\n        offsetY: 200,\r\n        annotations: [{ content: \"1st Review\" }],\r\n        ports: node3Port\r\n    },\r\n    {\r\n        id: \"node4\",\r\n        offsetX: 300,\r\n        offsetY: 300,\r\n        annotations: [{ content: \"Legal Terms\" }],\r\n        ports: node4Port\r\n    },\r\n    {\r\n        id: \"node5\",\r\n        offsetX: 300,\r\n        offsetY: 400,\r\n        annotations: [{ content: \"2nd Review\" }],\r\n        ports: node5Port\r\n    },\r\n    {\r\n        id: \"node6\",\r\n        offsetX: 500,\r\n        offsetY: 100,\r\n        annotations: [{ content: \"Board\" }],\r\n        ports: node6Port\r\n    },\r\n    {\r\n        id: \"node7\",\r\n        offsetX: 500,\r\n        offsetY: 200,\r\n        annotations: [{ content: \"Approval\" }],\r\n        ports: node7Port\r\n    }\r\n];\r\nlet connectors = [\r\n    {\r\n        id: \"connector1\",\r\n        sourceID: \"node1\",\r\n        sourcePortID: \"port2\",\r\n        targetID: \"node2\",\r\n        targetPortID: \"port6\"\r\n    },\r\n    {\r\n        id: \"connector2\",\r\n        sourceID: \"node1\",\r\n        sourcePortID: \"port4\",\r\n        targetID: \"node4\",\r\n        targetPortID: \"port13\"\r\n    },\r\n    {\r\n        id: \"connector3\",\r\n        sourceID: \"node2\",\r\n        sourcePortID: \"port9\",\r\n        targetID: \"node3\",\r\n        targetPortID: \"port11\"\r\n    },\r\n    {\r\n        id: \"connector4\",\r\n        sourceID: \"node2\",\r\n        sourcePortID: \"port7\",\r\n        targetID: \"node6\",\r\n        targetPortID: \"port19\"\r\n    },\r\n    {\r\n        id: \"connector5\",\r\n        sourceID: \"node3\",\r\n        sourcePortID: \"port10\",\r\n        targetID: \"node1\",\r\n        targetPortID: \"port5\"\r\n    },\r\n    {\r\n        id: \"connector6\",\r\n        sourceID: \"node3\",\r\n        sourcePortID: \"port12\",\r\n        targetID: \"node4\",\r\n        targetPortID: \"port14\"\r\n    },\r\n    {\r\n        id: \"connector7\",\r\n        sourceID: \"node4\",\r\n        sourcePortID: \"port15\",\r\n        targetID: \"node5\",\r\n        targetPortID: \"port17\"\r\n    },\r\n    {\r\n        id: \"connector8\",\r\n        sourceID: \"node5\",\r\n        sourcePortID: \"port18\",\r\n        targetID: \"node2\",\r\n        targetPortID: \"port8\"\r\n    },\r\n    {\r\n        id: \"connector9\",\r\n        sourceID: \"node5\",\r\n        sourcePortID: \"port16\",\r\n        targetID: \"node1\",\r\n        targetPortID: \"port3\"\r\n    },\r\n    {\r\n        id: \"connector10\",\r\n        sourceID: \"node6\",\r\n        sourcePortID: \"port20\",\r\n        targetID: \"node7\",\r\n        targetPortID: \"port21\"\r\n    },\r\n    {\r\n        id: \"connector11\",\r\n        sourceID: \"node7\",\r\n        sourcePortID: \"port22\",\r\n        targetID: \"node1\",\r\n        targetPortID: \"port1\"\r\n    }\r\n];\r\nlet fillColor;\r\nlet strokeColor;\r\n//Visibility collection of the Port.\r\nlet visibility = [\r\n    { PortVisibility: PortVisibility.Visible, text: \"Visible\" },\r\n    { PortVisibility: PortVisibility.Hidden, text: \"Hidden\" },\r\n    { PortVisibility: PortVisibility.Hover, text: \"Hover\" },\r\n    { PortVisibility: PortVisibility.Connect, text: \"Connect\" }\r\n];\r\n//Color collection of the Port.\r\nlet color = [\r\n    { text: \"White\", color: \"white\" },\r\n    { text: \"#008080\", color: \"#008080\" },\r\n    { text: \"#E4B123\", color: \"#E4B123\" },\r\n    { text: \"#F05023\", color: \"#F05023\" },\r\n    { text: \"#3CB549\", color: \"#3CB549\" },\r\n    { text: \"#D572AD\", color: \"#D572AD\" },\r\n    { text: \"Black\", color: \"black\" },\r\n    { text: \"Goldenrod\", color: \"goldenrod\" },\r\n    { text: \"Indigo\", color: \"indigo\" },\r\n    { text: \"Chocolate\", color: \"chocolate\" },\r\n    { text: \"DarkGoldenRod\", color: \"darkgoldenrod\" },\r\n    { text: \"FireBrick\", color: \"firebrick\" },\r\n    { text: \"DarkRed\", color: \"darkred\" }\r\n];\r\n//Shape collection of the Port.\r\nlet shape = [\r\n    { shape: \"X\", text: \"X\" },\r\n    { shape: \"Circle\", text: \"Circle\" },\r\n    { shape: \"Square\", text: \"Square\" },\r\n    { shape: \"Custom\", text: \"Custom\" }\r\n];\r\nconst sample_css = ` \r\n.sb-child-row {\r\n  margin-top: 8px;\r\n}\r\n\r\n.property-panel-header {\r\n  padding-top: 15px;\r\n  padding-bottom: 15px;\r\n}\r\n\r\n.property-section .e-remove-selection{\r\n  cursor: not-allowed;\r\n}\r\n\r\n.row-header {\r\n  font-size: 13px;\r\n  font-weight: 500;\r\n  padding-left: 10px\r\n}\r\n\r\n.e-remove-selection .property-section-content {\r\n  pointer-events: none;\r\n}`;\r\nexport class Port extends SampleBase {\r\n    rendereComplete() {\r\n        diagramInstance.select([diagramInstance.nodes[0]]);\r\n    }\r\n    render() {\r\n        return (<div className=\"control-pane\">\r\n        <style>{sample_css}</style>\r\n        <div className=\"col-lg-8 control-section\">\r\n          <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={580} nodes={nodes} connectors={connectors} selectionChange={selectChange} snapSettings={{ constraints: 0 }} getNodeDefaults={(obj) => {\r\n            //Sets the default values of nodes\r\n            //Initialize shape\r\n            if (obj.id === \"node1\" ||\r\n                obj.id === \"node2\" ||\r\n                obj.id === \"node4\" ||\r\n                obj.id === \"node6\") {\r\n                obj.shape = shape1;\r\n            }\r\n            else if (obj.id === \"node3\" ||\r\n                obj.id === \"node5\" ||\r\n                obj.id === \"node7\") {\r\n                obj.shape = shape2;\r\n            }\r\n            //sets height and width for nodes\r\n            obj.height = 65;\r\n            obj.width = 100;\r\n            obj.style = { fill: \"#ebf8fb\", strokeColor: \"#baeaf5\" };\r\n            for (let i = 0; i < obj.ports.length; i++) {\r\n                //sets styles for the ports\r\n                obj.ports[i].style = {\r\n                    fill: \"#366f8c\",\r\n                    strokeColor: \"#366f8c\"\r\n                };\r\n                obj.ports[i].width = 6;\r\n                obj.ports[i].height = 6;\r\n            }\r\n            obj.annotations[0].style = {\r\n                bold: true,\r\n                fontSize: 13,\r\n                color: \"black\"\r\n            };\r\n        }} getConnectorDefaults={(connector) => {\r\n            //Sets the default values of connector\r\n            //defines type of the connectors\r\n            connector.type = \"Orthogonal\";\r\n            connector.style = { strokeColor: \"#8cdcef\", strokeWidth: 1 };\r\n            connector.targetDecorator = {\r\n                width: 5,\r\n                height: 5,\r\n                style: { fill: \"#8cdcef\", strokeColor: \"#8cdcef\" }\r\n            };\r\n        }}/>\r\n        </div>\r\n\r\n        <div className=\"col-lg-4 property-section\">\r\n          <div className=\"property-panel-header\">Properties</div>\r\n          <div className=\"property-panel-content\">\r\n            <div id=\"propertypanel\" className=\"e-remove-selection\">\r\n              <div className=\"property-section-content\">\r\n                <div className=\"row row-header\" style={{ fontSize: \"13px\" }}>\r\n                  Port Customization\r\n              </div>\r\n                <div className=\"row sb-child-row\">\r\n                  <div className=\"col-lg-6\">\r\n                    <div style={{ paddingBottom: \"8px\" }}>Visibility</div>\r\n                    <div>\r\n                      \r\n                      <MultiSelectComponent id=\"portsVisiblity\" enabled={true} dataSource={visibility} fields={{ value: \"PortVisibility\", text: \"text\" }} mode=\"CheckBox\" showSelectAll={true} showDropDownIcon={true} popupHeight={\"280px\"} popupWidth={\"180px\"} change={portVisibilityDropOnChange} ref={portVisibilityref => (portVisibilityDrop = portVisibilityref)}/>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-lg-6\">\r\n                    <div style={{ paddingBottom: \"8px\" }}>Shape</div>\r\n                    <div>\r\n                      \r\n                      <DropDownListComponent id=\"shape\" enabled={true} placeholder=\"Select a Shape\" dataSource={shape} value=\"Circle\" fields={{ value: \"shape\", text: \"text\" }} change={portShapeDropOnChange} ref={portShapeDropref => (portShapeDrop = portShapeDropref)}/>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row sb-child-row\">\r\n                  <div className=\"col-lg-6\">\r\n                    <div style={{ paddingBottom: \"8px\" }}>Fill Color</div>\r\n                    <div style={{ paddingBottom: \"8px\" }}>\r\n                      \r\n                      <ColorPickerComponent id=\"fillcolor\" value=\"#000\" disabled={false} change={(arg) => {\r\n            let port = getPort();\r\n            for (let j = 0; j < port.length; j++) {\r\n                port[j].style.fill = arg.currentValue.rgba;\r\n            }\r\n        }} ref={fillcolor => (fillColor = fillcolor)}/>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-lg-6\">\r\n                    <div style={{ paddingBottom: \"8px\" }}>Stroke Color</div>\r\n                    <div style={{ paddingBottom: \"8px\" }}>\r\n                      \r\n                      <ColorPickerComponent id=\"strokecolor\" value=\"#000\" disabled={false} change={(arg) => {\r\n            let port = getPort();\r\n            for (let j = 0; j < port.length; j++) {\r\n                port[j].style.strokeColor = arg.currentValue.rgba;\r\n            }\r\n        }} ref={strokecolor => (strokeColor = strokecolor)}/>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row sb-child-row\">\r\n                  <div className=\"col-lg-6\">\r\n                    <div style={{ paddingBottom: \"8px\" }}>Stroke Width</div>\r\n                    <div style={{ paddingBottom: \"8px\" }}>\r\n                      \r\n                      <NumericTextBoxComponent ref={widthRef => (portWidthNum = widthRef)} id=\"width\" enabled={true} format={\"###.##\"} value={1} step={0.5} change={(args) => {\r\n            applyportstyle(\"strokewidth\");\r\n        }}/>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-lg-6\">\r\n                    <div style={{ paddingBottom: \"8px\" }}>Size</div>\r\n                    <div style={{ paddingBottom: \"8px\" }}>\r\n                      \r\n                      <NumericTextBoxComponent ref={sizeRef => (portSizeNum = sizeRef)} id=\"size\" enabled={true} format={\"###.##\"} value={6} step={1} change={(args) => {\r\n            applyportstyle(\"size\");\r\n        }}/>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>);\r\n    }\r\n}\r\nfunction selectChange(args) {\r\n    if (args.state === \"Changed\") {\r\n        let appearance = document.getElementById(\"propertypanel\");\r\n        let selectedElement = document.getElementsByClassName(\"e-remove-selection\");\r\n        if (args.newValue) {\r\n            if (!appearance.classList.contains(\"e-remove-selection\")) {\r\n                appearance.classList.add(\"e-remove-selection\");\r\n            }\r\n            if (args.newValue[0] instanceof Node && selectedElement.length) {\r\n                selectedElement[0].classList.remove(\"e-remove-selection\");\r\n                let port = getPort();\r\n                portVisibilityDrop.value = [];\r\n                if (PortVisibility.Visible & port[0].visibility) {\r\n                    portVisibilityDrop.value.push(PortVisibility.Visible);\r\n                }\r\n                if (PortVisibility.Hidden & port[0].visibility) {\r\n                    portVisibilityDrop.value.push(PortVisibility.Hidden);\r\n                }\r\n                if (PortVisibility.Hover & port[0].visibility) {\r\n                    portVisibilityDrop.value.push(PortVisibility.Hover);\r\n                }\r\n                if (PortVisibility.Connect & port[0].visibility) {\r\n                    portVisibilityDrop.value.push(PortVisibility.Connect);\r\n                }\r\n                if (portVisibilityDrop.value.length === 0) {\r\n                    portVisibilityDrop.placeholder = 'Select Visibility';\r\n                }\r\n                portVisibilityDrop.dataBind();\r\n                portFillDrop.value = port[0].style.fill;\r\n                portFillDrop.dataBind();\r\n                portBorderDrop.value = port[0].style.strokeColor;\r\n                portBorderDrop.dataBind();\r\n                portShapeDrop.value = port[0].shape;\r\n                portShapeDrop.dataBind();\r\n                portSizeNum.value = port[0].height;\r\n                portSizeNum.dataBind();\r\n                portWidthNum.value = port[0].style.strokeWidth;\r\n                portWidthNum.dataBind();\r\n            }\r\n        }\r\n    }\r\n}\r\n//get the port for the selected node.\r\nfunction getPort() {\r\n    let node = diagramInstance.selectedItems.nodes[0];\r\n    let port;\r\n    if (node) {\r\n        port = node.ports;\r\n    }\r\n    return port;\r\n}\r\n//change the Visibility of the Port.\r\nfunction portVisibilityDropOnChange(args) {\r\n    let port = getPort();\r\n    if (port) {\r\n        for (let j = 0; j < port.length; j++) {\r\n            port[j].visibility = 0;\r\n            for (let i = 0; i < args.value.length; i++) {\r\n                port[j].visibility += args.value[i];\r\n            }\r\n            diagramInstance.dataBind();\r\n        }\r\n    }\r\n}\r\n//change the shape of the Port.\r\nfunction portShapeDropOnChange(args) {\r\n    let port = getPort();\r\n    for (let j = 0; j < port.length; j++) {\r\n        switch (portShapeDrop.value) {\r\n            case \"X\":\r\n                port[j].shape = \"X\";\r\n                break;\r\n            case \"Circle\":\r\n                port[j].shape = \"Circle\";\r\n                break;\r\n            case \"Square\":\r\n                port[j].shape = \"Square\";\r\n                break;\r\n            case \"Custom\":\r\n                port[j].shape = \"Custom\";\r\n                port[j].pathData = \"M6.805,0L13.61,10.703L0,10.703z\";\r\n                break;\r\n        }\r\n        diagramInstance.dataBind();\r\n    }\r\n}\r\n//set the appearence of the Port.\r\nfunction applyportstyle(value) {\r\n    let port = getPort();\r\n    for (let j = 0; j < port.length; j++) {\r\n        if (value === \"size\" && portSizeNum) {\r\n            port[j].height = portSizeNum.value;\r\n            port[j].width = portSizeNum.value;\r\n        }\r\n        else if (value === \"strokewidth\" && portWidthNum) {\r\n            port[j].style.strokeWidth = portWidthNum.value;\r\n        }\r\n    }\r\n    diagramInstance.dataBind();\r\n}\r\n\nrender(<Port />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}