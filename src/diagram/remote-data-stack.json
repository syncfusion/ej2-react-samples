{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from \"react\";\r\nimport { HierarchicalTree, DataBinding, DiagramComponent, Inject, DiagramTools } from \"@syncfusion/ej2-react-diagrams\";\r\nimport { SampleBase } from './sample-base';\r\nimport { DataManager, Query } from \"@syncfusion/ej2-data\";\r\nexport class RemoteData extends SampleBase {\r\n    render() {\r\n        return (<div className=\"control-pane\">\r\n        <div className=\"control-section\">\r\n          <DiagramComponent id=\"diagram\" width={\"100%\"} height={\"490\"} layout={{\r\n            type: \"HierarchicalTree\",\r\n            margin: { left: 0, right: 0, top: 100, bottom: 0 },\r\n            verticalSpacing: 40,\r\n            getLayoutInfo: (node, options) => {\r\n                if (options.level === 3) {\r\n                    node.style.fill = \"#3c418d\";\r\n                }\r\n                if (options.level === 2) {\r\n                    node.style.fill = \"#108d8d\";\r\n                    options.type = \"Center\";\r\n                    options.orientation = \"Horizontal\";\r\n                }\r\n                if (options.level === 1) {\r\n                    node.style.fill = \"#822b86\";\r\n                }\r\n            }\r\n        }} \r\n        //Sets the default values of nodes\r\n        getNodeDefaults={(obj) => {\r\n            obj.width = 80;\r\n            obj.height = 40;\r\n            //Initialize shape\r\n            obj.shape = { type: \"Basic\", shape: \"Rectangle\" };\r\n            obj.style = { fill: \"#048785\", strokeColor: \"Transparent\" };\r\n        }} \r\n        //Sets the default values of connector\r\n        getConnectorDefaults={(connector) => {\r\n            connector.type = \"Orthogonal\";\r\n            connector.style.strokeColor = \"#048785\";\r\n            connector.targetDecorator.shape = \"None\";\r\n        }} \r\n        //Configures data source\r\n        dataSourceSettings={{\r\n            id: \"EmployeeID\",\r\n            parentId: \"ReportsTo\",\r\n            dataSource: new DataManager({\r\n                url: \"https://mvc.syncfusion.com/Services/Northwnd.svc/\",\r\n                crossDomain: true\r\n            }, new Query()\r\n                .from(\"Employees\")\r\n                .select(\"EmployeeID,ReportsTo,FirstName\")\r\n                .take(9)),\r\n            //binds the external data with node\r\n            doBinding: (nodeModel, data, diagram) => {\r\n                nodeModel.annotations = [\r\n                    {\r\n                        /* tslint:disable:no-string-literal */\r\n                        content: data[\"FirstName\"],\r\n                        style: { color: \"white\" }\r\n                    }\r\n                ];\r\n            }\r\n        }} \r\n        //Disables all interactions except zoom/pan\r\n        tool={DiagramTools.ZoomPan} snapSettings={{ constraints: 0 }}>\r\n            <Inject services={[DataBinding, HierarchicalTree]}/>\r\n          </DiagramComponent>\r\n        </div>\r\n      </div>);\r\n    }\r\n}\r\n\nrender(<RemoteData />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}