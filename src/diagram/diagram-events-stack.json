{"index.css":"/* css */","diagram-events-details.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getEventDetails(args) {\n    var listView = document.getElementById('listview-def');\n    var listViewComponent = listView.ej2_instances[0];\n    var selectedItems = listViewComponent.getSelectedItems();\n    if (selectedItems.data.length > 0) {\n        var elementName = getName(selectedItems, args);\n        if (elementName) {\n            eventInformation(args);\n        }\n    }\n    else {\n        eventInformation(args);\n    }\n}\nexports.getEventDetails = getEventDetails;\nfunction getName(selectedItems, args) {\n    for (var i = 0; i < selectedItems.data.length; i++) {\n        var eventName = selectedItems.data[i].id;\n        if (eventName === args.name) {\n            return true;\n        }\n    }\n    return false;\n}\n// tslint:disable-next-line:max-func-body-length\nfunction eventInformation(args) {\n    var span = document.createElement('span');\n    span.innerHTML = 'Diagram ' + args.name.bold() + ' event called' + '<hr>';\n    var log = document.getElementById('EventLog');\n    log.insertBefore(span, log.firstChild);\n}\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from \"react\";\r\nimport { UndoRedo, DiagramContextMenu, DiagramComponent, SnapConstraints, Inject, SymbolPaletteComponent, NodeConstraints } from \"@syncfusion/ej2-react-diagrams\";\r\nimport { SampleBase } from './sample-base';\r\nimport { ButtonComponent } from \"@syncfusion/ej2-react-buttons\";\r\nimport { ListViewComponent } from '@syncfusion/ej2-react-lists';\r\nimport { getEventDetails } from './diagram-events-details';\r\n/**\r\n * Diagram Events sample\r\n */\r\nconst SAMPLE_CSS = `#diagramEventsControlSection .sb-mobile-palette {\r\n    width: 200px;\r\n    height: 100%;\r\n    float: left;\r\n  }\r\n\r\n #diagramEventsControlSection .sb-mobile-palette-bar {\r\n    display: none;\r\n}\r\n\r\n #diagramEventsControlSection .sb-mobile-diagram {\r\n    width: calc(100% - 200px);\r\n    height: 100%;\r\n    float: left;\r\n    border: 1px solid #d9dedd;\r\n  }\r\n  \r\n  .material #diagramEventsControlSection  #palette-space .e-accordion {\r\n      border: none;\r\n  }\r\n  .material #diagramEventsControlSection #palette-space {\r\n     border: 1px solid rgba(0, 0, 0, 0.12);\r\n  }\r\n\r\n  @media (max-width: 550px) {\r\n    #diagramEventsControlSection .sb-mobile-palette {\r\n      z-index: 19;\r\n      position: absolute;\r\n      display: none;\r\n      transition: transform 300ms linear, visibility 0s linear 300ms;\r\n      width: 39%;\r\n      height: 100%;\r\n    }\r\n\r\n    #diagramEventsControlSection .sb-mobile-palette-bar {\r\n      display: block;\r\n      width: 100%;\r\n      background: #fafafa;\r\n      padding: 10px 10px;\r\n      border: 0.5px solid #e0e0e0;\r\n      min-height: 40px;\r\n    }\r\n\r\n    #diagramEventsControlSection .sb-mobile-diagram {\r\n      width: 100%;\r\n      height: 100%;\r\n      float: left;\r\n      left: 0px;\r\n    }\r\n\r\n    #diagramEventsControlSection #palette-icon {\r\n      font-size: 20px;\r\n    }\r\n  }\r\n\r\n  #diagramEventsControlSection .sb-mobile-palette-open {\r\n    position: absolute;\r\n    display: block;\r\n    right: 15px;\r\n  }\r\n\r\n  @font-face {\r\n    font-family: \"e-ddb-icons1\";\r\n    src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA)\r\n      format(\"truetype\");\r\n    font-weight: normal;\r\n    font-style: normal;\r\n  }\r\n\r\n  .e-ddb-icons1 {\r\n    font-family: \"e-ddb-icons1\";\r\n    speak: none;\r\n    font-size: 16px;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-variant: normal;\r\n    text-transform: none;\r\n    line-height: 1;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n\r\n  #diagramEventsControlSection .e-toggle-palette::before {\r\n    content: \"\\e700\";\r\n  }\r\n\r\n  \r\n  #diagramEventsPropertySection .event-tracer {\r\n    width: 240px;\r\n    height: 700px;\r\n    min-height: 700px;\r\n    float: left;\r\n  }\r\n\r\n #diagramEventsPropertySection .heading {\r\n    color: #807f7f;\r\n    font-size: 15px;\r\n    height: 50px;\r\n    width: 100%;\r\n    border-bottom: 1px solid #d9dedd;\r\n    padding: 10px;\r\n  }\r\n\r\n  #EventLog b {\r\n    color: #388e3c;\r\n  }\r\n\r\n  hr {\r\n    margin: 1px 10px 1px 0px;\r\n    border-top: 1px solid #eee;\r\n  }\r\n\r\n  .property-section {\r\n    padding-top: 20px;\r\n    padding-bottom: 20px;\r\n    height: 740px;\r\n    padding-right: 0px;\r\n  }\r\n\r\n  #diagramEventsPropertySection .evtbtn { \r\n    float: right; \r\n  }\r\n\r\n  #diagramEventsPropertySection .listbox {\r\n    width: 100%;\r\n    height: 50%;\r\n  }\r\n\r\n #diagramEventsPropertySection .event-tracer .prop-grid {\r\n    width: 100%;\r\n    height: 50%;\r\n  }\r\n\r\n #diagramEventsPropertySection #EventLog {\r\n    height: calc(100% - 50px);\r\n    padding: 15px;\r\n    overflow: auto;\r\n    width: 100%;\r\n  }`;\r\nlet diagramInstance;\r\n//Initialize the basicshapes for the symbol palatte\r\nlet basicShapes = [\r\n    { id: 'Rectangle', shape: { type: 'Basic', shape: 'Rectangle' } },\r\n    { id: 'Ellipse', shape: { type: 'Basic', shape: 'Ellipse' } },\r\n    { id: 'Parallelogram', shape: { type: 'Basic', shape: 'Parallelogram' } },\r\n    { id: 'Triangle', shape: { type: 'Basic', shape: 'Triangle' } },\r\n    { id: 'Hexagon', shape: { type: 'Basic', shape: 'Hexagon' } },\r\n    { id: 'Pentagon', shape: { type: 'Basic', shape: 'Pentagon' } },\r\n    { id: 'Cylinder', shape: { type: 'Basic', shape: 'Cylinder' } },\r\n    { id: 'Plus', shape: { type: 'Basic', shape: 'Plus' } },\r\n    { id: 'Heptagon', shape: { type: 'Basic', shape: 'Heptagon' } },\r\n    { id: 'Octagon', shape: { type: 'Basic', shape: 'Octagon' } },\r\n    { id: 'Trapezoid', shape: { type: 'Basic', shape: 'Trapezoid' } },\r\n    { id: 'Decagon', shape: { type: 'Basic', shape: 'Decagon' } },\r\n    { id: 'RightTriangle', shape: { type: 'Basic', shape: 'RightTriangle' } },\r\n    { id: 'Diamond', shape: { type: 'Basic', shape: 'Diamond' } },\r\n    { id: 'Star', shape: { type: 'Basic', shape: 'Star' } }\r\n];\r\n//Initializes connector symbols for the symbol palette\r\nlet connectorSymbols = [\r\n    {\r\n        id: 'Link1', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\r\n        targetDecorator: { shape: 'Arrow' }, style: { strokeWidth: 1 }\r\n    },\r\n    {\r\n        id: 'link3', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\r\n        style: { strokeWidth: 1 }, targetDecorator: { shape: 'None' }\r\n    },\r\n    {\r\n        id: 'Link21', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\r\n        targetDecorator: { shape: 'Arrow' }, style: { strokeWidth: 1 }\r\n    },\r\n    {\r\n        id: 'link23', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\r\n        style: { strokeWidth: 1 }, targetDecorator: { shape: 'None' }\r\n    },\r\n    {\r\n        id: 'link33', type: 'Bezier', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\r\n        style: { strokeWidth: 1 }, targetDecorator: { shape: 'None' }\r\n    },\r\n];\r\nexport class Events extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.data = [\r\n            { text: 'Drag enter', id: 'dragEnter' },\r\n            { text: 'Drag leave', id: 'dragLeave' },\r\n            { text: 'Drag over', id: 'dragOver' },\r\n            { text: 'Click', id: 'click', isChecked: true },\r\n            { text: 'History change', id: 'historyChange', isChecked: true },\r\n            { text: 'Double click', id: 'doubleClick' },\r\n            { text: 'Text edit', id: 'textEdit', isChecked: true },\r\n            { text: 'Scroll change', id: 'scrollChange' },\r\n            { text: 'Selection change', id: 'selectionChange', isChecked: true },\r\n            { text: 'Size change', id: 'sizeChange', isChecked: true },\r\n            { text: 'Connection change', id: 'connectionChange', isChecked: true },\r\n            { text: 'SourcePoint change', id: 'sourcePointChange' },\r\n            { text: 'TargetPoint change', id: 'targetPointChange' },\r\n            { text: 'Position change', id: 'positionChange', isChecked: true },\r\n            { text: 'Rotate change', id: 'rotateChange', isChecked: true },\r\n            { text: 'Collection change', id: 'collectionChange', isChecked: true },\r\n            { text: 'Mouse enter', id: 'mouseEnter' },\r\n            { text: 'Mouse leave', id: 'mouseLeave' },\r\n            { text: 'Mouse over', id: 'mouseOver' },\r\n            { text: 'Context menu open', id: 'contextMenuOpen' },\r\n            { text: 'Context menu before item render', id: 'contextMenuBeforeItemRender' },\r\n            { text: 'Context menu click', id: 'contextMenuClick' }\r\n        ];\r\n    }\r\n    rendereComplete() {\r\n        document.getElementById('clearbtn').onclick = (args) => {\r\n            let data = document.getElementById('EventLog');\r\n            for (let i = data.childNodes.length - 1; i >= 0; i--) {\r\n                data.removeChild(data.childNodes[i]);\r\n            }\r\n        };\r\n    }\r\n    render() {\r\n        return (<div className=\"control-pane\">\r\n                <style>{SAMPLE_CSS}</style>\r\n                <div className=\"col-lg-8 control-section\">\r\n                    <style>{SAMPLE_CSS}</style>\r\n                    <div id=\"diagramEventsControlSection\" className=\"content-wrapper\" style={{ width: \"100%\", background: \"white\" }}>\r\n                        <div id=\"palette-space\" className=\"sb-mobile-palette\">\r\n                            <SymbolPaletteComponent id=\"symbolpalette\" expandMode=\"Multiple\" palettes={[\r\n            {\r\n                id: \"basic\",\r\n                expanded: true,\r\n                symbols: basicShapes,\r\n                iconCss: \"e-ddb-icons e-basic\",\r\n                title: \"Basic Shapes\"\r\n            },\r\n            {\r\n                id: \"connectors\",\r\n                expanded: true,\r\n                symbols: connectorSymbols,\r\n                iconCss: \"e-ddb-icons e-connector\",\r\n                title: \"Connectors\"\r\n            }\r\n        ]} width={\"100%\"} height={\"700px\"} symbolHeight={60} symbolWidth={60} symbolMargin={{ left: 15, right: 15, top: 15, bottom: 15 }} getNodeDefaults={(symbol) => {\r\n            symbol.width = 50;\r\n            symbol.height = 50;\r\n            symbol.constraints = NodeConstraints.Default | NodeConstraints.AllowDrop;\r\n        }} getSymbolInfo={(symbol) => {\r\n            return { fit: true };\r\n        }}><Inject services={[UndoRedo, DiagramContextMenu]}/>\r\n                            </SymbolPaletteComponent>\r\n                        </div>\r\n                        <div id=\"diagram-space\" className=\"sb-mobile-diagram\">\r\n                            <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={\"700px\"} dragEnter={(args) => {\r\n            getEventDetails(args);\r\n        }} dragLeave={(args) => {\r\n            getEventDetails(args);\r\n        }} dragOver={(args) => {\r\n            if (args.target) {\r\n                getEventDetails(args);\r\n            }\r\n        }} click={(args) => {\r\n            getEventDetails(args);\r\n        }} historyChange={(args) => {\r\n            getEventDetails(args);\r\n        }} doubleClick={(args) => {\r\n            getEventDetails(args);\r\n        }} textEdit={(args) => {\r\n            getEventDetails(args);\r\n        }} scrollChange={(args) => {\r\n            getEventDetails(args);\r\n        }} selectionChange={(args) => {\r\n            getEventDetails(args);\r\n        }} sizeChange={(args) => {\r\n            getEventDetails(args);\r\n        }} connectionChange={(args) => {\r\n            getEventDetails(args);\r\n        }} sourcePointChange={(args) => {\r\n            getEventDetails(args);\r\n        }} targetPointChange={(args) => {\r\n            getEventDetails(args);\r\n        }} propertyChange={(args) => {\r\n            getEventDetails(args);\r\n        }} positionChange={(args) => {\r\n            getEventDetails(args);\r\n        }} rotateChange={(args) => {\r\n            getEventDetails(args);\r\n        }} collectionChange={(args) => {\r\n            getEventDetails(args);\r\n        }} mouseEnter={(args) => {\r\n            getEventDetails(args);\r\n        }} mouseLeave={(args) => {\r\n            getEventDetails(args);\r\n        }} mouseOver={(args) => {\r\n            getEventDetails(args);\r\n        }} contextMenuOpen={(args) => {\r\n            getEventDetails(args);\r\n        }} contextMenuBeforeItemRender={(args) => {\r\n            getEventDetails(args);\r\n        }} contextMenuClick={(args) => {\r\n            getEventDetails(args);\r\n        }} \r\n        //Sets the constraints of the SnapSettings\r\n        snapSettings={{ constraints: SnapConstraints.None }}>\r\n                                <Inject services={[UndoRedo, DiagramContextMenu]}/>\r\n                            </DiagramComponent>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-lg-4 property-section\">\r\n                    <div id=\"diagramEventsPropertySection\" style={{ height: \"100%\", border: \"1px solid #e0e0e0\" }}>\r\n                        <div className=\"listbox\">\r\n                            <div className=\"heading\" style={{ height: \"40px\" }}><span>Client-side events</span></div>\r\n                            <ListViewComponent id='listview-def' dataSource={this.data} showCheckBox={true} height={'calc(100% - 40px)'}>\r\n                            </ListViewComponent>\r\n                        </div>\r\n                        <div className=\"prop-grid content\" style={{ height: \"50%\", borderTop: \"1px solid #e0e0e0\" }}>\r\n                            <div className=\"heading\">\r\n                                <span style={{ display: \"inline-block\", marginTop: \"5px\" }}>Event arguments</span>\r\n                                <div className=\"evtbtn\">\r\n                                    <ButtonComponent id='clearbtn' content='clear'>\r\n                                    </ButtonComponent>\r\n                                </div>\r\n                            </div>\r\n                            <div id=\"EventLog\">\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<Events />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}