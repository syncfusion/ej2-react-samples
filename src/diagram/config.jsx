export const DiagramSampleOrder = [
    { 'path': 'diagram/default-functionality', 'component': 'Default', 'name': 'Default Functionalities', 'description': 'This sample visualizes the processing of an order placed using credit card with built-in flow shapes.', 'order': '01', 'category': 'Getting Started' },
    { 'path': 'diagram/shape-gallery', 'component': 'ShapeGallery', 'name': 'Shapes', 'description': 'This sample illustrates list of built-in shapes available in our JavaScript Diagram Library which includes basic shapes, flow shapes, and BPMN shapes.', 'order': '01', 'category': 'Getting Started' },
    { 'path': 'diagram/getting-started-node', 'component': 'GettingStartedNodes', 'name': 'Nodes', 'description': 'This sample visualizes the different stages of a software development life cycle using a circular flow diagram.', 'order': '01', 'category': 'Getting Started' },
    { 'path': 'diagram/connectors', 'component': 'Connectors', 'name': 'Connectors', 'description': 'This sample visualizes the data flow in a marketing process using predefined diagram shapes and connectors.', 'order': '01', 'category': 'Getting Started' },
    { 'path': 'diagram/getting-started-annotation', 'component': 'GettingStartedAnnotation', 'name': 'Annotations', 'description': 'This sample illustrates the competitive environment of a business through five forces chart and its described using nodes and annotations.', 'order': '01', 'category': 'Getting Started' },
    { 'path': 'diagram/port', 'component': 'Port', 'name': 'Ports', 'description': 'This sample visualizes process flow of publishing a book using connection points which are static points over shapes that allow creating connections onto it.', 'order': '01', 'category': 'Getting Started' },
    { 'path': 'diagram/swim-lane', 'component': 'SwimLane', 'name': 'SwimLane', 'description': 'This sample  Different types of connectors and decorators are used to customize the appearance, path, and direction of the data flow.', 'order': '01', 'category': 'Getting Started' },
    { 'path': 'diagram/diagram-events', 'component': 'Events', 'name': 'Events', 'description': 'This sample visualizes what are the client side events are available in our JavaScript Diagram Library.', 'order': '01', 'category': 'Getting Started' },
    { 'path': 'diagram/tooltip', 'component': 'Tooltip', 'name': 'Tooltip', 'description': 'This sample demonstrates how to add the extra information to the nodes and connectors and how to show the information through diagram tooltip feature.', 'order': '01', 'category': 'Getting Started' },
    { 'path': 'diagram/history-manager', 'component': 'HistoryManager', 'name': 'HistoryManager', 'description': 'This sample  Different types of connectors and decorators are used to customize the appearance, path, and direction of the data flow.', 'order': '01', 'category': 'Getting Started' },
    { 'path': 'diagram/flow-execution', 'component': 'FlowExecution', 'name': 'Flow Execution', 'description': 'This sample  Different types of connectors and decorators are used to customize the appearance, path, and direction of the data flow.', 'order': '01', 'category': 'Getting Started' },
    { 'path': 'diagram/custom-shapes', 'component': 'HtmlNode', 'name': 'Complex Shapes', 'description': 'This sample demonstrates how to host a HTML elements inside a node. In this example, a Gauge control is hosted inside a HTML Node.', 'order': '01', 'category': 'Getting Started' },
    { 'path': 'diagram/line-routing', 'component': 'LineRoutingSample', 'name': 'LineRouting', 'description': 'This sample visualizes the connectors that are automatically re-routing or moving away if any shape found on the connectors path.', 'order': '01', 'category': 'Getting Started' },
    { 'path': 'diagram/bpmn-editor', 'component': 'BpmnEditor', 'name': 'BPMN Editor', 'description': 'This sample visualizes the hotel booking reservation system and its built with ready made BPMN shapes.', 'order': '02', 'category': 'Use Case Diagram' },
    { 'path': 'diagram/logic-circuit', 'component': 'LogicCircuit', 'name': 'Logic circuit Diagram', 'description': 'This sample visualizes implementation of three input Boolean functions using universal logic gates and shape for logic gates designed with diagrams path node.', 'order': '02', 'category': 'Use Case Diagram' },
    { 'path': 'diagram/uml-activity', 'component': 'UmlActivityDiagram', 'name': 'UML Activity Diagram', 'description': 'This sample visually represents the hotel booking reservation system. It is built with readymade BPMN shapes.', 'order': '02', 'category': 'Use Case Diagram' },
    { 'path': 'diagram/network-diagram', 'component': 'NetworkShapes', 'name': 'Network Diagram', 'description': 'This sample visualizes graphical layout of a network diagram using diagrams Native(SVG) nodes feature.', 'order': '02', 'category': 'Use Case Diagram' },
    { 'path': 'diagram/Uml-class-diagram', 'component': 'UMLClassDiagram', 'name': 'UML Class Diagram', 'description': 'This sample represents the hospital management system using diagrams built-in UML class diagram shapes.', 'order': '02', 'category': 'Use Case Diagram' },
    { 'path': 'diagram/hierarchical-model', 'component': 'HierarchicalModel', 'name': 'Hierarchical Tree', 'description': 'This sample illustrates a generating hierarchical tree from right to left orientation with external data source.', 'order': '03', 'category': 'Automatic Layouts' },
    { 'path': 'diagram/organization-model', 'component': 'OrganizationModel', 'name': 'Organization Chart', 'description': 'This sample illustrates a simple business management structure that is built from an external data source.', 'order': '03', 'category': 'Automatic Layouts' },
    { 'path': 'diagram/radial-tree', 'component': 'Radial', 'name': 'Radial Tree', 'order': '03', 'description': 'This sample demonstrates a huge organizational structure using a compact layout model. Radial tree layout algorithm is used to build such a layout.', 'category': 'Automatic Layouts' },
    { 'path': 'diagram/mind-map', 'component': 'MindMap', 'name': 'Mind Map', 'order': '03', 'description': 'This sample demonstrates the concept of creativity using mind map layout algorithm. User handles are used to extend the mind map interactively.', 'category': 'Automatic Layouts' },
    { 'path': 'diagram/symmetric-layout', 'component': 'SymmetricLayout', 'name': 'Symmetric Layout', 'description': 'This sample visualizes a simple network template using symmetrical layout algorithm. It uses attractive and repulsive forces.', 'order': '03', 'category': 'Automatic Layouts' },
    { 'path': 'diagram/complex-hierarchical-tree', 'component': 'ComplexHierarchicalModel', 'name': 'Complex Hierarchical Tree', 'description': 'This sample demonstrates a complex hierarchical template that is built from an external data source using complex hierarchical tree algorithm.', 'order': '03', 'category': 'Automatic Layouts' },
    { 'path': 'diagram/right-to-left-tree', 'component': 'RTLTree', 'name': 'RTL Tree', 'description': 'This sample visualizes the concept of Artificical Intelligence using hierarchical tree layout algorithm', 'order': '03', 'category': 'Automatic Layouts' },
    { 'path': 'diagram/pert-chart', 'component': 'PertChart', 'name': 'PERT Chart', 'description': 'This sample visualizes a project development process using Program Evaluation Review Technique (PERT).', 'order': '03', 'category': 'Automatic Layouts' },
    { 'path': 'diagram/drawing-tool', 'component': 'DrawingTools', 'name': 'Drawing Tools', 'description': 'This sample visualizes how to build a diagram interactively using drawing tools. Continuous draw option, snapping are enabled to easily draw diagrams.', 'order': '04', 'category': 'User Interaction' },
    { 'path': 'diagram/key-board-functions', 'component': 'KeyBoardInteraction', 'name': 'Keyboard Interaction', 'description': 'This sample illustrates interaction with diagram control using shortcut keys. Command Manager support is used to manage keyboard interactions.', 'order': '04', 'category': 'User Interaction' },
    { 'path': 'diagram/quick-commands', 'component': 'UserHandle', 'name': 'User Handle', 'description': 'This sample visualizes a simple flow diagram along with options to execute the frequently used commands using user handles.', 'order': '04', 'category': 'User Interaction' },
    { 'path': 'diagram/symbol-palette', 'component': 'SymbolPalette', 'name': 'Symbol Palette', 'description': 'This example illustrates predefining shapes in a palette that can be easily dragged and dropped into the drawing area.', 'order': '04', 'category': 'User Interaction' },
    { 'path': 'diagram/overview', 'component': 'Overview', 'name': 'Overview Panel', 'description': 'This sample visualizes an organizational structure along with an overview for easily navigating the large organizational structure using Overview Panel.', 'order': '04', 'category': 'User Interaction' },
    { 'path': 'diagram/serialization', 'component': 'Serialization', 'name': 'Serialization', 'description': 'This sample visualizes building diagrams interactively and editing the saved diagrams. Symbol Palette is used to easily build diagrams.', 'order': '05', 'category': 'Print and Export' },
    { 'path': 'diagram/print-export', 'component': 'PrintExport', 'name': 'Print and Export', 'description': 'This example shows how to print the diagram and how to export the diagram as image (*.jpg, *.png, and *bmp) and SVG format.', 'order': '05', 'category': 'Print and Export' },
    { 'path': 'diagram/local-data', 'component': 'LocalData', 'name': 'Local Data', 'description': 'This sample visualizes the classifications of species using hierarchical tree layout algorithm. Data Manager support is used to bind data with the diagram.', 'order': '06', 'category': 'Data Binding' },
    { 'path': 'diagram/remote-data', 'component': 'RemoteData', 'name': 'Remote Data', 'description': 'This sample demonstrates how to bind an remote data with the diagram using the Data Manager support.', 'order': '06', 'category': 'Data Binding' },
    { 'path': 'diagram/crud', 'component': 'Crud', 'name': 'CRUD', 'description': 'This sample demonstrates generating a diagram by reading data from the database, and updating it with new inserted/updated/deleted objects through web services.', 'order': '06', 'category': 'Data Binding' },
    { 'path': 'diagram/venn-diagram', 'component': 'VennDiagram', 'name': 'Venn Diagram', 'description': 'This sample visually represents the hotel booking reservation system. It is built with readymade BPMN shapes.', 'order': '07', 'category': 'Static Diagram' },
    { 'path': 'diagram/fishbone-diagram', 'component': 'Fishbone', 'name': 'Fishbone Diagram', 'description': 'This sample visually represents a simple fishbone diagram (Ishikawa). Diagram nodes and annotations are used to define fishbone diagrams.', 'order': '07', 'category': 'Static Diagram' }
];
