{"index.css":"/* css */","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { PivotViewComponent, VirtualScroll, Inject } from '@syncfusion/ej2-react-pivotview';\r\nimport { SampleBase } from './sample-base';\r\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\r\n/**\r\n * PivotView Default Sample.\r\n */\r\nconst SAMPLE_CSS = `\r\n.e-pivotview {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n.image {\r\n    position: absolute;\r\n    background-repeat: no-repeat;\r\n    background-image: url('////npmci.syncfusion.com/development/react/demos/src/grid/images/spinner.gif');\r\n    background-position: center;\r\n    width: 16px;\r\n    height: 28px;\r\n}\r\n\r\n.e-bigger .image {\r\n    height: 36px;\r\n}\r\n\r\n#popup {\r\n    position: absolute;\r\n    background-color: transparent;\r\n    display: none;\r\n    z-index: 100;\r\n}\r\n\r\n#performanceTime {\r\n    float: right;\r\n    margin-top: 3px;\r\n    margin-right: 27px;\r\n}\r\n\r\n.e-bigger #performanceTime{\r\n    margin-top: 8px;\r\n}`;\r\nlet dataSourceSettings = {\r\n    dataSource: [],\r\n    enableSorting: false,\r\n    expandAll: true,\r\n    formatSettings: [{ name: 'Price', format: 'C0' }],\r\n    rows: [{ name: 'ProductID' }],\r\n    columns: [{ name: 'Year' }],\r\n    values: [{ name: 'Price', caption: 'Unit Price' }, { name: 'Sold', caption: 'Unit Sold' }]\r\n};\r\nlet customername = ['TOM', 'Hawk', 'Jon', 'Chandler', 'Monica', 'Rachel', 'Phoebe', 'Gunther',\r\n    'Ross', 'Geller', 'Joey', 'Bing', 'Tribbiani', 'Janice', 'Bong', 'Perk', 'Green', 'Ken', 'Adams'];\r\nlet city = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Philadelphia', 'Phoenix', 'San Antonio', 'Austin',\r\n    'San Francisco', 'Columbus', 'Washington', 'Portland', 'Oklahoma', 'Las Vegas', 'Virginia', 'St. Louis', 'Birmingham'];\r\nlet applyBtn;\r\nlet pivotObj;\r\nlet date1;\r\nlet date2;\r\nlet isInit;\r\nfunction data(count) {\r\n    let result = [];\r\n    let dt = 0;\r\n    for (let i = 1; i < (count + 1); i++) {\r\n        dt++;\r\n        let round;\r\n        let toString = i.toString();\r\n        if (toString.length === 1) {\r\n            round = '0000' + (i);\r\n        }\r\n        else if (toString.length === 2) {\r\n            round = '000' + i;\r\n        }\r\n        else if (toString.length === 3) {\r\n            round = '00' + i;\r\n        }\r\n        else if (toString.length === 4) {\r\n            round = '0' + i;\r\n        }\r\n        else {\r\n            round = toString;\r\n        }\r\n        result.push({\r\n            ProductID: 'PRO-' + round,\r\n            City: city[Math.round(Math.random() * city.length)] || city[0],\r\n            Year: \"FY \" + (dt + 2013),\r\n            CustomerName: customername[Math.round(Math.random() * customername.length)] || customername[0],\r\n            Price: Math.round(Math.random() * 5000) + 5000,\r\n            Sold: Math.round(Math.random() * 80) + 10,\r\n        });\r\n        if (dt / 4 == 1) {\r\n            dt = 0;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n;\r\nfunction show() {\r\n    document.getElementById('popup').style.display = 'inline-block';\r\n}\r\n;\r\nexport class VirtualScrolling extends SampleBase {\r\n    onClick(args) {\r\n        show();\r\n        isInit = true;\r\n        pivotObj.dataSourceSettings.dataSource = data(100000);\r\n        date1 = new Date().getTime();\r\n    }\r\n    onDataBound() {\r\n        if (pivotObj.dataSourceSettings.dataSource.length > 0) {\r\n            if (date1 && isInit) {\r\n                date2 = new Date().getTime();\r\n                document.getElementById('performanceTime').innerHTML = 'Time Taken: ' + (date2 - date1) / 1000 + ' sec';\r\n            }\r\n            isInit = false;\r\n            applyBtn.disabled = true;\r\n            document.getElementById('popup').style.display = 'none';\r\n        }\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section'>\r\n                    <div id=\"btn-control\" style={{ marginBottom: '5px' }}>\r\n                        <ButtonComponent id='apply' className='e-info' ref={(scope) => { applyBtn = scope; }} onClick={this.onClick.bind(this)} isPrimary={true}>Load 100K Data</ButtonComponent>\r\n                        <span id=\"popup\">\r\n                            <span id=\"gif\" className=\"image\"></span>\r\n                        </span>\r\n                        <span id=\"performanceTime\">Time Taken: 0 sec</span>\r\n                    </div>\r\n                    <PivotViewComponent id='PivotView' ref={(pivotview) => { pivotObj = pivotview; }} dataSourceSettings={dataSourceSettings} enableVirtualization={true} width={860} height={300} gridSettings={{ columnWidth: 140 }} dataBound={this.onDataBound}>\r\n                        <Inject services={[VirtualScroll]}/>\r\n                    </PivotViewComponent>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<VirtualScrolling />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}