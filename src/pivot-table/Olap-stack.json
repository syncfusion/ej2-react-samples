{"index.css":".e-pivotview {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n@media only screen and (max-width: 400px) {\r\n    #pivot-table-section {\r\n        overflow: auto;\r\n    }\r\n}","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\r\nimport { PivotViewComponent, Inject, FieldList, CalculatedField, GroupingBar, Toolbar, PDFExport, ExcelExport, ConditionalFormatting } from '@syncfusion/ej2-react-pivotview';\r\nimport { SampleBase } from './sample-base';\r\n\r\n/**\r\n * PivotView ToolBar Sample Olap.\r\n */\r\nlet dataSourceSettings = {\r\n    catalog: 'Adventure Works DW 2008 SE',\r\n    cube: 'Adventure Works',\r\n    providerType: 'SSAS',\r\n    url: 'https://bi.syncfusion.com/olap/msmdpump.dll',\r\n    enableSorting: true,\r\n    columns: [{ name: '[Product].[Product Categories]', caption: 'Product Categories' }, { name: '[Measures]', caption: 'Measures' }],\r\n    valueSortSettings: { headerDelimiter: ' - ' },\r\n    values: [{ name: '[Measures].[Customer Count]', caption: 'Customer Count' }, { name: '[Measures].[Internet Sales Amount]', caption: 'Internet Sales Amount' }],\r\n    rows: [{ name: '[Customer].[Customer Geography]', caption: 'Customer Geography' }],\r\n    filters: [{ name: '[Date].[Fiscal]', caption: 'Date Fiscal' }],\r\n    filterSettings: [{\r\n            name: '[Date].[Fiscal]', items: ['[Date].[Fiscal].[Fiscal Quarter].&[2002]&[4]', '[Date].[Fiscal].[Fiscal Year].&[2005]'],\r\n            levelCount: 3\r\n        }\r\n    ]\r\n};\r\nexport class OlapSample extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.toolbarOptions = ['New', 'Save', 'SaveAs', 'Rename', 'Remove', 'Load',\r\n            'Grid', 'Chart', 'MDX', 'Export', 'SubTotal', 'GrandTotal', 'ConditionalFormatting', 'FieldList'];\r\n    }\r\n    fetchReport(args) {\r\n        let reportsCollection = [];\r\n        let reeportsList = [];\r\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\r\n            reportsCollection = JSON.parse(localStorage.pivotviewReports);\r\n        }\r\n        reportsCollection.map(function (item) { reeportsList.push(item.reportName); });\r\n        args.reportName = reeportsList;\r\n    }\r\n    saveReport(args) {\r\n        let report = [];\r\n        let isSave = false;\r\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\r\n            report = JSON.parse(localStorage.pivotviewReports);\r\n        }\r\n        if (args.report && args.reportName && args.reportName !== '') {\r\n            report.map(function (item) {\r\n                if (args.reportName === item.reportName) {\r\n                    item.report = args.report;\r\n                    isSave = true;\r\n                }\r\n            });\r\n            if (!isSave) {\r\n                report.push(args);\r\n            }\r\n            localStorage.pivotviewReports = JSON.stringify(report);\r\n        }\r\n    }\r\n    removeReport(args) {\r\n        let reportsCollection = [];\r\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\r\n            reportsCollection = JSON.parse(localStorage.pivotviewReports);\r\n        }\r\n        for (let i = 0; i < reportsCollection.length; i++) {\r\n            if (reportsCollection[i].reportName === args.reportName) {\r\n                reportsCollection.splice(i, 1);\r\n            }\r\n        }\r\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\r\n            localStorage.pivotviewReports = JSON.stringify(reportsCollection);\r\n        }\r\n    }\r\n    loadReport(args) {\r\n        let reportsCollection = [];\r\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\r\n            reportsCollection = JSON.parse(localStorage.pivotviewReports);\r\n        }\r\n        reportsCollection.map(function (item) {\r\n            if (args.reportName === item.reportName) {\r\n                args.report = item.report;\r\n            }\r\n        });\r\n        if (args.report) {\r\n            this.pivotObj.dataSourceSettings = JSON.parse(args.report).dataSourceSettings;\r\n        }\r\n    }\r\n    renameReport(args) {\r\n        let reportsCollection = [];\r\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\r\n            reportsCollection = JSON.parse(localStorage.pivotviewReports);\r\n        }\r\n        reportsCollection.map(function (item) { if (args.reportName === item.reportName) {\r\n            item.reportName = args.rename;\r\n        } });\r\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\r\n            localStorage.pivotviewReports = JSON.stringify(reportsCollection);\r\n        }\r\n    }\r\n    beforeToolbarRender(args) {\r\n        args.customToolbar.splice(6, 0, {\r\n            type: 'Separator'\r\n        });\r\n        args.customToolbar.splice(9, 0, {\r\n            type: 'Separator'\r\n        });\r\n    }\r\n    newReport() {\r\n        this.pivotObj.setProperties({ dataSourceSettings: { columns: [], rows: [], values: [], filters: [] } }, false);\r\n    }\r\n    chartOnLoad(args) {\r\n        let selectedTheme = location.hash.split(\"/\")[1];\r\n        selectedTheme = selectedTheme ? selectedTheme : \"Material\";\r\n        args.chart.theme =\r\n            selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1);\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className='control-section' id='pivot-table-section' style={{ overflow: 'initial' }}>\r\n                    <PivotViewComponent id='PivotView' ref={(scope) => { this.pivotObj = scope; }} dataSourceSettings={dataSourceSettings} width={'100%'} height={'600'} showFieldList={true} showGroupingBar={true} gridSettings={{ columnWidth: 140 }} allowExcelExport={true} allowConditionalFormatting={true} allowPdfExport={true} showToolbar={true} allowCalculatedField={true} displayOption={{ view: 'Both' }} toolbar={this.toolbarOptions} newReport={this.newReport.bind(this)} renameReport={this.renameReport.bind(this)} removeReport={this.removeReport.bind(this)} loadReport={this.loadReport.bind(this)} fetchReport={this.fetchReport.bind(this)} saveReport={this.saveReport.bind(this)} toolbarRender={this.beforeToolbarRender.bind(this)} chartSettings={{ load: this.chartOnLoad.bind(this) }}>\r\n                        <Inject services={[FieldList, GroupingBar, CalculatedField, Toolbar, PDFExport, ExcelExport, ConditionalFormatting]}/>\r\n                    </PivotViewComponent>\r\n                </div>\r\n\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<OlapSample />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}