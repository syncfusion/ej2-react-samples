{"index.css":"\r\n    /* ListView position alignment */\r\n\r\n    #ui-list.e-listview {\r\n        margin: auto;\r\n        max-width: 325px;\r\n        line-height: initial;\r\n        border: 1px solid lightgray;\r\n    }\r\n\r\n    /* ListView header alignment */\r\n\r\n    #ui-list.e-listview .e-list-header {\r\n        height: 50px\r\n    }\r\n\r\n    #ui-list.e-listview .e-list-header .e-text {\r\n        line-height: 18px\r\n    }\r\n\r\n    /* ListView template customization */\r\n\r\n    #ui-list.e-listview .showUI {\r\n        display: flex;\r\n    }\r\n\r\n    #ui-list.e-listview .hideUI {\r\n        display: none;\r\n    }\r\n\r\n    #ui-list.e-listview .e-list-item {\r\n        padding: 3px 0;\r\n    }\r\n\r\n    #ui-list.e-listview .R {\r\n        background: lightgrey;\r\n    }\r\n\r\n    #ui-list.e-listview .M {\r\n        background: pink;\r\n    }\r\n\r\n    #ui-list.e-listview .A {\r\n        background: lightgreen;\r\n    }\r\n\r\n    #ui-list.e-listview .S {\r\n        background: lightskyblue;\r\n    }\r\n\r\n    #ui-list.e-listview .J {\r\n        background: orange;\r\n    }\r\n\r\n    #ui-list.e-listview .N {\r\n        background: lightblue;\r\n    }\r\n\r\n    /* ListView theme customization */\r\n\r\n    .highcontrast #ui-list.e-listview .e-list-item,\r\n    .highcontrast #ui-list.e-listview .e-list-header {\r\n        background: rgb(0, 0, 0);\r\n    }\r\n\r\n    .highcontrast #ui-list.e-listview .e-list-item.e-active {\r\n        background: #ffd939;\r\n        color: #000000;\r\n    }\r\n","property-pane.js":"import * as React from 'react';\r\nexport class PropertyPane extends React.Component {\r\n    render() {\r\n        return (<div className='property-panel-section'>\r\n                <div className=\"property-panel-header\">\r\n                    {this.props.title}\r\n                </div>\r\n                <div className=\"property-panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Syncfusion React Sample</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"Syncfusion React UI Components\" />\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link href=\"////npmci.syncfusion.com/packages/development/{{theme}}.css\" rel=\"stylesheet\">\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n</head>\r\n\r\n<body class=\"{{theme}}\">\r\n    <div id='sample'>\r\n</body>\r\n</html>\r\n","index.js":"import { render } from 'react-dom';\nimport './index.css';\n/**\r\n * ListView Virtualization Sample\r\n */\r\nimport * as React from 'react';\r\nimport { ListViewComponent, Inject, Virtualization } from '@syncfusion/ej2-react-lists';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';\r\nimport { createSpinner, hideSpinner, showSpinner } from '@syncfusion/ej2-popups';\r\nimport { Browser } from '@syncfusion/ej2-base';\r\nimport { PropertyPane } from './property-pane';\r\nimport { SampleBase } from './sample-base';\r\n\r\nexport class UiVirtualization extends SampleBase {\r\n    constructor() {\r\n        super();\r\n        this.commonData = [];\r\n        this.dataSource = {};\r\n        // Set customized list template\r\n        this.template = '<div class=\"e-list-wrapper e-list-avatar\">' +\r\n            '<span class=\"e-avatar e-avatar-circle ${icon} ${$imgUrl ? \\'hideUI\\' : \\'showUI\\' }\">' +\r\n            '${icon}</span> <img class=\"e-avatar e-avatar-circle ${$imgUrl ? \\'showUI\\' : \\'hideUI\\' }\" ' +\r\n            'src=\"${$imgUrl ?  $imgUrl : \\' \\' }\" />' +\r\n            '<span class=\"e-list-content\">${name}</span></div>';\r\n        // Set dropdown list data\r\n        this.ddlDatasource = [\r\n            { value: '1', text: '1k' },\r\n            { value: '5', text: '5k' },\r\n            { value: '10', text: '10k' },\r\n            { value: '25', text: '25k' }\r\n        ];\r\n        //Map the appropriate columns to DropDownList fields property\r\n        this.ddlFields = { text: 'text', value: 'value' };\r\n        //Map the appropriate columns to ListView fields property\r\n        this.fields = { text: 'name' };\r\n        this.commonData = [\r\n            { name: 'Nancy', icon: 'N', id: '0', },\r\n            { name: 'Andrew', icon: 'A', id: '1' },\r\n            { name: 'Janet', icon: 'J', id: '2' },\r\n            { name: 'Margaret', imgUrl: '////npmci.syncfusion.com/development/react/demos/src/listview/images/margaret.png', id: '3' },\r\n            { name: 'Steven', icon: 'S', id: '4' },\r\n            { name: 'Laura', imgUrl: '////npmci.syncfusion.com/development/react/demos/src/listview/images/laura.png', id: '5' },\r\n            { name: 'Robert', icon: 'R', id: '6' },\r\n            { name: 'Michael', icon: 'M', id: '7' },\r\n            { name: 'Albert', imgUrl: '////npmci.syncfusion.com/development/react/demos/src/listview/images/albert.png', id: '8' },\r\n            { name: 'Nolan', icon: 'N', id: '9' }\r\n        ];\r\n        [[1010, 'data1'], [5010, 'data5'], [10010, 'data10'], [25010, 'data25']].forEach((ds) => {\r\n            let data = this.commonData.slice();\r\n            let index;\r\n            let spyIndex;\r\n            for (let i = 10; i <= ds[0]; i++) {\r\n                while (index === spyIndex) {\r\n                    index = parseInt((Math.random() * 10).toString(), 10);\r\n                }\r\n                data.push({ name: data[index].name, icon: data[index].icon, imgUrl: data[index].imgUrl, id: i.toString() });\r\n                spyIndex = index;\r\n            }\r\n            this.dataSource[ds[1]] = data;\r\n        });\r\n    }\r\n    onActionComplete() {\r\n        this.liElement = document.getElementById('ui-list');\r\n        if (Browser.isDevice) {\r\n            this.liElement.classList.add('ui-mobile');\r\n        }\r\n        createSpinner({\r\n            target: this.liElement\r\n        });\r\n        this.endTime = new Date();\r\n        document.getElementById('time').innerText = (this.endTime.getTime() - this.startTime.getTime()) + ' ms';\r\n    }\r\n    onActionBegin() {\r\n        this.startTime = new Date();\r\n    }\r\n    onChange(e) {\r\n        showSpinner(this.liElement);\r\n        this.startTime = new Date();\r\n        this.listviewInstance.dataSource = this.dataSource['data' + e.value];\r\n        this.listviewInstance.dataBind();\r\n        this.endTime = new Date();\r\n        document.getElementById('time').innerText = (this.endTime.getTime() - this.startTime.getTime()) + ' ms';\r\n        hideSpinner(this.liElement);\r\n    }\r\n    render() {\r\n        return (<div className='control-pane'>\r\n                <div className='ui-control-section control-section'>\r\n                    <div className='col-lg-8'>\r\n                        <div className=\"content-wrapper\">\r\n                            \r\n                            <ListViewComponent id='ui-list' dataSource={this.dataSource.data1} enableVirtualization={true} headerTitle=\"Contacts\" fields={this.fields} cssClass=\"e-list-template\" height={500} template={this.template} actionComplete={this.onActionComplete.bind(this)} ref={(listview) => { this.listviewInstance = listview; }} actionBegin={this.onActionBegin.bind(this)} showHeader={true}>\r\n                                <Inject services={[Virtualization]}/>\r\n                            </ListViewComponent>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"#slider_event\" className='col-lg-4 property-section'>\r\n                        <PropertyPane title='Properties'>\r\n                            <table id=\"Properties\" title=\"Tooltip\" className='property-panel-table' style={{ width: '100%' }}>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td style={{ width: '50%' }}>\r\n                                            <div className=\"userselect\">Load data</div>\r\n                                        </td>\r\n                                        <td style={{ width: '50%', paddingRight: '10px' }}>\r\n                                            <div>\r\n                                                \r\n                                                <DropDownListComponent id='ddl' dataSource={this.ddlDatasource} fields={this.ddlFields} index={0} change={this.onChange.bind(this)} placeholder=\"Select a range\" popupHeight=\"200px\"/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td style={{ width: '50%' }}>\r\n                                            <div className=\"userselect\">Time taken</div>\r\n                                        </td>\r\n                                        <td style={{ width: '50%', paddingRight: '10px' }}>\r\n                                            <div style={{ paddingLeft: '10px', paddingTop: '0px' }}>\r\n                                                <span id=\"time\">0 ms</span>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </PropertyPane>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>);\r\n    }\r\n}\r\n\nrender(<UiVirtualization />, document.getElementById('sample'));","sample-base.js":"import * as React from 'react';\n    {{ripple}}\n    export class SampleBase extends React.PureComponent {\n        rendereComplete() {\n            /**custom render complete function */\n        }\n        componentDidMount() {\n            setTimeout(() => {\n            this.rendereComplete();\n        });\n          }\n        }\n    ","dependencies":"{\"@syncfusion/ej2\": \"*\",\"@syncfusion/ej2-react-base\": \"*\",\"@syncfusion/ej2-react-buttons\": \"*\",\"@syncfusion/ej2-react-calendars\": \"*\",\"@syncfusion/ej2-react-charts\": \"*\",\"@syncfusion/ej2-react-diagrams\": \"*\",\"@syncfusion/ej2-react-circulargauge\": \"*\",\"@syncfusion/ej2-react-dropdowns\": \"*\",\"@syncfusion/ej2-react-filemanager\": \"*\",\"@syncfusion/ej2-react-grids\": \"*\",\"@syncfusion/ej2-react-inputs\": \"*\",\"@syncfusion/ej2-react-layouts\": \"*\",\"@syncfusion/ej2-react-lineargauge\": \"*\",\"@syncfusion/ej2-react-barcode-generator\": \"*\",\"@syncfusion/ej2-react-lists\": \"*\",\"@syncfusion/ej2-react-maps\": \"*\",\"@syncfusion/ej2-react-treemap\": \"*\",\"@syncfusion/ej2-react-heatmap\": \"*\",\"@syncfusion/ej2-react-navigations\": \"*\",\"@syncfusion/ej2-react-notifications\": \"*\",\"@syncfusion/ej2-react-inplace-editor\": \"*\",\"@syncfusion/ej2-react-treegrid\": \"*\",\"@syncfusion/ej2-react-popups\": \"*\",\"@syncfusion/ej2-react-schedule\": \"*\",\"@syncfusion/ej2-react-splitbuttons\": \"*\",\"@syncfusion/ej2-react-documenteditor\": \"*\",\"@syncfusion/ej2-react-richtexteditor\": \"*\",\"@syncfusion/ej2-react-pivotview\": \"*\",\"@syncfusion/ej2-react-pdfviewer\": \"*\",\"@syncfusion/ej2-react-querybuilder\": \"*\",\"@syncfusion/ej2-react-gantt\": \"*\",\"@syncfusion/ej2-react-spreadsheet\": \"*\"}"}