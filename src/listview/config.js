"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListViewSampleOrder = [
    { 'path': 'listview/default', 'component': 'Default', 'name': 'Default Functionalities', 'description': 'This example demonstrates how to initialize Syncfusion React flat & group listview. Click any list item to select and play with ListView.', 'order': '01', 'category': 'ListView', 'api': '{"ListViewComponent": ["dataSource", "fields", "appendTo"]}' },
    { 'path': 'listview/remote-list', 'component': 'Remote', 'name': 'Remote Data', 'description': 'This example demonstrates how to bind remote data to Syncfusion React listview using DataManager to fetch the data from server.', 'order': '01', 'category': 'ListView', 'api': '{"ListViewComponent": ["dataSource", "fields", "headerTitle", "showHeader", "query", "appendTo"]}' },
    { 'path': 'listview/check-list', 'component': 'Checklist', 'name': 'Checklist', 'description': 'This example demonstrates how to create to-do/task list using checklist(checkbox) of Syncfusion React listview which also supports multi selection.', 'order': '01', 'category': 'ListView', 'api': '{"ListViewComponent": ["dataSource", "fields", "headerTitle", "showHeader", "showIcon", "appendTo"]}' },
    { 'path': 'listview/nested-list', 'component': 'Nested', 'name': 'Nested List', 'description': 'This example demonstrates how to create nested navigation Syncfusion React listview using array of nested objects using child property.', 'order': '01', 'category': 'ListView', 'api': '{"ListViewComponent": ["dataSource", "fields", "showCheckBox", "appendTo"]}' },
    { 'path': 'listview/virtualization', 'component': 'UiVirtualization', 'name': 'Virtualization', 'description': 'This example demonstrates how to load huge amount of data on demand using React ListView virtualization by loading viewable items in view port.', 'order': '01', 'category': 'ListView', 'api': '{"ListViewComponent": ["dataSource", "fields", "headerTitle", "height", "showHeader", "enableVirtualization", "actionComplete", "actionBegin", "template", "appendTo"]}' },
    { 'path': 'listview/template', 'component': 'Template', 'name': 'Template', 'description': 'This example demonstrates how to customize Syncfusion React listview with dynamic HTML elements. Here, we showcased news feed application using listview.', 'order': '02', 'category': 'Customization', 'api': '{"ListViewComponent": ["dataSource", "fields", "headerTitle", "showHeader", "template", "appendTo"]}' },
    { 'path': 'listview/group-template', 'component': 'GroupTemplate', 'name': 'Group Template', 'description': 'This example demonstrates how to customize Syncfusion React listview grouping with dynamic HTML template to achieve mobile settings UI with in-built CSS.', 'order': '02', 'category': 'Customization', 'api': '{"ListViewComponent": ["dataSource", "fields", "headerTitle", "showHeader", "template", "groupTemplate", "appendTo"]}' },
    { 'path': 'listview/call-history', 'component': 'CallHistory', 'name': 'Call History', 'description': 'This example demonstrates how to integrate Syncfusion React listview with tab control in real world mobile call history app using built-in CSS classes.', 'order': '03', 'category': 'Use Case', 'api': '{"ListViewComponent": ["dataSource", "fields", "select", "showIcon", "appendTo"]}' }
];
